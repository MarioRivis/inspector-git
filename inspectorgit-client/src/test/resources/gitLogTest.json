{"commits":[{"id":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","parentIds":[""],"authorName":"Mario Rivis","authorEmail":"mario.rivis@dialogdata.de","authorDate":"Aug 28, 2019, 10:58:38 AM","committerName":"Mario Rivis","committerEmail":"mario.rivis@dialogdata.de","committerDate":"Aug 28, 2019, 10:58:38 AM","message":"Initial commit with Gitclient and a try to parse commit diffs","changes":[{"oldFileName":"dev/null","newFileName":".gitignore","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"*.iml"},{"operation":"ADD","number":2,"content":".idea/"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"pom.xml","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"operation":"ADD","number":2,"content":"\u003cproject xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\""},{"operation":"ADD","number":3,"content":"         xmlns\u003d\"http://maven.apache.org/POM/4.0.0\""},{"operation":"ADD","number":4,"content":"         xsi:schemaLocation\u003d\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e"},{"operation":"ADD","number":5,"content":"    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":8,"content":"    \u003cartifactId\u003egit-second\u003c/artifactId\u003e"},{"operation":"ADD","number":9,"content":"    \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":10,"content":"    \u003cbuild\u003e"},{"operation":"ADD","number":11,"content":"        \u003cplugins\u003e"},{"operation":"ADD","number":12,"content":"            \u003cplugin\u003e"},{"operation":"ADD","number":13,"content":"                \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e"},{"operation":"ADD","number":14,"content":"                \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e"},{"operation":"ADD","number":15,"content":"                \u003cconfiguration\u003e"},{"operation":"ADD","number":16,"content":"                    \u003csource\u003e8\u003c/source\u003e"},{"operation":"ADD","number":17,"content":"                    \u003ctarget\u003e8\u003c/target\u003e"},{"operation":"ADD","number":18,"content":"                \u003c/configuration\u003e"},{"operation":"ADD","number":19,"content":"            \u003c/plugin\u003e"},{"operation":"ADD","number":20,"content":"        \u003c/plugins\u003e"},{"operation":"ADD","number":21,"content":"    \u003c/build\u003e"},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"    \u003cdependencies\u003e"},{"operation":"ADD","number":24,"content":"        \u003c!-- Core Library --\u003e"},{"operation":"ADD","number":25,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":26,"content":"            \u003cgroupId\u003eorg.eclipse.jgit\u003c/groupId\u003e"},{"operation":"ADD","number":27,"content":"            \u003cartifactId\u003eorg.eclipse.jgit\u003c/artifactId\u003e"},{"operation":"ADD","number":28,"content":"            \u003cversion\u003e5.4.2.201908231537-r\u003c/version\u003e"},{"operation":"ADD","number":29,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":30,"content":""},{"operation":"ADD","number":31,"content":"        \u003c!-- Smart HTTP Servlet --\u003e"},{"operation":"ADD","number":32,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":33,"content":"            \u003cgroupId\u003eorg.eclipse.jgit\u003c/groupId\u003e"},{"operation":"ADD","number":34,"content":"            \u003cartifactId\u003eorg.eclipse.jgit.http.server\u003c/artifactId\u003e"},{"operation":"ADD","number":35,"content":"            \u003cversion\u003e5.4.2.201908231537-r\u003c/version\u003e"},{"operation":"ADD","number":36,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":37,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":38,"content":"            \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e"},{"operation":"ADD","number":39,"content":"            \u003cartifactId\u003elombok\u003c/artifactId\u003e"},{"operation":"ADD","number":40,"content":"            \u003cversion\u003e1.18.2\u003c/version\u003e"},{"operation":"ADD","number":41,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":42,"content":"    \u003c/dependencies\u003e"},{"operation":"ADD","number":43,"content":""},{"operation":"ADD","number":44,"content":"\u003c/project\u003e"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/ChangeData.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import lombok.*;"},{"operation":"ADD","number":4,"content":"import org.eclipse.jgit.diff.DiffEntry;"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"@Data"},{"operation":"ADD","number":7,"content":"@Builder"},{"operation":"ADD","number":8,"content":"@EqualsAndHashCode"},{"operation":"ADD","number":9,"content":"@NoArgsConstructor"},{"operation":"ADD","number":10,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"ADD","number":11,"content":"public class ChangeData {"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    private String commitID;"},{"operation":"ADD","number":14,"content":"    private String oldFileName;"},{"operation":"ADD","number":15,"content":"    private String newFileName;"},{"operation":"ADD","number":16,"content":"    private DiffEntry.ChangeType type;"},{"operation":"ADD","number":17,"content":"    private String diff;"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"    private int addedLines;"},{"operation":"ADD","number":20,"content":"    private int deletedLines;"},{"operation":"ADD","number":21,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/CommitData.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import lombok.*;"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"import java.util.Date;"},{"operation":"ADD","number":6,"content":"import java.util.List;"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"@Data"},{"operation":"ADD","number":9,"content":"@Builder"},{"operation":"ADD","number":10,"content":"@EqualsAndHashCode"},{"operation":"ADD","number":11,"content":"@NoArgsConstructor"},{"operation":"ADD","number":12,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"ADD","number":13,"content":"public class CommitData {"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    private String id;"},{"operation":"ADD","number":16,"content":"    private String message;"},{"operation":"ADD","number":17,"content":"    private String authorName;"},{"operation":"ADD","number":18,"content":"    private String authorEmail;"},{"operation":"ADD","number":19,"content":"    private Date date;"},{"operation":"ADD","number":20,"content":""},{"operation":"ADD","number":21,"content":"    private List\u003cString\u003e parentIds;"},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"    private List\u003cChangeData\u003e changes;"},{"operation":"ADD","number":24,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/Constants.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.io.File;"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"public class Constants {"},{"operation":"ADD","number":6,"content":"    public static final String FOLDER_NAME \u003d \".gitsecond\";"},{"operation":"ADD","number":7,"content":"    public static final String APP_FOLDER_PATH \u003d System.getProperty(\"user.home\") + File.separator + FOLDER_NAME;"},{"operation":"ADD","number":8,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/File.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import lombok.*;"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"@Data"},{"operation":"ADD","number":6,"content":"@Builder"},{"operation":"ADD","number":7,"content":"@EqualsAndHashCode"},{"operation":"ADD","number":8,"content":"@NoArgsConstructor"},{"operation":"ADD","number":9,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"ADD","number":10,"content":"@ToString"},{"operation":"ADD","number":11,"content":"public class File {"},{"operation":"ADD","number":12,"content":"    private String name;"},{"operation":"ADD","number":13,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.eclipse.jgit.api.CloneCommand;"},{"operation":"ADD","number":4,"content":"import org.eclipse.jgit.api.Git;"},{"operation":"ADD","number":5,"content":"import org.eclipse.jgit.api.errors.GitAPIException;"},{"operation":"ADD","number":6,"content":"import org.eclipse.jgit.diff.DiffEntry;"},{"operation":"ADD","number":7,"content":"import org.eclipse.jgit.diff.DiffFormatter;"},{"operation":"ADD","number":8,"content":"import org.eclipse.jgit.diff.RawText;"},{"operation":"ADD","number":9,"content":"import org.eclipse.jgit.diff.RawTextComparator;"},{"operation":"ADD","number":10,"content":"import org.eclipse.jgit.lib.ObjectId;"},{"operation":"ADD","number":11,"content":"import org.eclipse.jgit.lib.ObjectLoader;"},{"operation":"ADD","number":12,"content":"import org.eclipse.jgit.lib.ObjectReader;"},{"operation":"ADD","number":13,"content":"import org.eclipse.jgit.lib.Repository;"},{"operation":"ADD","number":14,"content":"import org.eclipse.jgit.revwalk.RevCommit;"},{"operation":"ADD","number":15,"content":"import org.eclipse.jgit.revwalk.RevTree;"},{"operation":"ADD","number":16,"content":"import org.eclipse.jgit.revwalk.RevWalk;"},{"operation":"ADD","number":17,"content":"import org.eclipse.jgit.revwalk.filter.RevFilter;"},{"operation":"ADD","number":18,"content":"import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;"},{"operation":"ADD","number":19,"content":"import org.eclipse.jgit.treewalk.AbstractTreeIterator;"},{"operation":"ADD","number":20,"content":"import org.eclipse.jgit.treewalk.CanonicalTreeParser;"},{"operation":"ADD","number":21,"content":"import org.eclipse.jgit.treewalk.EmptyTreeIterator;"},{"operation":"ADD","number":22,"content":"import org.eclipse.jgit.treewalk.TreeWalk;"},{"operation":"ADD","number":23,"content":"import org.eclipse.jgit.treewalk.filter.PathFilter;"},{"operation":"ADD","number":24,"content":"import org.eclipse.jgit.util.io.DisabledOutputStream;"},{"operation":"ADD","number":25,"content":"import org.slf4j.Logger;"},{"operation":"ADD","number":26,"content":"import org.slf4j.LoggerFactory;"},{"operation":"ADD","number":27,"content":""},{"operation":"ADD","number":28,"content":"import java.io.ByteArrayOutputStream;"},{"operation":"ADD","number":29,"content":"import java.io.File;"},{"operation":"ADD","number":30,"content":"import java.io.FileNotFoundException;"},{"operation":"ADD","number":31,"content":"import java.io.IOException;"},{"operation":"ADD","number":32,"content":"import java.nio.file.Paths;"},{"operation":"ADD","number":33,"content":"import java.util.*;"},{"operation":"ADD","number":34,"content":"import java.util.stream.Collectors;"},{"operation":"ADD","number":35,"content":"import java.util.stream.StreamSupport;"},{"operation":"ADD","number":36,"content":""},{"operation":"ADD","number":37,"content":"public class GitClient {"},{"operation":"ADD","number":38,"content":""},{"operation":"ADD","number":39,"content":"    public static final String REPOS_PATH \u003d Constants.APP_FOLDER_PATH + File.separator + \"repos\";"},{"operation":"ADD","number":40,"content":"    private static final Logger log \u003d LoggerFactory.getLogger(GitClient.class);"},{"operation":"ADD","number":41,"content":""},{"operation":"ADD","number":42,"content":"    public GitClient() {"},{"operation":"ADD","number":43,"content":"        initializeReposPath();"},{"operation":"ADD","number":44,"content":"    }"},{"operation":"ADD","number":45,"content":""},{"operation":"ADD","number":46,"content":""},{"operation":"ADD","number":47,"content":"    private void initializeReposPath() {"},{"operation":"ADD","number":48,"content":"        File repo_file_path \u003d new File(REPOS_PATH);"},{"operation":"ADD","number":49,"content":"        if (!repo_file_path.exists()) {"},{"operation":"ADD","number":50,"content":"            boolean didMakeDirs \u003d repo_file_path.mkdirs();"},{"operation":"ADD","number":51,"content":"            if (!didMakeDirs) {"},{"operation":"ADD","number":52,"content":"                log.error(\"Could not make directory \" + REPOS_PATH);"},{"operation":"ADD","number":53,"content":"            }"},{"operation":"ADD","number":54,"content":"        }"},{"operation":"ADD","number":55,"content":""},{"operation":"ADD","number":56,"content":"        log.info(\"Repos path set to \" + REPOS_PATH);"},{"operation":"ADD","number":57,"content":"    }"},{"operation":"ADD","number":58,"content":""},{"operation":"ADD","number":59,"content":"    private Git getRepositoryByProjectIdAndRepoName(String repoName) throws IOException {"},{"operation":"ADD","number":60,"content":"        return Git.open(Paths.get(REPOS_PATH + File.separator + repoName + File.separator + \".git\").toFile());"},{"operation":"ADD","number":61,"content":"    }"},{"operation":"ADD","number":62,"content":""},{"operation":"ADD","number":63,"content":"    public void checkoutRevisionForStudent(String revisionName, String repoName) {"},{"operation":"ADD","number":64,"content":"        try {"},{"operation":"ADD","number":65,"content":"            Git git \u003d this.getRepositoryByProjectIdAndRepoName(repoName);"},{"operation":"ADD","number":66,"content":"            git.checkout().setName(revisionName).call();"},{"operation":"ADD","number":67,"content":"        } catch (IOException ex) {"},{"operation":"ADD","number":68,"content":"            log.error(\"could not find repository for \" + repoName, ex);"},{"operation":"ADD","number":69,"content":"        } catch (GitAPIException ex) {"},{"operation":"ADD","number":70,"content":"            log.error(\"Error trying to checkout revision \" + revisionName + \" for student \" + repoName, ex);"},{"operation":"ADD","number":71,"content":"        }"},{"operation":"ADD","number":72,"content":""},{"operation":"ADD","number":73,"content":"    }"},{"operation":"ADD","number":74,"content":""},{"operation":"ADD","number":75,"content":"    public void cloneAndInitializeRepository(String repositoryURL, String repoName) throws GitAPIException {"},{"operation":"ADD","number":76,"content":""},{"operation":"ADD","number":77,"content":"        File studentFolder \u003d Paths.get(REPOS_PATH + File.separator + repoName).toFile();"},{"operation":"ADD","number":78,"content":"        if (studentFolder.exists() \u0026\u0026 studentFolder.isDirectory()) {"},{"operation":"ADD","number":79,"content":"            log.error(\"Student \" + repoName + \" already has a cloned repository\");"},{"operation":"ADD","number":80,"content":"            return;"},{"operation":"ADD","number":81,"content":"        } else {"},{"operation":"ADD","number":82,"content":"            boolean createdStudentDirectory \u003d studentFolder.mkdirs();"},{"operation":"ADD","number":83,"content":"            if (!createdStudentDirectory) {"},{"operation":"ADD","number":84,"content":"                log.error(\"Could not create directory for student \" + repoName);"},{"operation":"ADD","number":85,"content":"                return;"},{"operation":"ADD","number":86,"content":"            }"},{"operation":"ADD","number":87,"content":"        }"},{"operation":"ADD","number":88,"content":""},{"operation":"ADD","number":89,"content":"        CloneCommand cloneCommand \u003d Git.cloneRepository().setURI(repositoryURL).setDirectory(studentFolder).setCloneAllBranches(true).setBranch(\"master\").setCredentialsProvider(new UsernamePasswordCredentialsProvider(\"mario.rivis@gmail.com\", \"just6and9\"));"},{"operation":"ADD","number":90,"content":"        cloneCommand.call();"},{"operation":"ADD","number":91,"content":"    }"},{"operation":"ADD","number":92,"content":""},{"operation":"ADD","number":93,"content":"    public String getFileContentForProjectAndRevision(String filePath, String repoName, String revisionName) throws IOException {"},{"operation":"ADD","number":94,"content":"        Repository repository \u003d this.getRepositoryByProjectIdAndRepoName(repoName).getRepository();"},{"operation":"ADD","number":95,"content":"        ObjectId lastCommitId \u003d repository.resolve(revisionName);"},{"operation":"ADD","number":96,"content":"        RevWalk revWalk \u003d new RevWalk(repository);"},{"operation":"ADD","number":97,"content":"        RevCommit commit \u003d revWalk.parseCommit(lastCommitId);"},{"operation":"ADD","number":98,"content":"        RevTree tree \u003d commit.getTree();"},{"operation":"ADD","number":99,"content":"        TreeWalk treeWalk \u003d new TreeWalk(repository);"},{"operation":"ADD","number":100,"content":"        treeWalk.addTree(tree);"},{"operation":"ADD","number":101,"content":"        treeWalk.setRecursive(true);"},{"operation":"ADD","number":102,"content":"        treeWalk.setFilter(PathFilter.create(filePath));"},{"operation":"ADD","number":103,"content":"        if (!treeWalk.next()) {"},{"operation":"ADD","number":104,"content":"            System.out.println(\"File not found\");"},{"operation":"ADD","number":105,"content":"            throw new FileNotFoundException(filePath);"},{"operation":"ADD","number":106,"content":"        } else {"},{"operation":"ADD","number":107,"content":"            ObjectId objectId \u003d treeWalk.getObjectId(0);"},{"operation":"ADD","number":108,"content":"            ObjectLoader loader \u003d repository.open(objectId);"},{"operation":"ADD","number":109,"content":"            return new String(loader.getBytes());"},{"operation":"ADD","number":110,"content":"        }"},{"operation":"ADD","number":111,"content":"    }"},{"operation":"ADD","number":112,"content":""},{"operation":"ADD","number":113,"content":"    public List\u003cCommitData\u003e generateGitLogForDx(String repoName) {"},{"operation":"ADD","number":114,"content":"        try {"},{"operation":"ADD","number":115,"content":"            Git git \u003d this.getRepositoryByProjectIdAndRepoName(repoName);"},{"operation":"ADD","number":116,"content":"            Repository repository \u003d git.getRepository();"},{"operation":"ADD","number":117,"content":"            return StreamSupport.stream(git.log().setRevFilter(RevFilter.ALL).call().spliterator(), false)"},{"operation":"ADD","number":118,"content":"                    .map((revCommit) -\u003e this.getCommitDetails(repository, revCommit))"},{"operation":"ADD","number":119,"content":"                    .collect(Collectors.toList());"},{"operation":"ADD","number":120,"content":"        } catch (GitAPIException var4) {"},{"operation":"ADD","number":121,"content":"            log.error(\"Git Api error\", var4);"},{"operation":"ADD","number":122,"content":"        } catch (IOException var5) {"},{"operation":"ADD","number":123,"content":"            log.error(\"could not find repository \" + repoName, var5);"},{"operation":"ADD","number":124,"content":"        }"},{"operation":"ADD","number":125,"content":""},{"operation":"ADD","number":126,"content":"        return null;"},{"operation":"ADD","number":127,"content":"    }"},{"operation":"ADD","number":128,"content":""},{"operation":"ADD","number":129,"content":"    private CommitData getCommitDetails(Repository repository, RevCommit revCommit) {"},{"operation":"ADD","number":130,"content":"        return CommitData.builder()"},{"operation":"ADD","number":131,"content":"                .id(revCommit.getName())"},{"operation":"ADD","number":132,"content":"                .authorName(revCommit.getAuthorIdent().getName())"},{"operation":"ADD","number":133,"content":"                .authorEmail(revCommit.getAuthorIdent().getEmailAddress())"},{"operation":"ADD","number":134,"content":"                .date(new Date((long) revCommit.getCommitTime() * 1000L))"},{"operation":"ADD","number":135,"content":"                .message(revCommit.getFullMessage())"},{"operation":"ADD","number":136,"content":"                .changes(this.getCommitChanges(repository, revCommit)).build();"},{"operation":"ADD","number":137,"content":"    }"},{"operation":"ADD","number":138,"content":""},{"operation":"ADD","number":139,"content":"    private List\u003cChangeData\u003e getCommitChanges(Repository repository, RevCommit revCommit) {"},{"operation":"ADD","number":140,"content":"        ObjectReader reader \u003d repository.newObjectReader();"},{"operation":"ADD","number":141,"content":"        AbstractTreeIterator parentTreeIterator \u003d new CanonicalTreeParser();"},{"operation":"ADD","number":142,"content":"        CanonicalTreeParser currentCommitTreeIterator \u003d new CanonicalTreeParser();"},{"operation":"ADD","number":143,"content":"        List diffs \u003d null;"},{"operation":"ADD","number":144,"content":""},{"operation":"ADD","number":145,"content":"        try {"},{"operation":"ADD","number":146,"content":"            if (revCommit.getParentCount() \u003d\u003d 0) {"},{"operation":"ADD","number":147,"content":"                parentTreeIterator \u003d new EmptyTreeIterator();"},{"operation":"ADD","number":148,"content":"            } else {"},{"operation":"ADD","number":149,"content":"                RevCommit parentCommit \u003d revCommit.getParent(0);"},{"operation":"ADD","number":150,"content":"                ((CanonicalTreeParser) parentTreeIterator).reset(reader, parentCommit.getTree().getId());"},{"operation":"ADD","number":151,"content":"            }"},{"operation":"ADD","number":152,"content":""},{"operation":"ADD","number":153,"content":"            currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"ADD","number":154,"content":"            DiffFormatter df \u003d new DiffFormatter(DisabledOutputStream.INSTANCE);"},{"operation":"ADD","number":155,"content":"            df.setRepository(repository);"},{"operation":"ADD","number":156,"content":"            df.setDiffComparator(RawTextComparator.DEFAULT);"},{"operation":"ADD","number":157,"content":"            df.setDetectRenames(true);"},{"operation":"ADD","number":158,"content":"            diffs \u003d df.scan(parentTreeIterator, currentCommitTreeIterator);"},{"operation":"ADD","number":159,"content":"        } catch (IOException var11) {"},{"operation":"ADD","number":160,"content":"            var11.printStackTrace();"},{"operation":"ADD","number":161,"content":"        }"},{"operation":"ADD","number":162,"content":""},{"operation":"ADD","number":163,"content":"        List\u003cChangeData\u003e changes \u003d new ArrayList();"},{"operation":"ADD","number":164,"content":"        Iterator var8 \u003d diffs.iterator();"},{"operation":"ADD","number":165,"content":""},{"operation":"ADD","number":166,"content":"        while (var8.hasNext()) {"},{"operation":"ADD","number":167,"content":"            DiffEntry diff \u003d (DiffEntry) var8.next();"},{"operation":"ADD","number":168,"content":"            ChangeData repoChangeBlock \u003d ChangeData.builder()"},{"operation":"ADD","number":169,"content":"                    .type(diff.getChangeType())"},{"operation":"ADD","number":170,"content":"                    .oldFileName(diff.getOldPath())"},{"operation":"ADD","number":171,"content":"                    .newFileName(diff.getNewPath().equals(\"/dev/null\") ? diff.getOldPath() : diff.getNewPath())"},{"operation":"ADD","number":172,"content":"                    .build();"},{"operation":"ADD","number":173,"content":"            this.setNoOfLinesDeletedAndAdded(repository, diff, repoChangeBlock);"},{"operation":"ADD","number":174,"content":"            changes.add(repoChangeBlock);"},{"operation":"ADD","number":175,"content":"        }"},{"operation":"ADD","number":176,"content":""},{"operation":"ADD","number":177,"content":"        return changes;"},{"operation":"ADD","number":178,"content":"    }"},{"operation":"ADD","number":179,"content":""},{"operation":"ADD","number":180,"content":"    private void setNoOfLinesDeletedAndAdded(Repository repository, DiffEntry diff, ChangeData repoChangeBlock) {"},{"operation":"ADD","number":181,"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"operation":"ADD","number":182,"content":"        DiffFormatter df \u003d new DiffFormatter(out);"},{"operation":"ADD","number":183,"content":"        df.setRepository(repository);"},{"operation":"ADD","number":184,"content":""},{"operation":"ADD","number":185,"content":"        try {"},{"operation":"ADD","number":186,"content":"            df.setContext(0);"},{"operation":"ADD","number":187,"content":"            df.setDetectRenames(true);"},{"operation":"ADD","number":188,"content":"            df.format(diff);"},{"operation":"ADD","number":189,"content":"            RawText r \u003d new RawText(out.toByteArray());"},{"operation":"ADD","number":190,"content":"            r.getLineDelimiter();"},{"operation":"ADD","number":191,"content":"            String modifications \u003d out.toString();"},{"operation":"ADD","number":192,"content":"            out.reset();"},{"operation":"ADD","number":193,"content":"            this.countAddedAndDeletedLines(modifications, repoChangeBlock);"},{"operation":"ADD","number":194,"content":"        } catch (IOException var8) {"},{"operation":"ADD","number":195,"content":"            var8.printStackTrace();"},{"operation":"ADD","number":196,"content":"        }"},{"operation":"ADD","number":197,"content":""},{"operation":"ADD","number":198,"content":"    }"},{"operation":"ADD","number":199,"content":""},{"operation":"ADD","number":200,"content":"    private void countAddedAndDeletedLines(String modifications, ChangeData repoChangeBlock) {"},{"operation":"ADD","number":201,"content":"        int addedLines \u003d 0;"},{"operation":"ADD","number":202,"content":"        int deletedLines \u003d 0;"},{"operation":"ADD","number":203,"content":"        List\u003cString\u003e lines \u003d Arrays.asList(modifications.split(\"\\n\"));"},{"operation":"ADD","number":204,"content":"        lines \u003d this.trimList(lines);"},{"operation":"ADD","number":205,"content":"        Iterator var6 \u003d lines.iterator();"},{"operation":"ADD","number":206,"content":""},{"operation":"ADD","number":207,"content":"        while (var6.hasNext()) {"},{"operation":"ADD","number":208,"content":"            String line \u003d (String) var6.next();"},{"operation":"ADD","number":209,"content":"            if (line.startsWith(\"+\")) {"},{"operation":"ADD","number":210,"content":"                ++addedLines;"},{"operation":"ADD","number":211,"content":"            }"},{"operation":"ADD","number":212,"content":""},{"operation":"ADD","number":213,"content":"            if (line.startsWith(\"-\")) {"},{"operation":"ADD","number":214,"content":"                ++deletedLines;"},{"operation":"ADD","number":215,"content":"            }"},{"operation":"ADD","number":216,"content":"        }"},{"operation":"ADD","number":217,"content":""},{"operation":"ADD","number":218,"content":"        repoChangeBlock.setDiff(modifications);"},{"operation":"ADD","number":219,"content":"        repoChangeBlock.setAddedLines(addedLines);"},{"operation":"ADD","number":220,"content":"        repoChangeBlock.setDeletedLines(deletedLines);"},{"operation":"ADD","number":221,"content":"    }"},{"operation":"ADD","number":222,"content":""},{"operation":"ADD","number":223,"content":"    private List\u003cString\u003e trimList(List\u003cString\u003e lines) {"},{"operation":"ADD","number":224,"content":"        for (int i \u003d 0; i \u003c lines.size(); ++i) {"},{"operation":"ADD","number":225,"content":"            if (lines.get(i).startsWith(\"@@\")) {"},{"operation":"ADD","number":226,"content":"                return lines.subList(i, lines.size());"},{"operation":"ADD","number":227,"content":"            }"},{"operation":"ADD","number":228,"content":"        }"},{"operation":"ADD","number":229,"content":""},{"operation":"ADD","number":230,"content":"        return Collections.emptyList();"},{"operation":"ADD","number":231,"content":"    }"},{"operation":"ADD","number":232,"content":""},{"operation":"ADD","number":233,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/Main.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.eclipse.jgit.api.errors.GitAPIException;"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"import java.util.List;"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"public class Main {"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"    public static final String STUDENT_MANAGER \u003d \"studentManager\";"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    public static void main(String[] args) {"},{"operation":"ADD","number":12,"content":"        GitClient gitClient \u003d new GitClient();"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"        try {"},{"operation":"ADD","number":15,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/MarioRivis/studentManager\", STUDENT_MANAGER);"},{"operation":"ADD","number":16,"content":"            List\u003cCommitData\u003e commitDatas \u003d gitClient.generateGitLogForDx(STUDENT_MANAGER);"},{"operation":"ADD","number":17,"content":""},{"operation":"ADD","number":18,"content":"            System.out.println(commitDatas);"},{"operation":"ADD","number":19,"content":"        } catch (GitAPIException e) {"},{"operation":"ADD","number":20,"content":"            e.printStackTrace();"},{"operation":"ADD","number":21,"content":"        }"},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"    }"},{"operation":"ADD","number":24,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"","isBinary":false,"isBlame":false}]},{"id":"11957e99f8b0b5aeba15883d28df5a23b76d8556","parentIds":["e6d7d2373d7c014cc63d69a6bee2d45b477236be"],"authorName":"Mario Rivis","authorEmail":"mario.rivis@dialogdata.de","authorDate":"Aug 28, 2019, 5:15:40 PM","committerName":"Mario Rivis","committerEmail":"mario.rivis@dialogdata.de","committerDate":"Aug 28, 2019, 5:15:40 PM","message":"Added model classes mocks and finished parsing with jgit","changes":[{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.java","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.java","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData;"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.data.ChangesData;"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.data.CommitData;"}]},{"lineChanges":[{"operation":"ADD","number":44,"content":"    private final String could_not_parse_changes_correctly \u003d \"Could not parse changes correctly\";"}]},{"lineChanges":[{"operation":"REMOVE","number":63,"content":"    public void checkoutRevisionForStudent(String revisionName, String repoName) {"},{"operation":"ADD","number":67,"content":"    public void checkoutRevisionForRepo(String revisionName, String repoName) {"}]},{"lineChanges":[{"operation":"REMOVE","number":93,"content":"    public String getFileContentForProjectAndRevision(String filePath, String repoName, String revisionName) throws IOException {"},{"operation":"ADD","number":97,"content":"    public String getFileContentForRepoAndRevision(String filePath, String repoName, String revisionName) throws IOException {"}]},{"lineChanges":[{"operation":"REMOVE","number":136,"content":"                .changes(this.getCommitChanges(repository, revCommit)).build();"},{"operation":"ADD","number":140,"content":"                .changeSets(this.getCommitChanges(repository, revCommit))"},{"operation":"ADD","number":141,"content":"                .parentIds(Arrays.stream(revCommit.getParents()).map(RevCommit::getName).collect(Collectors.toList()))"},{"operation":"ADD","number":142,"content":"                .build();"}]},{"lineChanges":[{"operation":"REMOVE","number":139,"content":"    private List\u003cChangeData\u003e getCommitChanges(Repository repository, RevCommit revCommit) {"},{"operation":"ADD","number":145,"content":"    private List\u003cChangesData\u003e getCommitChanges(Repository repository, RevCommit revCommit) {"}]},{"lineChanges":[{"operation":"REMOVE","number":141,"content":"        AbstractTreeIterator parentTreeIterator \u003d new CanonicalTreeParser();"}]},{"lineChanges":[{"operation":"REMOVE","number":143,"content":"        List diffs \u003d null;"}]},{"lineChanges":[{"operation":"ADD","number":150,"content":"            currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"ADD","number":151,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":147,"content":"                parentTreeIterator \u003d new EmptyTreeIterator();"},{"operation":"ADD","number":153,"content":"                AbstractTreeIterator parentTreeIterator \u003d new EmptyTreeIterator();"},{"operation":"ADD","number":154,"content":"                List\u003cDiffEntry\u003e diffs \u003d getDiffsBetweenCommits(repository, parentTreeIterator, currentCommitTreeIterator);"},{"operation":"ADD","number":155,"content":"                List\u003cChangeData\u003e changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs, 0);"},{"operation":"ADD","number":156,"content":"                return Collections.singletonList(new ChangesData(null, changes));"}]},{"lineChanges":[{"operation":"REMOVE","number":149,"content":"                RevCommit parentCommit \u003d revCommit.getParent(0);"},{"operation":"REMOVE","number":150,"content":"                ((CanonicalTreeParser) parentTreeIterator).reset(reader, parentCommit.getTree().getId());"},{"operation":"ADD","number":158,"content":"                List\u003cChangesData\u003e changesData \u003d Arrays.stream(revCommit.getParents())"},{"operation":"ADD","number":159,"content":"                        .map(parentCommit -\u003e getChangesData(repository, reader, currentCommitTreeIterator, revCommit, parentCommit, revCommit.getParentCount() \u003e\u003d 2 ? Integer.MAX_VALUE : 0))"},{"operation":"ADD","number":160,"content":"                        .filter(Objects::nonNull)"},{"operation":"ADD","number":161,"content":"                        .collect(Collectors.toList());"},{"operation":"ADD","number":162,"content":""},{"operation":"ADD","number":163,"content":"                if (changesData.size() !\u003d revCommit.getParentCount()) {"},{"operation":"ADD","number":164,"content":"                    log.warn(\"Not all merge commit parents have been correctly parsed!\");"},{"operation":"ADD","number":165,"content":"                }"},{"operation":"ADD","number":166,"content":"                return changesData;"}]},{"lineChanges":[{"operation":"REMOVE","number":153,"content":"            currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"REMOVE","number":154,"content":"            DiffFormatter df \u003d new DiffFormatter(DisabledOutputStream.INSTANCE);"},{"operation":"REMOVE","number":155,"content":"            df.setRepository(repository);"},{"operation":"REMOVE","number":156,"content":"            df.setDiffComparator(RawTextComparator.DEFAULT);"},{"operation":"REMOVE","number":157,"content":"            df.setDetectRenames(true);"},{"operation":"REMOVE","number":158,"content":"            diffs \u003d df.scan(parentTreeIterator, currentCommitTreeIterator);"},{"operation":"REMOVE","number":159,"content":"        } catch (IOException var11) {"},{"operation":"REMOVE","number":160,"content":"            var11.printStackTrace();"},{"operation":"ADD","number":169,"content":"        } catch (IOException e) {"},{"operation":"ADD","number":170,"content":"            log.error(could_not_parse_changes_correctly, e);"},{"operation":"ADD","number":171,"content":"            return Collections.emptyList();"}]},{"lineChanges":[{"operation":"ADD","number":173,"content":"    }"}]},{"lineChanges":[{"operation":"REMOVE","number":163,"content":"        List\u003cChangeData\u003e changes \u003d new ArrayList();"},{"operation":"REMOVE","number":164,"content":"        Iterator var8 \u003d diffs.iterator();"},{"operation":"ADD","number":175,"content":"    private ChangesData getChangesData(Repository repository, ObjectReader reader, CanonicalTreeParser currentCommitTreeIterator, RevCommit revCommit, RevCommit parentCommit, int contextLines) {"},{"operation":"ADD","number":176,"content":"        CanonicalTreeParser parentIterator \u003d new CanonicalTreeParser();"},{"operation":"ADD","number":177,"content":"        try {"},{"operation":"ADD","number":178,"content":"            parentIterator.reset(reader, parentCommit.getTree().getId());"},{"operation":"ADD","number":179,"content":"            List\u003cDiffEntry\u003e diffsBetweenCommits \u003d getDiffsBetweenCommits(repository, parentIterator, currentCommitTreeIterator);"},{"operation":"ADD","number":180,"content":"            List\u003cChangeData\u003e changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits, contextLines);"}]},{"lineChanges":[{"operation":"REMOVE","number":166,"content":"        while (var8.hasNext()) {"},{"operation":"REMOVE","number":167,"content":"            DiffEntry diff \u003d (DiffEntry) var8.next();"},{"operation":"REMOVE","number":168,"content":"            ChangeData repoChangeBlock \u003d ChangeData.builder()"},{"operation":"ADD","number":182,"content":"            if (changeDatas !\u003d null) {"},{"operation":"ADD","number":183,"content":"                return new ChangesData(parentCommit.getName(), changeDatas);"},{"operation":"ADD","number":184,"content":"            } else {"},{"operation":"ADD","number":185,"content":"                return null;"},{"operation":"ADD","number":186,"content":"            }"},{"operation":"ADD","number":187,"content":"        } catch (IOException e) {"},{"operation":"ADD","number":188,"content":"            log.error(could_not_parse_changes_correctly, e);"},{"operation":"ADD","number":189,"content":"            return null;"},{"operation":"ADD","number":190,"content":"        } finally {"},{"operation":"ADD","number":191,"content":"            try {"},{"operation":"ADD","number":192,"content":"                currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"ADD","number":193,"content":"            } catch (IOException e) {"},{"operation":"ADD","number":194,"content":"                log.error(could_not_parse_changes_correctly, e);"},{"operation":"ADD","number":195,"content":"            }"},{"operation":"ADD","number":196,"content":"        }"},{"operation":"ADD","number":197,"content":"    }"},{"operation":"ADD","number":198,"content":""},{"operation":"ADD","number":199,"content":"    private List\u003cChangeData\u003e transformDiffsToChangeDatas(RevCommit revCommit, Repository repository, List\u003cDiffEntry\u003e diffs, int contextLines) {"},{"operation":"ADD","number":200,"content":"        return diffs.stream().map(diff -\u003e {"},{"operation":"ADD","number":201,"content":"            ChangeData changeData \u003d ChangeData.builder()"}]},{"lineChanges":[{"operation":"ADD","number":204,"content":"                    .commitID(revCommit.getName())"}]},{"lineChanges":[{"operation":"REMOVE","number":173,"content":"            this.setNoOfLinesDeletedAndAdded(repository, diff, repoChangeBlock);"},{"operation":"REMOVE","number":174,"content":"            changes.add(repoChangeBlock);"},{"operation":"REMOVE","number":175,"content":"        }"},{"operation":"ADD","number":207,"content":"            setNoOfLinesDeletedAndAdded(repository, diff, changeData, contextLines);"},{"operation":"ADD","number":208,"content":"            return changeData;"},{"operation":"ADD","number":209,"content":"        }).collect(Collectors.toList());"},{"operation":"ADD","number":210,"content":"    }"}]},{"lineChanges":[{"operation":"REMOVE","number":177,"content":"        return changes;"},{"operation":"ADD","number":212,"content":"    private List\u003cDiffEntry\u003e getDiffsBetweenCommits(Repository repository, AbstractTreeIterator parentTreeIterator, AbstractTreeIterator currentCommitTreeIterator) throws IOException {"},{"operation":"ADD","number":213,"content":"        DiffFormatter df \u003d new DiffFormatter(DisabledOutputStream.INSTANCE);"},{"operation":"ADD","number":214,"content":"        df.setRepository(repository);"},{"operation":"ADD","number":215,"content":"        df.setDiffComparator(RawTextComparator.DEFAULT);"},{"operation":"ADD","number":216,"content":"        df.setDetectRenames(true);"},{"operation":"ADD","number":217,"content":"        return df.scan(parentTreeIterator, currentCommitTreeIterator);"}]},{"lineChanges":[{"operation":"REMOVE","number":180,"content":"    private void setNoOfLinesDeletedAndAdded(Repository repository, DiffEntry diff, ChangeData repoChangeBlock) {"},{"operation":"ADD","number":220,"content":"    private void setNoOfLinesDeletedAndAdded(Repository repository, DiffEntry diff, ChangeData repoChangeBlock, int contextLines) {"}]},{"lineChanges":[{"operation":"REMOVE","number":186,"content":"            df.setContext(0);"},{"operation":"ADD","number":226,"content":"            df.setContext(contextLines);"}]},{"lineChanges":[{"operation":"REMOVE","number":193,"content":"            this.countAddedAndDeletedLines(modifications, repoChangeBlock);"},{"operation":"REMOVE","number":194,"content":"        } catch (IOException var8) {"},{"operation":"REMOVE","number":195,"content":"            var8.printStackTrace();"},{"operation":"ADD","number":233,"content":"            countAddedAndDeletedLines(modifications, repoChangeBlock);"},{"operation":"ADD","number":234,"content":"        } catch (IOException e) {"},{"operation":"ADD","number":235,"content":"            log.error(\"Diff between commits could not be parsed correctly!\", e);"}]},{"lineChanges":[{"operation":"REMOVE","number":205,"content":"        Iterator var6 \u003d lines.iterator();"}]},{"lineChanges":[{"operation":"REMOVE","number":207,"content":"        while (var6.hasNext()) {"},{"operation":"REMOVE","number":208,"content":"            String line \u003d (String) var6.next();"},{"operation":"ADD","number":246,"content":"        for (String line : lines) {"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.java","newFileName":"src/main/java/org/dxworks/gitsecond/Main.java","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData;"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.data.CommitData;"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import java.util.List;"},{"operation":"ADD","number":7,"content":"import java.util.*;"},{"operation":"ADD","number":8,"content":"import java.util.stream.Collectors;"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    public static final String STUDENT_MANAGER \u003d \"studentManager\";"},{"operation":"ADD","number":12,"content":"    public static final String REPO_NAME \u003d \"gitTest\";"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/MarioRivis/studentManager\", STUDENT_MANAGER);"},{"operation":"REMOVE","number":16,"content":"            List\u003cCommitData\u003e commitDatas \u003d gitClient.generateGitLogForDx(STUDENT_MANAGER);"},{"operation":"ADD","number":18,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME);"}]},{"lineChanges":[{"operation":"REMOVE","number":18,"content":"            System.out.println(commitDatas);"}]},{"lineChanges":[{"operation":"ADD","number":23,"content":"        List\u003cCommitData\u003e commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME);"},{"operation":"ADD","number":24,"content":"        List\u003cCommitData\u003e myCommits \u003d new ArrayList\u003c\u003e();"}]},{"lineChanges":[{"operation":"ADD","number":26,"content":"        System.out.println(commitDatas);"},{"operation":"ADD","number":27,"content":""},{"operation":"ADD","number":28,"content":"        final Map\u003cString, List\u003cString\u003e\u003e files \u003d new HashMap\u003c\u003e();"},{"operation":"ADD","number":29,"content":""},{"operation":"ADD","number":30,"content":"        List\u003cChangeData\u003e changes \u003d commitDatas.stream()"},{"operation":"ADD","number":31,"content":"                .filter(commitData -\u003e !commitData.isMergeCommit())"},{"operation":"ADD","number":32,"content":"                .flatMap(commitData -\u003e commitData.getChangeSets().stream())"},{"operation":"ADD","number":33,"content":"                .flatMap(changeSet -\u003e changeSet.getChanges().stream())"},{"operation":"ADD","number":34,"content":"                .collect(Collectors.toList());"},{"operation":"ADD","number":35,"content":"        Collections.reverse(changes);"},{"operation":"ADD","number":36,"content":""},{"operation":"ADD","number":37,"content":"        changes.forEach(change -\u003e {"},{"operation":"ADD","number":38,"content":"            String fileName \u003d change.getNewFileName();"},{"operation":"ADD","number":39,"content":"            files.computeIfAbsent(fileName, k -\u003e new ArrayList\u003c\u003e());"},{"operation":"ADD","number":40,"content":"            List\u003cString\u003e lines \u003d Arrays.asList(change.getDiff().split(\"\\n\"));"},{"operation":"ADD","number":41,"content":"            lines.stream().filter(line -\u003e line.startsWith(\"@@\")).forEach(line -\u003e {"},{"operation":"ADD","number":42,"content":"                int contentLineIndex \u003d lines.indexOf(line) + 1;"},{"operation":"ADD","number":43,"content":"                line \u003d line.replaceAll(\"@\", \"\").trim();"},{"operation":"ADD","number":44,"content":"                String[] info \u003d line.split(\" \");"},{"operation":"ADD","number":45,"content":"                String removeInfo \u003d info[0].substring(1);"},{"operation":"ADD","number":46,"content":"                String addInfo \u003d info[1].substring(1);"},{"operation":"ADD","number":47,"content":"                String[] removeNumbers \u003d removeInfo.split(\",\");"},{"operation":"ADD","number":48,"content":"                String[] addNumbers \u003d addInfo.split(\",\");"},{"operation":"ADD","number":49,"content":"                int removeStart \u003d Integer.parseInt(removeNumbers[0]) - 1;"},{"operation":"ADD","number":50,"content":"                int removeSize;"},{"operation":"ADD","number":51,"content":"                if (removeNumbers.length \u003c 2)"},{"operation":"ADD","number":52,"content":"                    removeSize \u003d 1;"},{"operation":"ADD","number":53,"content":"                else"},{"operation":"ADD","number":54,"content":"                    removeSize \u003d Integer.parseInt(removeNumbers[1]);"},{"operation":"ADD","number":55,"content":""},{"operation":"ADD","number":56,"content":"                int addStart \u003d Integer.parseInt(addNumbers[0]) - 1;"},{"operation":"ADD","number":57,"content":"                int addSize;"},{"operation":"ADD","number":58,"content":"                if (addNumbers.length \u003c 2)"},{"operation":"ADD","number":59,"content":"                    addSize \u003d 1;"},{"operation":"ADD","number":60,"content":"                else"},{"operation":"ADD","number":61,"content":"                    addSize \u003d Integer.parseInt(addNumbers[1]);"},{"operation":"ADD","number":62,"content":"                List\u003cString\u003e fileContent \u003d files.get(fileName);"},{"operation":"ADD","number":63,"content":"                if (fileContent.size() !\u003d 0) {"},{"operation":"ADD","number":64,"content":"                    for (int i \u003d removeStart; i \u003c removeStart + removeSize; i++) {"},{"operation":"ADD","number":65,"content":"                        fileContent.set(i, fileContent.get(i) + \" -(\" + lines.get(contentLineIndex + i - removeStart) + \") by \" + getAuthorName(commitDatas, change));"},{"operation":"ADD","number":66,"content":"//                        fileContent.remove(removeStart);"},{"operation":"ADD","number":67,"content":"                    }"},{"operation":"ADD","number":68,"content":"                }"},{"operation":"ADD","number":69,"content":"                for (int i \u003d addStart; i \u003c addStart + addSize; i++) {"},{"operation":"ADD","number":70,"content":"                    if (i \u003c fileContent.size())"},{"operation":"ADD","number":71,"content":"                        fileContent.add(i, lines.get(contentLineIndex + i - addStart) + \"         by \" + getAuthorName(commitDatas, change));"},{"operation":"ADD","number":72,"content":"                    else"},{"operation":"ADD","number":73,"content":"                        fileContent.add(lines.get(contentLineIndex + i - addStart) + \"          by \" + getAuthorName(commitDatas, change));"},{"operation":"ADD","number":74,"content":"                }"},{"operation":"ADD","number":75,"content":"            });"},{"operation":"ADD","number":76,"content":"        });"},{"operation":"ADD","number":77,"content":""},{"operation":"ADD","number":78,"content":"        files.entrySet().forEach(entry -\u003e entry.getValue().forEach(System.out::println));"},{"operation":"ADD","number":79,"content":""},{"operation":"ADD","number":80,"content":"    }"},{"operation":"ADD","number":81,"content":""},{"operation":"ADD","number":82,"content":"    private static String getAuthorName(List\u003cCommitData\u003e commitDatas, ChangeData change) {"},{"operation":"ADD","number":83,"content":"        return commitDatas.stream().filter(commit -\u003e commit.getId().equals(change.getCommitID())).findFirst().get().getAuthorName();"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/ChangeData.java","newFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.java","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data;"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/ChangesData.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import lombok.*;"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"import java.util.List;"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"@Data"},{"operation":"ADD","number":8,"content":"@Builder"},{"operation":"ADD","number":9,"content":"@EqualsAndHashCode"},{"operation":"ADD","number":10,"content":"@NoArgsConstructor"},{"operation":"ADD","number":11,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"ADD","number":12,"content":"public class ChangesData {"},{"operation":"ADD","number":13,"content":"    private String otherCommitId;"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    private List\u003cChangeData\u003e changes;"},{"operation":"ADD","number":16,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/CommitData.java","newFileName":"src/main/java/org/dxworks/gitsecond/data/CommitData.java","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data;"}]},{"lineChanges":[{"operation":"REMOVE","number":23,"content":"    private List\u003cChangeData\u003e changes;"},{"operation":"ADD","number":23,"content":"    private List\u003cChangesData\u003e changeSets;"},{"operation":"ADD","number":24,"content":""},{"operation":"ADD","number":25,"content":"    public boolean isMergeCommit() {"},{"operation":"ADD","number":26,"content":"        return parentIds !\u003d null \u0026\u0026 parentIds.size() \u003e\u003d 2;"},{"operation":"ADD","number":27,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Author.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"public class Author {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"public class Change {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"public class Commit {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"public class File {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Line.java","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"public class Line {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e6d7d2373d7c014cc63d69a6bee2d45b477236be","isBinary":false,"isBlame":false}]},{"id":"f455b1609576b1a05a6151118d5916fd9a8b6651","parentIds":["11957e99f8b0b5aeba15883d28df5a23b76d8556"],"authorName":"Mario Rivis","authorEmail":"mario.rivis@dialogdata.de","authorDate":"Aug 29, 2019, 5:20:13 PM","committerName":"Mario Rivis","committerEmail":"mario.rivis@dialogdata.de","committerDate":"Aug 29, 2019, 5:20:13 PM","message":"changed to katalin and made big improvements","changes":[{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    \u003cproperties\u003e"},{"operation":"ADD","number":12,"content":"        \u003ckotlin.version\u003e1.3.50\u003c/kotlin.version\u003e"},{"operation":"ADD","number":13,"content":"    \u003c/properties\u003e"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":""}]},{"lineChanges":[{"operation":"ADD","number":18,"content":"            \u003cplugin\u003e"},{"operation":"ADD","number":19,"content":"                \u003cgroupId\u003eorg.jetbrains.kotlin\u003c/groupId\u003e"},{"operation":"ADD","number":20,"content":"                \u003cartifactId\u003ekotlin-maven-plugin\u003c/artifactId\u003e"},{"operation":"ADD","number":21,"content":"                \u003cversion\u003e${kotlin.version}\u003c/version\u003e"},{"operation":"ADD","number":22,"content":"                \u003cexecutions\u003e"},{"operation":"ADD","number":23,"content":"                    \u003cexecution\u003e"},{"operation":"ADD","number":24,"content":"                        \u003cid\u003ecompile\u003c/id\u003e"},{"operation":"ADD","number":25,"content":"                        \u003cphase\u003ecompile\u003c/phase\u003e"},{"operation":"ADD","number":26,"content":"                        \u003cgoals\u003e"},{"operation":"ADD","number":27,"content":"                            \u003cgoal\u003ecompile\u003c/goal\u003e"},{"operation":"ADD","number":28,"content":"                        \u003c/goals\u003e"},{"operation":"ADD","number":29,"content":"                    \u003c/execution\u003e"},{"operation":"ADD","number":30,"content":"                    \u003cexecution\u003e"},{"operation":"ADD","number":31,"content":"                        \u003cid\u003etest-compile\u003c/id\u003e"},{"operation":"ADD","number":32,"content":"                        \u003cphase\u003etest-compile\u003c/phase\u003e"},{"operation":"ADD","number":33,"content":"                        \u003cgoals\u003e"},{"operation":"ADD","number":34,"content":"                            \u003cgoal\u003etest-compile\u003c/goal\u003e"},{"operation":"ADD","number":35,"content":"                        \u003c/goals\u003e"},{"operation":"ADD","number":36,"content":"                    \u003c/execution\u003e"},{"operation":"ADD","number":37,"content":"                \u003c/executions\u003e"},{"operation":"ADD","number":38,"content":"                \u003cconfiguration\u003e"},{"operation":"ADD","number":39,"content":"                    \u003cjvmTarget\u003e1.8\u003c/jvmTarget\u003e"},{"operation":"ADD","number":40,"content":"                \u003c/configuration\u003e"},{"operation":"ADD","number":41,"content":"            \u003c/plugin\u003e"}]},{"lineChanges":[{"operation":"ADD","number":45,"content":"                \u003cexecutions\u003e"},{"operation":"ADD","number":46,"content":"                    \u003cexecution\u003e"},{"operation":"ADD","number":47,"content":"                        \u003cid\u003ecompile\u003c/id\u003e"},{"operation":"ADD","number":48,"content":"                        \u003cphase\u003ecompile\u003c/phase\u003e"},{"operation":"ADD","number":49,"content":"                        \u003cgoals\u003e"},{"operation":"ADD","number":50,"content":"                            \u003cgoal\u003ecompile\u003c/goal\u003e"},{"operation":"ADD","number":51,"content":"                        \u003c/goals\u003e"},{"operation":"ADD","number":52,"content":"                    \u003c/execution\u003e"},{"operation":"ADD","number":53,"content":"                    \u003cexecution\u003e"},{"operation":"ADD","number":54,"content":"                        \u003cid\u003etestCompile\u003c/id\u003e"},{"operation":"ADD","number":55,"content":"                        \u003cphase\u003etest-compile\u003c/phase\u003e"},{"operation":"ADD","number":56,"content":"                        \u003cgoals\u003e"},{"operation":"ADD","number":57,"content":"                            \u003cgoal\u003etestCompile\u003c/goal\u003e"},{"operation":"ADD","number":58,"content":"                        \u003c/goals\u003e"},{"operation":"ADD","number":59,"content":"                    \u003c/execution\u003e"},{"operation":"ADD","number":60,"content":"                \u003c/executions\u003e"}]},{"lineChanges":[{"operation":"ADD","number":88,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":89,"content":"            \u003cgroupId\u003eorg.jetbrains.kotlin\u003c/groupId\u003e"},{"operation":"ADD","number":90,"content":"            \u003cartifactId\u003ekotlin-stdlib-jdk8\u003c/artifactId\u003e"},{"operation":"ADD","number":91,"content":"            \u003cversion\u003e${kotlin.version}\u003c/version\u003e"},{"operation":"ADD","number":92,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":93,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":94,"content":"            \u003cgroupId\u003eorg.jetbrains.kotlin\u003c/groupId\u003e"},{"operation":"ADD","number":95,"content":"            \u003cartifactId\u003ekotlin-test\u003c/artifactId\u003e"},{"operation":"ADD","number":96,"content":"            \u003cversion\u003e${kotlin.version}\u003c/version\u003e"},{"operation":"ADD","number":97,"content":"            \u003cscope\u003etest\u003c/scope\u003e"},{"operation":"ADD","number":98,"content":"        \u003c/dependency\u003e"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Constants.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import java.io.File;"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"public class Constants {"},{"operation":"REMOVE","number":6,"content":"    public static final String FOLDER_NAME \u003d \".gitsecond\";"},{"operation":"REMOVE","number":7,"content":"    public static final String APP_FOLDER_PATH \u003d System.getProperty(\"user.home\") + File.separator + FOLDER_NAME;"},{"operation":"REMOVE","number":8,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/Constants.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.io.File"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"private const val FOLDER_NAME \u003d \".gitsecond\""},{"operation":"ADD","number":6,"content":"val APP_FOLDER_PATH \u003d System.getProperty(\"user.home\") + File.separator + FOLDER_NAME"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/File.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import lombok.*;"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"@Data"},{"operation":"REMOVE","number":6,"content":"@Builder"},{"operation":"REMOVE","number":7,"content":"@EqualsAndHashCode"},{"operation":"REMOVE","number":8,"content":"@NoArgsConstructor"},{"operation":"REMOVE","number":9,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"REMOVE","number":10,"content":"@ToString"},{"operation":"REMOVE","number":11,"content":"public class File {"},{"operation":"REMOVE","number":12,"content":"    private String name;"},{"operation":"REMOVE","number":13,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData;"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.data.ChangesData;"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.data.CommitData;"},{"operation":"REMOVE","number":6,"content":"import org.eclipse.jgit.api.CloneCommand;"},{"operation":"REMOVE","number":7,"content":"import org.eclipse.jgit.api.Git;"},{"operation":"REMOVE","number":8,"content":"import org.eclipse.jgit.api.errors.GitAPIException;"},{"operation":"REMOVE","number":9,"content":"import org.eclipse.jgit.diff.DiffEntry;"},{"operation":"REMOVE","number":10,"content":"import org.eclipse.jgit.diff.DiffFormatter;"},{"operation":"REMOVE","number":11,"content":"import org.eclipse.jgit.diff.RawText;"},{"operation":"REMOVE","number":12,"content":"import org.eclipse.jgit.diff.RawTextComparator;"},{"operation":"REMOVE","number":13,"content":"import org.eclipse.jgit.lib.ObjectId;"},{"operation":"REMOVE","number":14,"content":"import org.eclipse.jgit.lib.ObjectLoader;"},{"operation":"REMOVE","number":15,"content":"import org.eclipse.jgit.lib.ObjectReader;"},{"operation":"REMOVE","number":16,"content":"import org.eclipse.jgit.lib.Repository;"},{"operation":"REMOVE","number":17,"content":"import org.eclipse.jgit.revwalk.RevCommit;"},{"operation":"REMOVE","number":18,"content":"import org.eclipse.jgit.revwalk.RevTree;"},{"operation":"REMOVE","number":19,"content":"import org.eclipse.jgit.revwalk.RevWalk;"},{"operation":"REMOVE","number":20,"content":"import org.eclipse.jgit.revwalk.filter.RevFilter;"},{"operation":"REMOVE","number":21,"content":"import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;"},{"operation":"REMOVE","number":22,"content":"import org.eclipse.jgit.treewalk.AbstractTreeIterator;"},{"operation":"REMOVE","number":23,"content":"import org.eclipse.jgit.treewalk.CanonicalTreeParser;"},{"operation":"REMOVE","number":24,"content":"import org.eclipse.jgit.treewalk.EmptyTreeIterator;"},{"operation":"REMOVE","number":25,"content":"import org.eclipse.jgit.treewalk.TreeWalk;"},{"operation":"REMOVE","number":26,"content":"import org.eclipse.jgit.treewalk.filter.PathFilter;"},{"operation":"REMOVE","number":27,"content":"import org.eclipse.jgit.util.io.DisabledOutputStream;"},{"operation":"REMOVE","number":28,"content":"import org.slf4j.Logger;"},{"operation":"REMOVE","number":29,"content":"import org.slf4j.LoggerFactory;"},{"operation":"REMOVE","number":30,"content":""},{"operation":"REMOVE","number":31,"content":"import java.io.ByteArrayOutputStream;"},{"operation":"REMOVE","number":32,"content":"import java.io.File;"},{"operation":"REMOVE","number":33,"content":"import java.io.FileNotFoundException;"},{"operation":"REMOVE","number":34,"content":"import java.io.IOException;"},{"operation":"REMOVE","number":35,"content":"import java.nio.file.Paths;"},{"operation":"REMOVE","number":36,"content":"import java.util.*;"},{"operation":"REMOVE","number":37,"content":"import java.util.stream.Collectors;"},{"operation":"REMOVE","number":38,"content":"import java.util.stream.StreamSupport;"},{"operation":"REMOVE","number":39,"content":""},{"operation":"REMOVE","number":40,"content":"public class GitClient {"},{"operation":"REMOVE","number":41,"content":""},{"operation":"REMOVE","number":42,"content":"    public static final String REPOS_PATH \u003d Constants.APP_FOLDER_PATH + File.separator + \"repos\";"},{"operation":"REMOVE","number":43,"content":"    private static final Logger log \u003d LoggerFactory.getLogger(GitClient.class);"},{"operation":"REMOVE","number":44,"content":"    private final String could_not_parse_changes_correctly \u003d \"Could not parse changes correctly\";"},{"operation":"REMOVE","number":45,"content":""},{"operation":"REMOVE","number":46,"content":"    public GitClient() {"},{"operation":"REMOVE","number":47,"content":"        initializeReposPath();"},{"operation":"REMOVE","number":48,"content":"    }"},{"operation":"REMOVE","number":49,"content":""},{"operation":"REMOVE","number":50,"content":""},{"operation":"REMOVE","number":51,"content":"    private void initializeReposPath() {"},{"operation":"REMOVE","number":52,"content":"        File repo_file_path \u003d new File(REPOS_PATH);"},{"operation":"REMOVE","number":53,"content":"        if (!repo_file_path.exists()) {"},{"operation":"REMOVE","number":54,"content":"            boolean didMakeDirs \u003d repo_file_path.mkdirs();"},{"operation":"REMOVE","number":55,"content":"            if (!didMakeDirs) {"},{"operation":"REMOVE","number":56,"content":"                log.error(\"Could not make directory \" + REPOS_PATH);"},{"operation":"REMOVE","number":57,"content":"            }"},{"operation":"REMOVE","number":58,"content":"        }"},{"operation":"REMOVE","number":59,"content":""},{"operation":"REMOVE","number":60,"content":"        log.info(\"Repos path set to \" + REPOS_PATH);"},{"operation":"REMOVE","number":61,"content":"    }"},{"operation":"REMOVE","number":62,"content":""},{"operation":"REMOVE","number":63,"content":"    private Git getRepositoryByProjectIdAndRepoName(String repoName) throws IOException {"},{"operation":"REMOVE","number":64,"content":"        return Git.open(Paths.get(REPOS_PATH + File.separator + repoName + File.separator + \".git\").toFile());"},{"operation":"REMOVE","number":65,"content":"    }"},{"operation":"REMOVE","number":66,"content":""},{"operation":"REMOVE","number":67,"content":"    public void checkoutRevisionForRepo(String revisionName, String repoName) {"},{"operation":"REMOVE","number":68,"content":"        try {"},{"operation":"REMOVE","number":69,"content":"            Git git \u003d this.getRepositoryByProjectIdAndRepoName(repoName);"},{"operation":"REMOVE","number":70,"content":"            git.checkout().setName(revisionName).call();"},{"operation":"REMOVE","number":71,"content":"        } catch (IOException ex) {"},{"operation":"REMOVE","number":72,"content":"            log.error(\"could not find repository for \" + repoName, ex);"},{"operation":"REMOVE","number":73,"content":"        } catch (GitAPIException ex) {"},{"operation":"REMOVE","number":74,"content":"            log.error(\"Error trying to checkout revision \" + revisionName + \" for student \" + repoName, ex);"},{"operation":"REMOVE","number":75,"content":"        }"},{"operation":"REMOVE","number":76,"content":""},{"operation":"REMOVE","number":77,"content":"    }"},{"operation":"REMOVE","number":78,"content":""},{"operation":"REMOVE","number":79,"content":"    public void cloneAndInitializeRepository(String repositoryURL, String repoName) throws GitAPIException {"},{"operation":"REMOVE","number":80,"content":""},{"operation":"REMOVE","number":81,"content":"        File studentFolder \u003d Paths.get(REPOS_PATH + File.separator + repoName).toFile();"},{"operation":"REMOVE","number":82,"content":"        if (studentFolder.exists() \u0026\u0026 studentFolder.isDirectory()) {"},{"operation":"REMOVE","number":83,"content":"            log.error(\"Student \" + repoName + \" already has a cloned repository\");"},{"operation":"REMOVE","number":84,"content":"            return;"},{"operation":"REMOVE","number":85,"content":"        } else {"},{"operation":"REMOVE","number":86,"content":"            boolean createdStudentDirectory \u003d studentFolder.mkdirs();"},{"operation":"REMOVE","number":87,"content":"            if (!createdStudentDirectory) {"},{"operation":"REMOVE","number":88,"content":"                log.error(\"Could not create directory for student \" + repoName);"},{"operation":"REMOVE","number":89,"content":"                return;"},{"operation":"REMOVE","number":90,"content":"            }"},{"operation":"REMOVE","number":91,"content":"        }"},{"operation":"REMOVE","number":92,"content":""},{"operation":"REMOVE","number":93,"content":"        CloneCommand cloneCommand \u003d Git.cloneRepository().setURI(repositoryURL).setDirectory(studentFolder).setCloneAllBranches(true).setBranch(\"master\").setCredentialsProvider(new UsernamePasswordCredentialsProvider(\"mario.rivis@gmail.com\", \"just6and9\"));"},{"operation":"REMOVE","number":94,"content":"        cloneCommand.call();"},{"operation":"REMOVE","number":95,"content":"    }"},{"operation":"REMOVE","number":96,"content":""},{"operation":"REMOVE","number":97,"content":"    public String getFileContentForRepoAndRevision(String filePath, String repoName, String revisionName) throws IOException {"},{"operation":"REMOVE","number":98,"content":"        Repository repository \u003d this.getRepositoryByProjectIdAndRepoName(repoName).getRepository();"},{"operation":"REMOVE","number":99,"content":"        ObjectId lastCommitId \u003d repository.resolve(revisionName);"},{"operation":"REMOVE","number":100,"content":"        RevWalk revWalk \u003d new RevWalk(repository);"},{"operation":"REMOVE","number":101,"content":"        RevCommit commit \u003d revWalk.parseCommit(lastCommitId);"},{"operation":"REMOVE","number":102,"content":"        RevTree tree \u003d commit.getTree();"},{"operation":"REMOVE","number":103,"content":"        TreeWalk treeWalk \u003d new TreeWalk(repository);"},{"operation":"REMOVE","number":104,"content":"        treeWalk.addTree(tree);"},{"operation":"REMOVE","number":105,"content":"        treeWalk.setRecursive(true);"},{"operation":"REMOVE","number":106,"content":"        treeWalk.setFilter(PathFilter.create(filePath));"},{"operation":"REMOVE","number":107,"content":"        if (!treeWalk.next()) {"},{"operation":"REMOVE","number":108,"content":"            System.out.println(\"File not found\");"},{"operation":"REMOVE","number":109,"content":"            throw new FileNotFoundException(filePath);"},{"operation":"REMOVE","number":110,"content":"        } else {"},{"operation":"REMOVE","number":111,"content":"            ObjectId objectId \u003d treeWalk.getObjectId(0);"},{"operation":"REMOVE","number":112,"content":"            ObjectLoader loader \u003d repository.open(objectId);"},{"operation":"REMOVE","number":113,"content":"            return new String(loader.getBytes());"},{"operation":"REMOVE","number":114,"content":"        }"},{"operation":"REMOVE","number":115,"content":"    }"},{"operation":"REMOVE","number":116,"content":""},{"operation":"REMOVE","number":117,"content":"    public List\u003cCommitData\u003e generateGitLogForDx(String repoName) {"},{"operation":"REMOVE","number":118,"content":"        try {"},{"operation":"REMOVE","number":119,"content":"            Git git \u003d this.getRepositoryByProjectIdAndRepoName(repoName);"},{"operation":"REMOVE","number":120,"content":"            Repository repository \u003d git.getRepository();"},{"operation":"REMOVE","number":121,"content":"            return StreamSupport.stream(git.log().setRevFilter(RevFilter.ALL).call().spliterator(), false)"},{"operation":"REMOVE","number":122,"content":"                    .map((revCommit) -\u003e this.getCommitDetails(repository, revCommit))"},{"operation":"REMOVE","number":123,"content":"                    .collect(Collectors.toList());"},{"operation":"REMOVE","number":124,"content":"        } catch (GitAPIException var4) {"},{"operation":"REMOVE","number":125,"content":"            log.error(\"Git Api error\", var4);"},{"operation":"REMOVE","number":126,"content":"        } catch (IOException var5) {"},{"operation":"REMOVE","number":127,"content":"            log.error(\"could not find repository \" + repoName, var5);"},{"operation":"REMOVE","number":128,"content":"        }"},{"operation":"REMOVE","number":129,"content":""},{"operation":"REMOVE","number":130,"content":"        return null;"},{"operation":"REMOVE","number":131,"content":"    }"},{"operation":"REMOVE","number":132,"content":""},{"operation":"REMOVE","number":133,"content":"    private CommitData getCommitDetails(Repository repository, RevCommit revCommit) {"},{"operation":"REMOVE","number":134,"content":"        return CommitData.builder()"},{"operation":"REMOVE","number":135,"content":"                .id(revCommit.getName())"},{"operation":"REMOVE","number":136,"content":"                .authorName(revCommit.getAuthorIdent().getName())"},{"operation":"REMOVE","number":137,"content":"                .authorEmail(revCommit.getAuthorIdent().getEmailAddress())"},{"operation":"REMOVE","number":138,"content":"                .date(new Date((long) revCommit.getCommitTime() * 1000L))"},{"operation":"REMOVE","number":139,"content":"                .message(revCommit.getFullMessage())"},{"operation":"REMOVE","number":140,"content":"                .changeSets(this.getCommitChanges(repository, revCommit))"},{"operation":"REMOVE","number":141,"content":"                .parentIds(Arrays.stream(revCommit.getParents()).map(RevCommit::getName).collect(Collectors.toList()))"},{"operation":"REMOVE","number":142,"content":"                .build();"},{"operation":"REMOVE","number":143,"content":"    }"},{"operation":"REMOVE","number":144,"content":""},{"operation":"REMOVE","number":145,"content":"    private List\u003cChangesData\u003e getCommitChanges(Repository repository, RevCommit revCommit) {"},{"operation":"REMOVE","number":146,"content":"        ObjectReader reader \u003d repository.newObjectReader();"},{"operation":"REMOVE","number":147,"content":"        CanonicalTreeParser currentCommitTreeIterator \u003d new CanonicalTreeParser();"},{"operation":"REMOVE","number":148,"content":""},{"operation":"REMOVE","number":149,"content":"        try {"},{"operation":"REMOVE","number":150,"content":"            currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"REMOVE","number":151,"content":""},{"operation":"REMOVE","number":152,"content":"            if (revCommit.getParentCount() \u003d\u003d 0) {"},{"operation":"REMOVE","number":153,"content":"                AbstractTreeIterator parentTreeIterator \u003d new EmptyTreeIterator();"},{"operation":"REMOVE","number":154,"content":"                List\u003cDiffEntry\u003e diffs \u003d getDiffsBetweenCommits(repository, parentTreeIterator, currentCommitTreeIterator);"},{"operation":"REMOVE","number":155,"content":"                List\u003cChangeData\u003e changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs, 0);"},{"operation":"REMOVE","number":156,"content":"                return Collections.singletonList(new ChangesData(null, changes));"},{"operation":"REMOVE","number":157,"content":"            } else {"},{"operation":"REMOVE","number":158,"content":"                List\u003cChangesData\u003e changesData \u003d Arrays.stream(revCommit.getParents())"},{"operation":"REMOVE","number":159,"content":"                        .map(parentCommit -\u003e getChangesData(repository, reader, currentCommitTreeIterator, revCommit, parentCommit, revCommit.getParentCount() \u003e\u003d 2 ? Integer.MAX_VALUE : 0))"},{"operation":"REMOVE","number":160,"content":"                        .filter(Objects::nonNull)"},{"operation":"REMOVE","number":161,"content":"                        .collect(Collectors.toList());"},{"operation":"REMOVE","number":162,"content":""},{"operation":"REMOVE","number":163,"content":"                if (changesData.size() !\u003d revCommit.getParentCount()) {"},{"operation":"REMOVE","number":164,"content":"                    log.warn(\"Not all merge commit parents have been correctly parsed!\");"},{"operation":"REMOVE","number":165,"content":"                }"},{"operation":"REMOVE","number":166,"content":"                return changesData;"},{"operation":"REMOVE","number":167,"content":"            }"},{"operation":"REMOVE","number":168,"content":""},{"operation":"REMOVE","number":169,"content":"        } catch (IOException e) {"},{"operation":"REMOVE","number":170,"content":"            log.error(could_not_parse_changes_correctly, e);"},{"operation":"REMOVE","number":171,"content":"            return Collections.emptyList();"},{"operation":"REMOVE","number":172,"content":"        }"},{"operation":"REMOVE","number":173,"content":"    }"},{"operation":"REMOVE","number":174,"content":""},{"operation":"REMOVE","number":175,"content":"    private ChangesData getChangesData(Repository repository, ObjectReader reader, CanonicalTreeParser currentCommitTreeIterator, RevCommit revCommit, RevCommit parentCommit, int contextLines) {"},{"operation":"REMOVE","number":176,"content":"        CanonicalTreeParser parentIterator \u003d new CanonicalTreeParser();"},{"operation":"REMOVE","number":177,"content":"        try {"},{"operation":"REMOVE","number":178,"content":"            parentIterator.reset(reader, parentCommit.getTree().getId());"},{"operation":"REMOVE","number":179,"content":"            List\u003cDiffEntry\u003e diffsBetweenCommits \u003d getDiffsBetweenCommits(repository, parentIterator, currentCommitTreeIterator);"},{"operation":"REMOVE","number":180,"content":"            List\u003cChangeData\u003e changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits, contextLines);"},{"operation":"REMOVE","number":181,"content":""},{"operation":"REMOVE","number":182,"content":"            if (changeDatas !\u003d null) {"},{"operation":"REMOVE","number":183,"content":"                return new ChangesData(parentCommit.getName(), changeDatas);"},{"operation":"REMOVE","number":184,"content":"            } else {"},{"operation":"REMOVE","number":185,"content":"                return null;"},{"operation":"REMOVE","number":186,"content":"            }"},{"operation":"REMOVE","number":187,"content":"        } catch (IOException e) {"},{"operation":"REMOVE","number":188,"content":"            log.error(could_not_parse_changes_correctly, e);"},{"operation":"REMOVE","number":189,"content":"            return null;"},{"operation":"REMOVE","number":190,"content":"        } finally {"},{"operation":"REMOVE","number":191,"content":"            try {"},{"operation":"REMOVE","number":192,"content":"                currentCommitTreeIterator.reset(reader, revCommit.getTree().getId());"},{"operation":"REMOVE","number":193,"content":"            } catch (IOException e) {"},{"operation":"REMOVE","number":194,"content":"                log.error(could_not_parse_changes_correctly, e);"},{"operation":"REMOVE","number":195,"content":"            }"},{"operation":"REMOVE","number":196,"content":"        }"},{"operation":"REMOVE","number":197,"content":"    }"},{"operation":"REMOVE","number":198,"content":""},{"operation":"REMOVE","number":199,"content":"    private List\u003cChangeData\u003e transformDiffsToChangeDatas(RevCommit revCommit, Repository repository, List\u003cDiffEntry\u003e diffs, int contextLines) {"},{"operation":"REMOVE","number":200,"content":"        return diffs.stream().map(diff -\u003e {"},{"operation":"REMOVE","number":201,"content":"            ChangeData changeData \u003d ChangeData.builder()"},{"operation":"REMOVE","number":202,"content":"                    .type(diff.getChangeType())"},{"operation":"REMOVE","number":203,"content":"                    .oldFileName(diff.getOldPath())"},{"operation":"REMOVE","number":204,"content":"                    .commitID(revCommit.getName())"},{"operation":"REMOVE","number":205,"content":"                    .newFileName(diff.getNewPath().equals(\"/dev/null\") ? diff.getOldPath() : diff.getNewPath())"},{"operation":"REMOVE","number":206,"content":"                    .build();"},{"operation":"REMOVE","number":207,"content":"            setNoOfLinesDeletedAndAdded(repository, diff, changeData, contextLines);"},{"operation":"REMOVE","number":208,"content":"            return changeData;"},{"operation":"REMOVE","number":209,"content":"        }).collect(Collectors.toList());"},{"operation":"REMOVE","number":210,"content":"    }"},{"operation":"REMOVE","number":211,"content":""},{"operation":"REMOVE","number":212,"content":"    private List\u003cDiffEntry\u003e getDiffsBetweenCommits(Repository repository, AbstractTreeIterator parentTreeIterator, AbstractTreeIterator currentCommitTreeIterator) throws IOException {"},{"operation":"REMOVE","number":213,"content":"        DiffFormatter df \u003d new DiffFormatter(DisabledOutputStream.INSTANCE);"},{"operation":"REMOVE","number":214,"content":"        df.setRepository(repository);"},{"operation":"REMOVE","number":215,"content":"        df.setDiffComparator(RawTextComparator.DEFAULT);"},{"operation":"REMOVE","number":216,"content":"        df.setDetectRenames(true);"},{"operation":"REMOVE","number":217,"content":"        return df.scan(parentTreeIterator, currentCommitTreeIterator);"},{"operation":"REMOVE","number":218,"content":"    }"},{"operation":"REMOVE","number":219,"content":""},{"operation":"REMOVE","number":220,"content":"    private void setNoOfLinesDeletedAndAdded(Repository repository, DiffEntry diff, ChangeData repoChangeBlock, int contextLines) {"},{"operation":"REMOVE","number":221,"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"operation":"REMOVE","number":222,"content":"        DiffFormatter df \u003d new DiffFormatter(out);"},{"operation":"REMOVE","number":223,"content":"        df.setRepository(repository);"},{"operation":"REMOVE","number":224,"content":""},{"operation":"REMOVE","number":225,"content":"        try {"},{"operation":"REMOVE","number":226,"content":"            df.setContext(contextLines);"},{"operation":"REMOVE","number":227,"content":"            df.setDetectRenames(true);"},{"operation":"REMOVE","number":228,"content":"            df.format(diff);"},{"operation":"REMOVE","number":229,"content":"            RawText r \u003d new RawText(out.toByteArray());"},{"operation":"REMOVE","number":230,"content":"            r.getLineDelimiter();"},{"operation":"REMOVE","number":231,"content":"            String modifications \u003d out.toString();"},{"operation":"REMOVE","number":232,"content":"            out.reset();"},{"operation":"REMOVE","number":233,"content":"            countAddedAndDeletedLines(modifications, repoChangeBlock);"},{"operation":"REMOVE","number":234,"content":"        } catch (IOException e) {"},{"operation":"REMOVE","number":235,"content":"            log.error(\"Diff between commits could not be parsed correctly!\", e);"},{"operation":"REMOVE","number":236,"content":"        }"},{"operation":"REMOVE","number":237,"content":""},{"operation":"REMOVE","number":238,"content":"    }"},{"operation":"REMOVE","number":239,"content":""},{"operation":"REMOVE","number":240,"content":"    private void countAddedAndDeletedLines(String modifications, ChangeData repoChangeBlock) {"},{"operation":"REMOVE","number":241,"content":"        int addedLines \u003d 0;"},{"operation":"REMOVE","number":242,"content":"        int deletedLines \u003d 0;"},{"operation":"REMOVE","number":243,"content":"        List\u003cString\u003e lines \u003d Arrays.asList(modifications.split(\"\\n\"));"},{"operation":"REMOVE","number":244,"content":"        lines \u003d this.trimList(lines);"},{"operation":"REMOVE","number":245,"content":""},{"operation":"REMOVE","number":246,"content":"        for (String line : lines) {"},{"operation":"REMOVE","number":247,"content":"            if (line.startsWith(\"+\")) {"},{"operation":"REMOVE","number":248,"content":"                ++addedLines;"},{"operation":"REMOVE","number":249,"content":"            }"},{"operation":"REMOVE","number":250,"content":""},{"operation":"REMOVE","number":251,"content":"            if (line.startsWith(\"-\")) {"},{"operation":"REMOVE","number":252,"content":"                ++deletedLines;"},{"operation":"REMOVE","number":253,"content":"            }"},{"operation":"REMOVE","number":254,"content":"        }"},{"operation":"REMOVE","number":255,"content":""},{"operation":"REMOVE","number":256,"content":"        repoChangeBlock.setDiff(modifications);"},{"operation":"REMOVE","number":257,"content":"        repoChangeBlock.setAddedLines(addedLines);"},{"operation":"REMOVE","number":258,"content":"        repoChangeBlock.setDeletedLines(deletedLines);"},{"operation":"REMOVE","number":259,"content":"    }"},{"operation":"REMOVE","number":260,"content":""},{"operation":"REMOVE","number":261,"content":"    private List\u003cString\u003e trimList(List\u003cString\u003e lines) {"},{"operation":"REMOVE","number":262,"content":"        for (int i \u003d 0; i \u003c lines.size(); ++i) {"},{"operation":"REMOVE","number":263,"content":"            if (lines.get(i).startsWith(\"@@\")) {"},{"operation":"REMOVE","number":264,"content":"                return lines.subList(i, lines.size());"},{"operation":"REMOVE","number":265,"content":"            }"},{"operation":"REMOVE","number":266,"content":"        }"},{"operation":"REMOVE","number":267,"content":""},{"operation":"REMOVE","number":268,"content":"        return Collections.emptyList();"},{"operation":"REMOVE","number":269,"content":"    }"},{"operation":"REMOVE","number":270,"content":""},{"operation":"REMOVE","number":271,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.data.ChangesData"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.data.CommitData"},{"operation":"ADD","number":6,"content":"import org.eclipse.jgit.api.Git"},{"operation":"ADD","number":7,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"ADD","number":8,"content":"import org.eclipse.jgit.diff.DiffEntry"},{"operation":"ADD","number":9,"content":"import org.eclipse.jgit.diff.DiffFormatter"},{"operation":"ADD","number":10,"content":"import org.eclipse.jgit.diff.RawTextComparator"},{"operation":"ADD","number":11,"content":"import org.eclipse.jgit.lib.ObjectReader"},{"operation":"ADD","number":12,"content":"import org.eclipse.jgit.lib.Repository"},{"operation":"ADD","number":13,"content":"import org.eclipse.jgit.revwalk.RevCommit"},{"operation":"ADD","number":14,"content":"import org.eclipse.jgit.revwalk.RevWalk"},{"operation":"ADD","number":15,"content":"import org.eclipse.jgit.revwalk.filter.RevFilter"},{"operation":"ADD","number":16,"content":"import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider"},{"operation":"ADD","number":17,"content":"import org.eclipse.jgit.treewalk.AbstractTreeIterator"},{"operation":"ADD","number":18,"content":"import org.eclipse.jgit.treewalk.CanonicalTreeParser"},{"operation":"ADD","number":19,"content":"import org.eclipse.jgit.treewalk.EmptyTreeIterator"},{"operation":"ADD","number":20,"content":"import org.eclipse.jgit.treewalk.TreeWalk"},{"operation":"ADD","number":21,"content":"import org.eclipse.jgit.treewalk.filter.PathFilter"},{"operation":"ADD","number":22,"content":"import org.eclipse.jgit.util.io.DisabledOutputStream"},{"operation":"ADD","number":23,"content":"import org.slf4j.LoggerFactory"},{"operation":"ADD","number":24,"content":"import java.io.ByteArrayOutputStream"},{"operation":"ADD","number":25,"content":"import java.io.File"},{"operation":"ADD","number":26,"content":"import java.io.FileNotFoundException"},{"operation":"ADD","number":27,"content":"import java.io.IOException"},{"operation":"ADD","number":28,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":29,"content":"import java.util.*"},{"operation":"ADD","number":30,"content":""},{"operation":"ADD","number":31,"content":"class GitClient {"},{"operation":"ADD","number":32,"content":"    private val could_not_parse_changes_correctly \u003d \"Could not parse changes correctly\""},{"operation":"ADD","number":33,"content":""},{"operation":"ADD","number":34,"content":"    init {"},{"operation":"ADD","number":35,"content":"        initializeReposPath()"},{"operation":"ADD","number":36,"content":"    }"},{"operation":"ADD","number":37,"content":""},{"operation":"ADD","number":38,"content":""},{"operation":"ADD","number":39,"content":"    private fun initializeReposPath() {"},{"operation":"ADD","number":40,"content":"        val repoFilePath \u003d File(REPOS_PATH)"},{"operation":"ADD","number":41,"content":"        if (!repoFilePath.exists()) {"},{"operation":"ADD","number":42,"content":"            val didMakeDirs \u003d repoFilePath.mkdirs()"},{"operation":"ADD","number":43,"content":"            if (!didMakeDirs) {"},{"operation":"ADD","number":44,"content":"                log.error(\"Could not make directory $REPOS_PATH\")"},{"operation":"ADD","number":45,"content":"            }"},{"operation":"ADD","number":46,"content":"        }"},{"operation":"ADD","number":47,"content":""},{"operation":"ADD","number":48,"content":"        log.info(\"Repos path set to $REPOS_PATH\")"},{"operation":"ADD","number":49,"content":"    }"},{"operation":"ADD","number":50,"content":""},{"operation":"ADD","number":51,"content":"    @Throws(IOException::class)"},{"operation":"ADD","number":52,"content":"    private fun getRepositoryByProjectIdAndRepoName(repoName: String): Git {"},{"operation":"ADD","number":53,"content":"        return Git.open(Paths.get(REPOS_PATH + File.separator + repoName + File.separator + \".git\").toFile())"},{"operation":"ADD","number":54,"content":"    }"},{"operation":"ADD","number":55,"content":""},{"operation":"ADD","number":56,"content":"    fun checkoutRevisionForRepo(revisionName: String, repoName: String) {"},{"operation":"ADD","number":57,"content":"        try {"},{"operation":"ADD","number":58,"content":"            val git \u003d this.getRepositoryByProjectIdAndRepoName(repoName)"},{"operation":"ADD","number":59,"content":"            git.checkout().setName(revisionName).call()"},{"operation":"ADD","number":60,"content":"        } catch (ex: IOException) {"},{"operation":"ADD","number":61,"content":"            log.error(\"could not find repository for $repoName\", ex)"},{"operation":"ADD","number":62,"content":"        } catch (ex: GitAPIException) {"},{"operation":"ADD","number":63,"content":"            log.error(\"Error trying to checkout revision $revisionName for student $repoName\", ex)"},{"operation":"ADD","number":64,"content":"        }"},{"operation":"ADD","number":65,"content":""},{"operation":"ADD","number":66,"content":"    }"},{"operation":"ADD","number":67,"content":""},{"operation":"ADD","number":68,"content":"    @Throws(GitAPIException::class)"},{"operation":"ADD","number":69,"content":"    fun cloneAndInitializeRepository(repositoryURL: String, repoName: String) {"},{"operation":"ADD","number":70,"content":""},{"operation":"ADD","number":71,"content":"        val studentFolder \u003d Paths.get(REPOS_PATH + File.separator + repoName).toFile()"},{"operation":"ADD","number":72,"content":"        if (studentFolder.exists() \u0026\u0026 studentFolder.isDirectory) {"},{"operation":"ADD","number":73,"content":"            log.error(\"Student $repoName already has a cloned repository\")"},{"operation":"ADD","number":74,"content":"            return"},{"operation":"ADD","number":75,"content":"        } else {"},{"operation":"ADD","number":76,"content":"            val createdStudentDirectory \u003d studentFolder.mkdirs()"},{"operation":"ADD","number":77,"content":"            if (!createdStudentDirectory) {"},{"operation":"ADD","number":78,"content":"                log.error(\"Could not create directory for student $repoName\")"},{"operation":"ADD","number":79,"content":"                return"},{"operation":"ADD","number":80,"content":"            }"},{"operation":"ADD","number":81,"content":"        }"},{"operation":"ADD","number":82,"content":""},{"operation":"ADD","number":83,"content":"        val cloneCommand \u003d Git.cloneRepository().setURI(repositoryURL).setDirectory(studentFolder).setCloneAllBranches(true).setBranch(\"master\").setCredentialsProvider(UsernamePasswordCredentialsProvider(\"mario.rivis@gmail.com\", \"just6and9\"))"},{"operation":"ADD","number":84,"content":"        cloneCommand.call()"},{"operation":"ADD","number":85,"content":"    }"},{"operation":"ADD","number":86,"content":""},{"operation":"ADD","number":87,"content":"    @Throws(IOException::class)"},{"operation":"ADD","number":88,"content":"    fun getFileContentForRepoAndRevision(filePath: String, repoName: String, revisionName: String): String {"},{"operation":"ADD","number":89,"content":"        val repository \u003d this.getRepositoryByProjectIdAndRepoName(repoName).repository"},{"operation":"ADD","number":90,"content":"        val lastCommitId \u003d repository.resolve(revisionName)"},{"operation":"ADD","number":91,"content":"        val revWalk \u003d RevWalk(repository)"},{"operation":"ADD","number":92,"content":"        val commit \u003d revWalk.parseCommit(lastCommitId)"},{"operation":"ADD","number":93,"content":"        val tree \u003d commit.tree"},{"operation":"ADD","number":94,"content":"        val treeWalk \u003d TreeWalk(repository)"},{"operation":"ADD","number":95,"content":"        treeWalk.addTree(tree)"},{"operation":"ADD","number":96,"content":"        treeWalk.isRecursive \u003d true"},{"operation":"ADD","number":97,"content":"        treeWalk.filter \u003d PathFilter.create(filePath)"},{"operation":"ADD","number":98,"content":"        if (!treeWalk.next()) {"},{"operation":"ADD","number":99,"content":"            println(\"File not found\")"},{"operation":"ADD","number":100,"content":"            throw FileNotFoundException(filePath)"},{"operation":"ADD","number":101,"content":"        } else {"},{"operation":"ADD","number":102,"content":"            val objectId \u003d treeWalk.getObjectId(0)"},{"operation":"ADD","number":103,"content":"            val loader \u003d repository.open(objectId)"},{"operation":"ADD","number":104,"content":"            return String(loader.bytes)"},{"operation":"ADD","number":105,"content":"        }"},{"operation":"ADD","number":106,"content":"    }"},{"operation":"ADD","number":107,"content":""},{"operation":"ADD","number":108,"content":"    fun generateGitLogForDx(repoName: String): List\u003cCommitData\u003e {"},{"operation":"ADD","number":109,"content":"        try {"},{"operation":"ADD","number":110,"content":"            val git \u003d this.getRepositoryByProjectIdAndRepoName(repoName)"},{"operation":"ADD","number":111,"content":"            val repository \u003d git.repository"},{"operation":"ADD","number":112,"content":""},{"operation":"ADD","number":113,"content":"            return git.log().setRevFilter(RevFilter.ALL).call()"},{"operation":"ADD","number":114,"content":"                    .map { getCommitDetails(repository, it) }"},{"operation":"ADD","number":115,"content":"        } catch (var4: GitAPIException) {"},{"operation":"ADD","number":116,"content":"            log.error(\"Git Api error\", var4)"},{"operation":"ADD","number":117,"content":"        } catch (var5: IOException) {"},{"operation":"ADD","number":118,"content":"            log.error(\"could not find repository $repoName\", var5)"},{"operation":"ADD","number":119,"content":"        }"},{"operation":"ADD","number":120,"content":""},{"operation":"ADD","number":121,"content":"        return emptyList()"},{"operation":"ADD","number":122,"content":"    }"},{"operation":"ADD","number":123,"content":""},{"operation":"ADD","number":124,"content":"    private fun getCommitDetails(repository: Repository, revCommit: RevCommit): CommitData {"},{"operation":"ADD","number":125,"content":"        return CommitData(id \u003d revCommit.name,"},{"operation":"ADD","number":126,"content":"                authorName \u003d revCommit.authorIdent.name,"},{"operation":"ADD","number":127,"content":"                authorEmail \u003d revCommit.authorIdent.emailAddress,"},{"operation":"ADD","number":128,"content":"                date \u003d Date(revCommit.commitTime.toLong() * 1000L),"},{"operation":"ADD","number":129,"content":"                message \u003d revCommit.fullMessage,"},{"operation":"ADD","number":130,"content":"                changeSets \u003d getCommitChanges(repository, revCommit),"},{"operation":"ADD","number":131,"content":"                parentIds \u003d revCommit.parents.map { it.name })"},{"operation":"ADD","number":132,"content":"    }"},{"operation":"ADD","number":133,"content":""},{"operation":"ADD","number":134,"content":"    private fun getCommitChanges(repository: Repository, revCommit: RevCommit): List\u003cChangesData\u003e {"},{"operation":"ADD","number":135,"content":"        val reader \u003d repository.newObjectReader()"},{"operation":"ADD","number":136,"content":"        val currentCommitTreeIterator \u003d CanonicalTreeParser()"},{"operation":"ADD","number":137,"content":""},{"operation":"ADD","number":138,"content":"        try {"},{"operation":"ADD","number":139,"content":"            currentCommitTreeIterator.reset(reader, revCommit.tree.id)"},{"operation":"ADD","number":140,"content":""},{"operation":"ADD","number":141,"content":"            if (revCommit.parentCount \u003d\u003d 0) {"},{"operation":"ADD","number":142,"content":"                val parentTreeIterator \u003d EmptyTreeIterator()"},{"operation":"ADD","number":143,"content":"                val diffs \u003d getDiffsBetweenCommits(repository, parentTreeIterator, currentCommitTreeIterator)"},{"operation":"ADD","number":144,"content":"                val changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs, 0)"},{"operation":"ADD","number":145,"content":"                return listOf(ChangesData(null, changes))"},{"operation":"ADD","number":146,"content":"            } else {"},{"operation":"ADD","number":147,"content":"                val changesData \u003d revCommit.parents"},{"operation":"ADD","number":148,"content":"                        .map { getChangesData(repository, reader, currentCommitTreeIterator, revCommit, it, if (revCommit.parentCount \u003e\u003d 2) Integer.MAX_VALUE else 0) }"},{"operation":"ADD","number":149,"content":"                        .filter { Objects.nonNull(it) }"},{"operation":"ADD","number":150,"content":""},{"operation":"ADD","number":151,"content":"                if (changesData.size !\u003d revCommit.parentCount) {"},{"operation":"ADD","number":152,"content":"                    log.warn(\"Not all merge commit parents have been correctly parsed!\")"},{"operation":"ADD","number":153,"content":"                }"},{"operation":"ADD","number":154,"content":"                return changesData as List\u003cChangesData\u003e"},{"operation":"ADD","number":155,"content":"            }"},{"operation":"ADD","number":156,"content":""},{"operation":"ADD","number":157,"content":"        } catch (e: IOException) {"},{"operation":"ADD","number":158,"content":"            log.error(could_not_parse_changes_correctly, e)"},{"operation":"ADD","number":159,"content":"            return emptyList()"},{"operation":"ADD","number":160,"content":"        }"},{"operation":"ADD","number":161,"content":""},{"operation":"ADD","number":162,"content":"    }"},{"operation":"ADD","number":163,"content":""},{"operation":"ADD","number":164,"content":"    private fun getChangesData(repository: Repository, reader: ObjectReader, currentCommitTreeIterator: CanonicalTreeParser, revCommit: RevCommit, parentCommit: RevCommit, contextLines: Int): ChangesData? {"},{"operation":"ADD","number":165,"content":"        val parentIterator \u003d CanonicalTreeParser()"},{"operation":"ADD","number":166,"content":"        try {"},{"operation":"ADD","number":167,"content":"            parentIterator.reset(reader, parentCommit.tree.id)"},{"operation":"ADD","number":168,"content":"            val diffsBetweenCommits \u003d getDiffsBetweenCommits(repository, parentIterator, currentCommitTreeIterator)"},{"operation":"ADD","number":169,"content":"            val changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits, contextLines)"},{"operation":"ADD","number":170,"content":""},{"operation":"ADD","number":171,"content":"            return ChangesData(parentCommit.name, changeDatas)"},{"operation":"ADD","number":172,"content":"        } catch (e: IOException) {"},{"operation":"ADD","number":173,"content":"            log.error(could_not_parse_changes_correctly, e)"},{"operation":"ADD","number":174,"content":"            return null"},{"operation":"ADD","number":175,"content":"        } finally {"},{"operation":"ADD","number":176,"content":"            try {"},{"operation":"ADD","number":177,"content":"                currentCommitTreeIterator.reset(reader, revCommit.tree.id)"},{"operation":"ADD","number":178,"content":"            } catch (e: IOException) {"},{"operation":"ADD","number":179,"content":"                log.error(could_not_parse_changes_correctly, e)"},{"operation":"ADD","number":180,"content":"            }"},{"operation":"ADD","number":181,"content":""},{"operation":"ADD","number":182,"content":"        }"},{"operation":"ADD","number":183,"content":"    }"},{"operation":"ADD","number":184,"content":""},{"operation":"ADD","number":185,"content":"    private fun transformDiffsToChangeDatas(revCommit: RevCommit, repository: Repository, diffs: List\u003cDiffEntry\u003e, contextLines: Int): List\u003cChangeData\u003e {"},{"operation":"ADD","number":186,"content":"        return diffs.map {"},{"operation":"ADD","number":187,"content":"            val changeData \u003d ChangeData(type \u003d it.changeType,"},{"operation":"ADD","number":188,"content":"                    oldFileName \u003d it.oldPath,"},{"operation":"ADD","number":189,"content":"                    newFileName \u003d it.newPath,"},{"operation":"ADD","number":190,"content":"                    commitID \u003d revCommit.name)"},{"operation":"ADD","number":191,"content":"            setNoOfLinesDeletedAndAdded(repository, it, changeData, contextLines)"},{"operation":"ADD","number":192,"content":"            changeData"},{"operation":"ADD","number":193,"content":"        }"},{"operation":"ADD","number":194,"content":"    }"},{"operation":"ADD","number":195,"content":""},{"operation":"ADD","number":196,"content":"    @Throws(IOException::class)"},{"operation":"ADD","number":197,"content":"    private fun getDiffsBetweenCommits(repository: Repository, parentTreeIterator: AbstractTreeIterator, currentCommitTreeIterator: AbstractTreeIterator): List\u003cDiffEntry\u003e {"},{"operation":"ADD","number":198,"content":"        val df \u003d DiffFormatter(DisabledOutputStream.INSTANCE)"},{"operation":"ADD","number":199,"content":"        df.setRepository(repository)"},{"operation":"ADD","number":200,"content":"        df.setDiffComparator(RawTextComparator.DEFAULT)"},{"operation":"ADD","number":201,"content":"        df.isDetectRenames \u003d true"},{"operation":"ADD","number":202,"content":"        return df.scan(parentTreeIterator, currentCommitTreeIterator)"},{"operation":"ADD","number":203,"content":"    }"},{"operation":"ADD","number":204,"content":""},{"operation":"ADD","number":205,"content":"    private fun setNoOfLinesDeletedAndAdded(repository: Repository, diff: DiffEntry, repoChangeBlock: ChangeData, contextLines: Int) {"},{"operation":"ADD","number":206,"content":"        val out \u003d ByteArrayOutputStream()"},{"operation":"ADD","number":207,"content":"        val df \u003d DiffFormatter(out)"},{"operation":"ADD","number":208,"content":"        df.setRepository(repository)"},{"operation":"ADD","number":209,"content":""},{"operation":"ADD","number":210,"content":"        try {"},{"operation":"ADD","number":211,"content":"            df.setContext(contextLines)"},{"operation":"ADD","number":212,"content":"            df.isDetectRenames \u003d true"},{"operation":"ADD","number":213,"content":"            df.format(diff)"},{"operation":"ADD","number":214,"content":"            val modifications \u003d out.toString()"},{"operation":"ADD","number":215,"content":"            out.reset()"},{"operation":"ADD","number":216,"content":"            countAddedAndDeletedLines(modifications, repoChangeBlock)"},{"operation":"ADD","number":217,"content":"        } catch (e: IOException) {"},{"operation":"ADD","number":218,"content":"            log.error(\"DiffParser between commits could not be parsed correctly!\", e)"},{"operation":"ADD","number":219,"content":"        }"},{"operation":"ADD","number":220,"content":""},{"operation":"ADD","number":221,"content":"    }"},{"operation":"ADD","number":222,"content":""},{"operation":"ADD","number":223,"content":"    private fun countAddedAndDeletedLines(modifications: String, repoChangeBlock: ChangeData) {"},{"operation":"ADD","number":224,"content":"        var addedLines \u003d 0"},{"operation":"ADD","number":225,"content":"        var deletedLines \u003d 0"},{"operation":"ADD","number":226,"content":"        var lines \u003d Arrays.asList(*modifications.split(\"\\n\".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())"},{"operation":"ADD","number":227,"content":"        lines \u003d this.trimList(lines)"},{"operation":"ADD","number":228,"content":""},{"operation":"ADD","number":229,"content":"        for (line in lines) {"},{"operation":"ADD","number":230,"content":"            if (line.startsWith(\"+\")) {"},{"operation":"ADD","number":231,"content":"                ++addedLines"},{"operation":"ADD","number":232,"content":"            }"},{"operation":"ADD","number":233,"content":""},{"operation":"ADD","number":234,"content":"            if (line.startsWith(\"-\")) {"},{"operation":"ADD","number":235,"content":"                ++deletedLines"},{"operation":"ADD","number":236,"content":"            }"},{"operation":"ADD","number":237,"content":"        }"},{"operation":"ADD","number":238,"content":""},{"operation":"ADD","number":239,"content":"        repoChangeBlock.diff \u003d modifications"},{"operation":"ADD","number":240,"content":"        repoChangeBlock.addedLines \u003d addedLines"},{"operation":"ADD","number":241,"content":"        repoChangeBlock.deletedLines \u003d deletedLines"},{"operation":"ADD","number":242,"content":"    }"},{"operation":"ADD","number":243,"content":""},{"operation":"ADD","number":244,"content":"    private fun trimList(lines: List\u003cString\u003e): List\u003cString\u003e {"},{"operation":"ADD","number":245,"content":"        for (i in lines.indices) {"},{"operation":"ADD","number":246,"content":"            if (lines[i].startsWith(\"@@\")) {"},{"operation":"ADD","number":247,"content":"                return lines.subList(i, lines.size)"},{"operation":"ADD","number":248,"content":"            }"},{"operation":"ADD","number":249,"content":"        }"},{"operation":"ADD","number":250,"content":""},{"operation":"ADD","number":251,"content":"        return emptyList()"},{"operation":"ADD","number":252,"content":"    }"},{"operation":"ADD","number":253,"content":""},{"operation":"ADD","number":254,"content":"    companion object {"},{"operation":"ADD","number":255,"content":""},{"operation":"ADD","number":256,"content":"        val REPOS_PATH \u003d APP_FOLDER_PATH + File.separator + \"repos\""},{"operation":"ADD","number":257,"content":"        private val log \u003d LoggerFactory.getLogger(GitClient::class.java)"},{"operation":"ADD","number":258,"content":"    }"},{"operation":"ADD","number":259,"content":""},{"operation":"ADD","number":260,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData;"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.data.CommitData;"},{"operation":"REMOVE","number":5,"content":"import org.eclipse.jgit.api.errors.GitAPIException;"},{"operation":"REMOVE","number":6,"content":""},{"operation":"REMOVE","number":7,"content":"import java.util.*;"},{"operation":"REMOVE","number":8,"content":"import java.util.stream.Collectors;"},{"operation":"REMOVE","number":9,"content":""},{"operation":"REMOVE","number":10,"content":"public class Main {"},{"operation":"REMOVE","number":11,"content":""},{"operation":"REMOVE","number":12,"content":"    public static final String REPO_NAME \u003d \"gitTest\";"},{"operation":"REMOVE","number":13,"content":""},{"operation":"REMOVE","number":14,"content":"    public static void main(String[] args) {"},{"operation":"REMOVE","number":15,"content":"        GitClient gitClient \u003d new GitClient();"},{"operation":"REMOVE","number":16,"content":""},{"operation":"REMOVE","number":17,"content":"        try {"},{"operation":"REMOVE","number":18,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME);"},{"operation":"REMOVE","number":19,"content":""},{"operation":"REMOVE","number":20,"content":"        } catch (GitAPIException e) {"},{"operation":"REMOVE","number":21,"content":"            e.printStackTrace();"},{"operation":"REMOVE","number":22,"content":"        }"},{"operation":"REMOVE","number":23,"content":"        List\u003cCommitData\u003e commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME);"},{"operation":"REMOVE","number":24,"content":"        List\u003cCommitData\u003e myCommits \u003d new ArrayList\u003c\u003e();"},{"operation":"REMOVE","number":25,"content":""},{"operation":"REMOVE","number":26,"content":"        System.out.println(commitDatas);"},{"operation":"REMOVE","number":27,"content":""},{"operation":"REMOVE","number":28,"content":"        final Map\u003cString, List\u003cString\u003e\u003e files \u003d new HashMap\u003c\u003e();"},{"operation":"REMOVE","number":29,"content":""},{"operation":"REMOVE","number":30,"content":"        List\u003cChangeData\u003e changes \u003d commitDatas.stream()"},{"operation":"REMOVE","number":31,"content":"                .filter(commitData -\u003e !commitData.isMergeCommit())"},{"operation":"REMOVE","number":32,"content":"                .flatMap(commitData -\u003e commitData.getChangeSets().stream())"},{"operation":"REMOVE","number":33,"content":"                .flatMap(changeSet -\u003e changeSet.getChanges().stream())"},{"operation":"REMOVE","number":34,"content":"                .collect(Collectors.toList());"},{"operation":"REMOVE","number":35,"content":"        Collections.reverse(changes);"},{"operation":"REMOVE","number":36,"content":""},{"operation":"REMOVE","number":37,"content":"        changes.forEach(change -\u003e {"},{"operation":"REMOVE","number":38,"content":"            String fileName \u003d change.getNewFileName();"},{"operation":"REMOVE","number":39,"content":"            files.computeIfAbsent(fileName, k -\u003e new ArrayList\u003c\u003e());"},{"operation":"REMOVE","number":40,"content":"            List\u003cString\u003e lines \u003d Arrays.asList(change.getDiff().split(\"\\n\"));"},{"operation":"REMOVE","number":41,"content":"            lines.stream().filter(line -\u003e line.startsWith(\"@@\")).forEach(line -\u003e {"},{"operation":"REMOVE","number":42,"content":"                int contentLineIndex \u003d lines.indexOf(line) + 1;"},{"operation":"REMOVE","number":43,"content":"                line \u003d line.replaceAll(\"@\", \"\").trim();"},{"operation":"REMOVE","number":44,"content":"                String[] info \u003d line.split(\" \");"},{"operation":"REMOVE","number":45,"content":"                String removeInfo \u003d info[0].substring(1);"},{"operation":"REMOVE","number":46,"content":"                String addInfo \u003d info[1].substring(1);"},{"operation":"REMOVE","number":47,"content":"                String[] removeNumbers \u003d removeInfo.split(\",\");"},{"operation":"REMOVE","number":48,"content":"                String[] addNumbers \u003d addInfo.split(\",\");"},{"operation":"REMOVE","number":49,"content":"                int removeStart \u003d Integer.parseInt(removeNumbers[0]) - 1;"},{"operation":"REMOVE","number":50,"content":"                int removeSize;"},{"operation":"REMOVE","number":51,"content":"                if (removeNumbers.length \u003c 2)"},{"operation":"REMOVE","number":52,"content":"                    removeSize \u003d 1;"},{"operation":"REMOVE","number":53,"content":"                else"},{"operation":"REMOVE","number":54,"content":"                    removeSize \u003d Integer.parseInt(removeNumbers[1]);"},{"operation":"REMOVE","number":55,"content":""},{"operation":"REMOVE","number":56,"content":"                int addStart \u003d Integer.parseInt(addNumbers[0]) - 1;"},{"operation":"REMOVE","number":57,"content":"                int addSize;"},{"operation":"REMOVE","number":58,"content":"                if (addNumbers.length \u003c 2)"},{"operation":"REMOVE","number":59,"content":"                    addSize \u003d 1;"},{"operation":"REMOVE","number":60,"content":"                else"},{"operation":"REMOVE","number":61,"content":"                    addSize \u003d Integer.parseInt(addNumbers[1]);"},{"operation":"REMOVE","number":62,"content":"                List\u003cString\u003e fileContent \u003d files.get(fileName);"},{"operation":"REMOVE","number":63,"content":"                if (fileContent.size() !\u003d 0) {"},{"operation":"REMOVE","number":64,"content":"                    for (int i \u003d removeStart; i \u003c removeStart + removeSize; i++) {"},{"operation":"REMOVE","number":65,"content":"                        fileContent.set(i, fileContent.get(i) + \" -(\" + lines.get(contentLineIndex + i - removeStart) + \") by \" + getAuthorName(commitDatas, change));"},{"operation":"REMOVE","number":66,"content":"//                        fileContent.remove(removeStart);"},{"operation":"REMOVE","number":67,"content":"                    }"},{"operation":"REMOVE","number":68,"content":"                }"},{"operation":"REMOVE","number":69,"content":"                for (int i \u003d addStart; i \u003c addStart + addSize; i++) {"},{"operation":"REMOVE","number":70,"content":"                    if (i \u003c fileContent.size())"},{"operation":"REMOVE","number":71,"content":"                        fileContent.add(i, lines.get(contentLineIndex + i - addStart) + \"         by \" + getAuthorName(commitDatas, change));"},{"operation":"REMOVE","number":72,"content":"                    else"},{"operation":"REMOVE","number":73,"content":"                        fileContent.add(lines.get(contentLineIndex + i - addStart) + \"          by \" + getAuthorName(commitDatas, change));"},{"operation":"REMOVE","number":74,"content":"                }"},{"operation":"REMOVE","number":75,"content":"            });"},{"operation":"REMOVE","number":76,"content":"        });"},{"operation":"REMOVE","number":77,"content":""},{"operation":"REMOVE","number":78,"content":"        files.entrySet().forEach(entry -\u003e entry.getValue().forEach(System.out::println));"},{"operation":"REMOVE","number":79,"content":""},{"operation":"REMOVE","number":80,"content":"    }"},{"operation":"REMOVE","number":81,"content":""},{"operation":"REMOVE","number":82,"content":"    private static String getAuthorName(List\u003cCommitData\u003e commitDatas, ChangeData change) {"},{"operation":"REMOVE","number":83,"content":"        return commitDatas.stream().filter(commit -\u003e commit.getId().equals(change.getCommitID())).findFirst().get().getAuthorName();"},{"operation":"REMOVE","number":84,"content":"    }"},{"operation":"REMOVE","number":85,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"ADD","number":4,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"private const val REPO_NAME \u003d \"gitTest\""},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"fun main(args: Array\u003cString\u003e) {"},{"operation":"ADD","number":9,"content":"    val gitClient \u003d GitClient()"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    try {"},{"operation":"ADD","number":12,"content":"        gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME)"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"    } catch (e: GitAPIException) {"},{"operation":"ADD","number":15,"content":"        e.printStackTrace()"},{"operation":"ADD","number":16,"content":"    }"},{"operation":"ADD","number":17,"content":""},{"operation":"ADD","number":18,"content":"    val commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME).reversed()"},{"operation":"ADD","number":19,"content":"    println(commitDatas)"},{"operation":"ADD","number":20,"content":""},{"operation":"ADD","number":21,"content":"    val project \u003d createProject(commitDatas, REPO_NAME)"},{"operation":"ADD","number":22,"content":"    println(project)"},{"operation":"ADD","number":23,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import lombok.*;"},{"operation":"REMOVE","number":4,"content":"import org.eclipse.jgit.diff.DiffEntry;"},{"operation":"REMOVE","number":5,"content":""},{"operation":"REMOVE","number":6,"content":"@Data"},{"operation":"REMOVE","number":7,"content":"@Builder"},{"operation":"REMOVE","number":8,"content":"@EqualsAndHashCode"},{"operation":"REMOVE","number":9,"content":"@NoArgsConstructor"},{"operation":"REMOVE","number":10,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"REMOVE","number":11,"content":"public class ChangeData {"},{"operation":"REMOVE","number":12,"content":""},{"operation":"REMOVE","number":13,"content":"    private String commitID;"},{"operation":"REMOVE","number":14,"content":"    private String oldFileName;"},{"operation":"REMOVE","number":15,"content":"    private String newFileName;"},{"operation":"REMOVE","number":16,"content":"    private DiffEntry.ChangeType type;"},{"operation":"REMOVE","number":17,"content":"    private String diff;"},{"operation":"REMOVE","number":18,"content":""},{"operation":"REMOVE","number":19,"content":"    private int addedLines;"},{"operation":"REMOVE","number":20,"content":"    private int deletedLines;"},{"operation":"REMOVE","number":21,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.eclipse.jgit.diff.DiffEntry"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"data class ChangeData(var commitID: String, var oldFileName: String, var newFileName: String, var type: DiffEntry.ChangeType, var diff: String \u003d \"\", var addedLines: Int \u003d 0, var deletedLines: Int \u003d 0) {"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/ChangesData.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import lombok.*;"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"import java.util.List;"},{"operation":"REMOVE","number":6,"content":""},{"operation":"REMOVE","number":7,"content":"@Data"},{"operation":"REMOVE","number":8,"content":"@Builder"},{"operation":"REMOVE","number":9,"content":"@EqualsAndHashCode"},{"operation":"REMOVE","number":10,"content":"@NoArgsConstructor"},{"operation":"REMOVE","number":11,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"REMOVE","number":12,"content":"public class ChangesData {"},{"operation":"REMOVE","number":13,"content":"    private String otherCommitId;"},{"operation":"REMOVE","number":14,"content":""},{"operation":"REMOVE","number":15,"content":"    private List\u003cChangeData\u003e changes;"},{"operation":"REMOVE","number":16,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/ChangesData.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class ChangesData(var otherCommitId: String?, var changes: List\u003cChangeData\u003e) {"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/CommitData.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import lombok.*;"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"import java.util.Date;"},{"operation":"REMOVE","number":6,"content":"import java.util.List;"},{"operation":"REMOVE","number":7,"content":""},{"operation":"REMOVE","number":8,"content":"@Data"},{"operation":"REMOVE","number":9,"content":"@Builder"},{"operation":"REMOVE","number":10,"content":"@EqualsAndHashCode"},{"operation":"REMOVE","number":11,"content":"@NoArgsConstructor"},{"operation":"REMOVE","number":12,"content":"@AllArgsConstructor(access \u003d AccessLevel.PACKAGE)"},{"operation":"REMOVE","number":13,"content":"public class CommitData {"},{"operation":"REMOVE","number":14,"content":""},{"operation":"REMOVE","number":15,"content":"    private String id;"},{"operation":"REMOVE","number":16,"content":"    private String message;"},{"operation":"REMOVE","number":17,"content":"    private String authorName;"},{"operation":"REMOVE","number":18,"content":"    private String authorEmail;"},{"operation":"REMOVE","number":19,"content":"    private Date date;"},{"operation":"REMOVE","number":20,"content":""},{"operation":"REMOVE","number":21,"content":"    private List\u003cString\u003e parentIds;"},{"operation":"REMOVE","number":22,"content":""},{"operation":"REMOVE","number":23,"content":"    private List\u003cChangesData\u003e changeSets;"},{"operation":"REMOVE","number":24,"content":""},{"operation":"REMOVE","number":25,"content":"    public boolean isMergeCommit() {"},{"operation":"REMOVE","number":26,"content":"        return parentIds !\u003d null \u0026\u0026 parentIds.size() \u003e\u003d 2;"},{"operation":"REMOVE","number":27,"content":"    }"},{"operation":"REMOVE","number":28,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/CommitData.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.util.*"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"data class CommitData(var id: String, var message: String, var authorName: String, var authorEmail: String, var date: Date, var parentIds: List\u003cString\u003e, var changeSets: List\u003cChangesData\u003e) {"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    val isMergeCommit: Boolean"},{"operation":"ADD","number":8,"content":"        get() \u003d parentIds.size \u003e\u003d 2"},{"operation":"ADD","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Author.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"public class Author {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Author.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class Author(var id: AuthorID, var commits: MutableList\u003cCommit\u003e)"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/AuthorID.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class AuthorID(var email: String, var name: String) {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"public class Change {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":""},{"operation":"ADD","number":4,"content":"data class Change(var lines: List\u003cLine\u003e, var commit: Commit, var type: ChangeType, var file: File?, var oldFilename: String, var newFileName: String) {"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"    fun isRenameChange(): Boolean {"},{"operation":"ADD","number":7,"content":"        return type \u003d\u003d ChangeType.RENAME"},{"operation":"ADD","number":8,"content":"    }"},{"operation":"ADD","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/ChangeType.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"enum class ChangeType {"},{"operation":"ADD","number":4,"content":"    ADD,"},{"operation":"ADD","number":5,"content":"    COPY,"},{"operation":"ADD","number":6,"content":"    DELETE,"},{"operation":"ADD","number":7,"content":"    MODIFY,"},{"operation":"ADD","number":8,"content":"    RENAME"},{"operation":"ADD","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"public class Commit {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.util.*"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"data class Commit(var id: String, var message: String, var date: Date, var author: Author, var parents: List\u003cCommit\u003e, var changes: List\u003cChange\u003e) {"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"public class File {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.nio.file.Path"},{"operation":"ADD","number":4,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"data class File(var fullyQualifiedName: String, var changes: MutableList\u003cChange\u003e) {"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"    var name \u003d fullyQualifiedName.split(\"/\").last()"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"    val path: Path"},{"operation":"ADD","number":11,"content":"        get() \u003d Paths.get(fullyQualifiedName)"},{"operation":"ADD","number":12,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Line.java","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model;"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"public class Line {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Line.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class Line(var oldLineNumber: Int, var newLineNumber: Int, var oldContent: String, var newContent: String, var author: Author, var change: Change) {"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/Project.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.registries.AuthorRegistry"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.registries.CommitRegistry"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.registries.FileRegistry"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"class Project(val projectID: String) {"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"    val authorRegistry: AuthorRegistry \u003d AuthorRegistry()"},{"operation":"ADD","number":10,"content":"    val commitRegistry: CommitRegistry \u003d CommitRegistry()"},{"operation":"ADD","number":11,"content":"    val fileRegistry: FileRegistry \u003d FileRegistry()"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.util.*"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"abstract class AbstractRegistry\u003cTYPE, ID\u003e {"},{"operation":"ADD","number":6,"content":"    private val map: MutableMap\u003cID, TYPE\u003e \u003d HashMap()"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"    val all: List\u003cTYPE\u003e"},{"operation":"ADD","number":9,"content":"        get() \u003d map.values as List\u003cTYPE\u003e"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    val allIDs: Set\u003cID\u003e"},{"operation":"ADD","number":12,"content":"        get() \u003d map.keys"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    fun getByID(id: ID): TYPE? {"},{"operation":"ADD","number":16,"content":"        return map[id]"},{"operation":"ADD","number":17,"content":"    }"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"    fun add(entity: TYPE, id: ID): TYPE? {"},{"operation":"ADD","number":20,"content":"        return map.put(id, entity)"},{"operation":"ADD","number":21,"content":"    }"},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"    fun add(entity: TYPE): TYPE? {"},{"operation":"ADD","number":24,"content":"        return map.put(getID(entity), entity)"},{"operation":"ADD","number":25,"content":"    }"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"    protected abstract fun getID(entity: TYPE): ID"},{"operation":"ADD","number":28,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/registries/AuthorRegistry.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.Author"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class AuthorRegistry : AbstractRegistry\u003cAuthor, AuthorID\u003e() {"},{"operation":"ADD","number":7,"content":"    override fun getID(entity: Author): AuthorID {"},{"operation":"ADD","number":8,"content":"        return entity.id"},{"operation":"ADD","number":9,"content":"    }"},{"operation":"ADD","number":10,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/registries/CommitRegistry.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.Commit"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class CommitRegistry : AbstractRegistry\u003cCommit, String\u003e() {"},{"operation":"ADD","number":6,"content":"    override fun getID(entity: Commit): String {"},{"operation":"ADD","number":7,"content":"        return entity.id"},{"operation":"ADD","number":8,"content":"    }"},{"operation":"ADD","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/registries/FileRegistry.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.File"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class FileRegistry : AbstractRegistry\u003cFile, String\u003e() {"},{"operation":"ADD","number":6,"content":"    override fun getID(entity: File): String {"},{"operation":"ADD","number":7,"content":"        return entity.fullyQualifiedName"},{"operation":"ADD","number":8,"content":"    }"},{"operation":"ADD","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.transformers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.data.ChangesData"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.data.CommitData"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitsecond.model.*"},{"operation":"ADD","number":7,"content":"import org.eclipse.jgit.diff.DiffEntry"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"fun createProject(commitDatas: List\u003cCommitData\u003e, projectId: String): Project {"},{"operation":"ADD","number":10,"content":"    val project \u003d Project(projectId)"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    commitDatas.forEach {"},{"operation":"ADD","number":13,"content":"        val author \u003d getCommitAuthor(it, project)"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"        val commit \u003d Commit(id \u003d it.id,"},{"operation":"ADD","number":16,"content":"                message \u003d it.message,"},{"operation":"ADD","number":17,"content":"                date \u003d it.date,"},{"operation":"ADD","number":18,"content":"                author \u003d author,"},{"operation":"ADD","number":19,"content":"                parents \u003d getParentFromIds(it.parentIds, project),"},{"operation":"ADD","number":20,"content":"                changes \u003d ArrayList())"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"        addChangesToCommit(it.changeSets, commit, project)"},{"operation":"ADD","number":23,"content":"        author.commits.add(commit)"},{"operation":"ADD","number":24,"content":"        project.commitRegistry.add(commit)"},{"operation":"ADD","number":25,"content":"    }"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"    return project"},{"operation":"ADD","number":28,"content":"}"},{"operation":"ADD","number":29,"content":""},{"operation":"ADD","number":30,"content":"private fun addChangesToCommit(changeSets: List\u003cChangesData\u003e, commit: Commit, project: Project) {"},{"operation":"ADD","number":31,"content":"    commit.changes \u003d changeSets"},{"operation":"ADD","number":32,"content":"            .flatMap { it.changes }"},{"operation":"ADD","number":33,"content":"            .map {"},{"operation":"ADD","number":34,"content":"                val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":35,"content":"                        type \u003d transformChangeType(it.type),"},{"operation":"ADD","number":36,"content":"                        file \u003d getFileForChange(it, project),"},{"operation":"ADD","number":37,"content":"                        lines \u003d ArrayList(), //getLinesFromDiff(it.diff),"},{"operation":"ADD","number":38,"content":"                        oldFilename \u003d it.oldFileName,"},{"operation":"ADD","number":39,"content":"                        newFileName \u003d it.newFileName)"},{"operation":"ADD","number":40,"content":"                change.file?.changes?.add(change)"},{"operation":"ADD","number":41,"content":"                change"},{"operation":"ADD","number":42,"content":"            }"},{"operation":"ADD","number":43,"content":"}"},{"operation":"ADD","number":44,"content":""},{"operation":"ADD","number":45,"content":"//private fun getLinesFromDiff(diff: String): List\u003cLine\u003e {"},{"operation":"ADD","number":46,"content":"//"},{"operation":"ADD","number":47,"content":"//}"},{"operation":"ADD","number":48,"content":""},{"operation":"ADD","number":49,"content":"private fun getFileForChange(changeData: ChangeData, project: Project): File? {"},{"operation":"ADD","number":50,"content":""},{"operation":"ADD","number":51,"content":"    val changeType \u003d transformChangeType(changeData.type)"},{"operation":"ADD","number":52,"content":""},{"operation":"ADD","number":53,"content":"    var file: File?"},{"operation":"ADD","number":54,"content":""},{"operation":"ADD","number":55,"content":"    when (changeType) {"},{"operation":"ADD","number":56,"content":"        ChangeType.ADD -\u003e {"},{"operation":"ADD","number":57,"content":"            file \u003d project.fileRegistry.getByID(changeData.newFileName)"},{"operation":"ADD","number":58,"content":"            if (file \u003d\u003d null) {"},{"operation":"ADD","number":59,"content":"                file \u003d File(fullyQualifiedName \u003d changeData.newFileName, changes \u003d ArrayList())"},{"operation":"ADD","number":60,"content":"                project.fileRegistry.add(file)"},{"operation":"ADD","number":61,"content":"            }"},{"operation":"ADD","number":62,"content":"        }"},{"operation":"ADD","number":63,"content":"        ChangeType.RENAME -\u003e {"},{"operation":"ADD","number":64,"content":"            file \u003d project.fileRegistry.getByID(changeData.oldFileName)"},{"operation":"ADD","number":65,"content":"            if (file \u003d\u003d null) {"},{"operation":"ADD","number":66,"content":"                System.err.println(\"File not found for rename change: $changeData\")"},{"operation":"ADD","number":67,"content":"            } else {"},{"operation":"ADD","number":68,"content":"                file.fullyQualifiedName \u003d changeData.newFileName"},{"operation":"ADD","number":69,"content":"            }"},{"operation":"ADD","number":70,"content":"        }"},{"operation":"ADD","number":71,"content":"        else -\u003e {"},{"operation":"ADD","number":72,"content":"            file \u003d project.fileRegistry.getByID(changeData.newFileName)"},{"operation":"ADD","number":73,"content":"            if (file \u003d\u003d null) {"},{"operation":"ADD","number":74,"content":"                System.err.println(\"File not found for change: $changeData\")"},{"operation":"ADD","number":75,"content":"            }"},{"operation":"ADD","number":76,"content":"        }"},{"operation":"ADD","number":77,"content":"    }"},{"operation":"ADD","number":78,"content":""},{"operation":"ADD","number":79,"content":"    return file"},{"operation":"ADD","number":80,"content":"}"},{"operation":"ADD","number":81,"content":""},{"operation":"ADD","number":82,"content":"private fun transformChangeType(type: DiffEntry.ChangeType): ChangeType {"},{"operation":"ADD","number":83,"content":"    return when (type) {"},{"operation":"ADD","number":84,"content":"        DiffEntry.ChangeType.ADD -\u003e ChangeType.ADD"},{"operation":"ADD","number":85,"content":"        DiffEntry.ChangeType.COPY -\u003e ChangeType.COPY"},{"operation":"ADD","number":86,"content":"        DiffEntry.ChangeType.DELETE -\u003e ChangeType.DELETE"},{"operation":"ADD","number":87,"content":"        DiffEntry.ChangeType.MODIFY -\u003e ChangeType.MODIFY"},{"operation":"ADD","number":88,"content":"        DiffEntry.ChangeType.RENAME -\u003e ChangeType.RENAME"},{"operation":"ADD","number":89,"content":"    }"},{"operation":"ADD","number":90,"content":"}"},{"operation":"ADD","number":91,"content":""},{"operation":"ADD","number":92,"content":"private fun getCommitAuthor(commitData: CommitData, project: Project): Author {"},{"operation":"ADD","number":93,"content":"    val authorID \u003d AuthorID(name \u003d commitData.authorName, email \u003d commitData.authorEmail)"},{"operation":"ADD","number":94,"content":""},{"operation":"ADD","number":95,"content":"    var author \u003d project.authorRegistry.getByID(authorID)"},{"operation":"ADD","number":96,"content":"    if (author \u003d\u003d null) {"},{"operation":"ADD","number":97,"content":"        author \u003d Author(id \u003d authorID, commits \u003d ArrayList())"},{"operation":"ADD","number":98,"content":"        project.authorRegistry.add(author)"},{"operation":"ADD","number":99,"content":"    }"},{"operation":"ADD","number":100,"content":""},{"operation":"ADD","number":101,"content":"    return author"},{"operation":"ADD","number":102,"content":"}"},{"operation":"ADD","number":103,"content":""},{"operation":"ADD","number":104,"content":"private fun getParentFromIds(parentIds: List\u003cString\u003e, project: Project): List\u003cCommit\u003e {"},{"operation":"ADD","number":105,"content":"    return parentIds.map { project.commitRegistry.getByID(it) }.filterNotNull()"},{"operation":"ADD","number":106,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DiffParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.transformers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.util.*"},{"operation":"ADD","number":4,"content":"import kotlin.collections.ArrayList"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class DiffParser(private val content: String) {"},{"operation":"ADD","number":7,"content":"    private val lines: List\u003cString\u003e \u003d Collections.unmodifiableList(content.split(\"\\n\"))"},{"operation":"ADD","number":8,"content":"    val addedLines: MutableList\u003cPair\u003cInt, String\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":9,"content":"    val deletedLines: MutableList\u003cPair\u003cInt, String\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    init {"},{"operation":"ADD","number":12,"content":"        lines.filter { it.startsWith(\"@@\") }.forEach {"},{"operation":"ADD","number":13,"content":"            val (removePair, addPair) \u003d getRemoveAndAddHunkInfo(it)"},{"operation":"ADD","number":14,"content":"            val (removeStart, removeSize) \u003d removePair"},{"operation":"ADD","number":15,"content":"            val (addStart, addSize) \u003d addPair"},{"operation":"ADD","number":16,"content":""},{"operation":"ADD","number":17,"content":"            val firstLineIndex \u003d lines.indexOf(it) + 1"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"            var diffLineIndex \u003d firstLineIndex"},{"operation":"ADD","number":20,"content":"            for (i in removeStart until (removeStart + removeSize))"},{"operation":"ADD","number":21,"content":"                deletedLines.add(Pair(i, lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"ADD","number":22,"content":"            for (i in addStart until (addStart + addSize))"},{"operation":"ADD","number":23,"content":"                addedLines.add(Pair(i, lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"ADD","number":24,"content":"        }"},{"operation":"ADD","number":25,"content":""},{"operation":"ADD","number":26,"content":"    }"},{"operation":"ADD","number":27,"content":""},{"operation":"ADD","number":28,"content":"    private fun getRemoveAndAddHunkInfo(it: String): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"},{"operation":"ADD","number":29,"content":"        val line \u003d it.replace(\"@\", \"\").trim()"},{"operation":"ADD","number":30,"content":"        val info \u003d line.split(\" \")"},{"operation":"ADD","number":31,"content":""},{"operation":"ADD","number":32,"content":"        val removeInfo \u003d info[0].substring(1)"},{"operation":"ADD","number":33,"content":"        val removeNumbers \u003d removeInfo.split(\",\")"},{"operation":"ADD","number":34,"content":"        val removeStart \u003d Integer.parseInt(removeNumbers[0])"},{"operation":"ADD","number":35,"content":"        val removeSize \u003d if (removeNumbers.size \u003c 2) 1 else Integer.parseInt(removeNumbers[1])"},{"operation":"ADD","number":36,"content":"        val removePair \u003d Pair(removeStart, removeSize)"},{"operation":"ADD","number":37,"content":""},{"operation":"ADD","number":38,"content":"        val addInfo \u003d info[1].substring(1)"},{"operation":"ADD","number":39,"content":"        val addNumbers \u003d addInfo.split(\",\")"},{"operation":"ADD","number":40,"content":"        val addStart \u003d Integer.parseInt(addNumbers[0])"},{"operation":"ADD","number":41,"content":"        val addSize \u003d if (addNumbers.size \u003c 2) 1 else Integer.parseInt(addNumbers[1])"},{"operation":"ADD","number":42,"content":"        val addPair \u003d Pair(addStart, addSize)"},{"operation":"ADD","number":43,"content":"        return Pair(removePair, addPair)"},{"operation":"ADD","number":44,"content":"    }"},{"operation":"ADD","number":45,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"11957e99f8b0b5aeba15883d28df5a23b76d8556","isBinary":false,"isBlame":false}]},{"id":"36814115cb47b3916bca7a084d94e9ae9bfc729e","parentIds":["f455b1609576b1a05a6151118d5916fd9a8b6651"],"authorName":"Mario Rivis","authorEmail":"mario.rivis@dialogdata.de","authorDate":"Aug 30, 2019, 3:55:41 PM","committerName":"Mario Rivis","committerEmail":"mario.rivis@dialogdata.de","committerDate":"Aug 30, 2019, 3:55:41 PM","message":"worked on line changes and annotated lines","changes":[{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.data.AnnotatedLineData"}]},{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.eclipse.jgit.api.BlameCommand"}]},{"lineChanges":[{"operation":"ADD","number":32,"content":"import kotlin.collections.ArrayList"}]},{"lineChanges":[{"operation":"ADD","number":127,"content":"    private fun blame(repo: Repository, filePath: String, commitId: String): MutableList\u003cAnnotatedLineData\u003e {"},{"operation":"ADD","number":128,"content":"        val gitObject \u003d repo.resolve(commitId)"},{"operation":"ADD","number":129,"content":"        val blameCommand \u003d BlameCommand(repo)"},{"operation":"ADD","number":130,"content":"        blameCommand.setFilePath(filePath)"},{"operation":"ADD","number":131,"content":"        blameCommand.setStartCommit(gitObject)"},{"operation":"ADD","number":132,"content":"        val blameResult \u003d blameCommand.call()"},{"operation":"ADD","number":133,"content":"        val rawText \u003d blameResult.resultContents"},{"operation":"ADD","number":134,"content":"        val length \u003d rawText.size()"},{"operation":"ADD","number":135,"content":""},{"operation":"ADD","number":136,"content":"        val lines: MutableList\u003cAnnotatedLineData\u003e \u003d ArrayList()"},{"operation":"ADD","number":137,"content":""},{"operation":"ADD","number":138,"content":"        for (i in 0 until length) {"},{"operation":"ADD","number":139,"content":"            val commit \u003d blameResult.getSourceCommit(i)"},{"operation":"ADD","number":140,"content":"            val line \u003d AnnotatedLineData(commit.name, i + 1, rawText.getString(i))"},{"operation":"ADD","number":141,"content":"            lines.add(line)"},{"operation":"ADD","number":142,"content":"        }"},{"operation":"ADD","number":143,"content":""},{"operation":"ADD","number":144,"content":"        val blameContent \u003d String(rawText.rawContent)"},{"operation":"ADD","number":145,"content":"        val blameLines \u003d blameContent.split(\"\\n\")"},{"operation":"ADD","number":146,"content":"        val blameLength \u003d blameLines.size"},{"operation":"ADD","number":147,"content":""},{"operation":"ADD","number":148,"content":""},{"operation":"ADD","number":149,"content":"//        lines.forEach {"},{"operation":"ADD","number":150,"content":"//            println(\"${it.lineNumber} ${it.commit?.date} ${it.commit?.author!!.id.name} ${it.content}\")"},{"operation":"ADD","number":151,"content":"//        }"},{"operation":"ADD","number":152,"content":""},{"operation":"ADD","number":153,"content":"        return lines"},{"operation":"ADD","number":154,"content":"    }"},{"operation":"ADD","number":155,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":144,"content":"                val changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs, 0)"},{"operation":"ADD","number":176,"content":"                val changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs)"}]},{"lineChanges":[{"operation":"REMOVE","number":148,"content":"                        .map { getChangesData(repository, reader, currentCommitTreeIterator, revCommit, it, if (revCommit.parentCount \u003e\u003d 2) Integer.MAX_VALUE else 0) }"},{"operation":"ADD","number":180,"content":"                        .map { getChangesData(repository, reader, currentCommitTreeIterator, revCommit, it) }"}]},{"lineChanges":[{"operation":"REMOVE","number":164,"content":"    private fun getChangesData(repository: Repository, reader: ObjectReader, currentCommitTreeIterator: CanonicalTreeParser, revCommit: RevCommit, parentCommit: RevCommit, contextLines: Int): ChangesData? {"},{"operation":"ADD","number":196,"content":"    private fun getChangesData(repository: Repository, reader: ObjectReader, currentCommitTreeIterator: CanonicalTreeParser, revCommit: RevCommit, parentCommit: RevCommit): ChangesData? {"}]},{"lineChanges":[{"operation":"REMOVE","number":169,"content":"            val changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits, contextLines)"},{"operation":"ADD","number":201,"content":"            val changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits)"}]},{"lineChanges":[{"operation":"REMOVE","number":185,"content":"    private fun transformDiffsToChangeDatas(revCommit: RevCommit, repository: Repository, diffs: List\u003cDiffEntry\u003e, contextLines: Int): List\u003cChangeData\u003e {"},{"operation":"ADD","number":217,"content":"    private fun transformDiffsToChangeDatas(revCommit: RevCommit, repository: Repository, diffs: List\u003cDiffEntry\u003e): List\u003cChangeData\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":190,"content":"                    commitID \u003d revCommit.name)"},{"operation":"REMOVE","number":191,"content":"            setNoOfLinesDeletedAndAdded(repository, it, changeData, contextLines)"},{"operation":"ADD","number":222,"content":"                    commitID \u003d revCommit.name,"},{"operation":"ADD","number":223,"content":"                    annotatedLines \u003d if (revCommit.parents.size \u003e 1) blame(repository, it.newPath, revCommit.name) else ArrayList())"},{"operation":"ADD","number":224,"content":"            setDiff(repository, it, changeData)"}]},{"lineChanges":[{"operation":"REMOVE","number":205,"content":"    private fun setNoOfLinesDeletedAndAdded(repository: Repository, diff: DiffEntry, repoChangeBlock: ChangeData, contextLines: Int) {"},{"operation":"ADD","number":238,"content":"    private fun setDiff(repository: Repository, diff: DiffEntry, repoChangeBlock: ChangeData) {"}]},{"lineChanges":[{"operation":"REMOVE","number":211,"content":"            df.setContext(contextLines)"},{"operation":"ADD","number":244,"content":"            df.setContext(0)"}]},{"lineChanges":[{"operation":"REMOVE","number":216,"content":"            countAddedAndDeletedLines(modifications, repoChangeBlock)"},{"operation":"ADD","number":249,"content":"            repoChangeBlock.diff \u003d modifications"}]},{"lineChanges":[{"operation":"REMOVE","number":223,"content":"    private fun countAddedAndDeletedLines(modifications: String, repoChangeBlock: ChangeData) {"},{"operation":"REMOVE","number":224,"content":"        var addedLines \u003d 0"},{"operation":"REMOVE","number":225,"content":"        var deletedLines \u003d 0"},{"operation":"REMOVE","number":226,"content":"        var lines \u003d Arrays.asList(*modifications.split(\"\\n\".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())"},{"operation":"REMOVE","number":227,"content":"        lines \u003d this.trimList(lines)"},{"operation":"REMOVE","number":228,"content":""},{"operation":"REMOVE","number":229,"content":"        for (line in lines) {"},{"operation":"REMOVE","number":230,"content":"            if (line.startsWith(\"+\")) {"},{"operation":"REMOVE","number":231,"content":"                ++addedLines"},{"operation":"REMOVE","number":232,"content":"            }"},{"operation":"REMOVE","number":233,"content":""},{"operation":"REMOVE","number":234,"content":"            if (line.startsWith(\"-\")) {"},{"operation":"REMOVE","number":235,"content":"                ++deletedLines"},{"operation":"REMOVE","number":236,"content":"            }"},{"operation":"REMOVE","number":237,"content":"        }"},{"operation":"REMOVE","number":238,"content":""},{"operation":"REMOVE","number":239,"content":"        repoChangeBlock.diff \u003d modifications"},{"operation":"REMOVE","number":240,"content":"        repoChangeBlock.addedLines \u003d addedLines"},{"operation":"REMOVE","number":241,"content":"        repoChangeBlock.deletedLines \u003d deletedLines"},{"operation":"REMOVE","number":242,"content":"    }"},{"operation":"REMOVE","number":243,"content":""}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":23,"content":""},{"operation":"ADD","number":24,"content":"//    val blames \u003d project.commitRegistry.all"},{"operation":"ADD","number":25,"content":"//            .filter { it.isMergeCommit }"},{"operation":"ADD","number":26,"content":"//            .flatMap { it.changes }"},{"operation":"ADD","number":27,"content":"//            .mapNotNull { change -\u003e change.file?.let { gitClient.blame(REPO_NAME, it.fullyQualifiedName, change.commit.id, project) } }"},{"operation":"ADD","number":28,"content":""}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/AnnotatedLineData.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class AnnotatedLineData(var commitId: String, var lineNumber: Int, var content: String)"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/BlameData.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class BlameData(var changeData: ChangeData, var blamedLines: List\u003cBlamedLine\u003e) {"},{"operation":"ADD","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/data/BlamedLine.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"data class BlamedLine(var line: String, var lineNumber: Int, var sourceAuthorID: AuthorID, var committerAuthorID: AuthorID, var commitId: String) {"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.kt","newFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class ChangeData(var commitID: String, var oldFileName: String, var newFileName: String, var type: DiffEntry.ChangeType, var diff: String \u003d \"\", var addedLines: Int \u003d 0, var deletedLines: Int \u003d 0) {"},{"operation":"ADD","number":6,"content":"data class ChangeData(var commitID: String, var oldFileName: String, var newFileName: String, var type: DiffEntry.ChangeType, var diff: String \u003d \"\", var annotatedLines: MutableList\u003cAnnotatedLineData\u003e) {"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/AnnotatedLine.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class AnnotatedLine(var commit: Commit, var lineNumber: Int, var content: String) {"},{"operation":"ADD","number":4,"content":"    override fun equals(other: Any?): Boolean {"},{"operation":"ADD","number":5,"content":"        if (other is AnnotatedLine)"},{"operation":"ADD","number":6,"content":"            return (commit.id \u003d\u003d other.commit.id).and(lineNumber \u003d\u003d other.lineNumber).and(content \u003d\u003d other.content)"},{"operation":"ADD","number":7,"content":"        else"},{"operation":"ADD","number":8,"content":"            return false"},{"operation":"ADD","number":9,"content":"    }"},{"operation":"ADD","number":10,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"data class Change(var lines: List\u003cLine\u003e, var commit: Commit, var type: ChangeType, var file: File?, var oldFilename: String, var newFileName: String) {"},{"operation":"ADD","number":4,"content":"data class Change(var commit: Commit, var type: ChangeType, var file: File, var oldFilename: String, var newFileName: String, var lineChanges: MutableList\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":5,"content":"    var parent: Change? \u003d if (file.changes.isEmpty()) null else file.changes.last()"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    init {"},{"operation":"ADD","number":8,"content":"        if (!commit.isMergeCommit) {"},{"operation":"ADD","number":9,"content":"            apply()"},{"operation":"ADD","number":10,"content":"        }"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    private fun apply() {"},{"operation":"ADD","number":14,"content":"        val newAnnotatedLines \u003d if (parent !\u003d null) ArrayList(parent!!.annotatedLines) else ArrayList()"},{"operation":"ADD","number":15,"content":"        lineChanges.filter { it.operation \u003d\u003d LineOperation.REMOVE }"},{"operation":"ADD","number":16,"content":"                .forEach { removeChange -\u003e newAnnotatedLines.removeIf { it.lineNumber \u003d\u003d removeChange.lineNumber \u0026\u0026 it.content \u003d\u003d removeChange.content } }"},{"operation":"ADD","number":17,"content":""},{"operation":"ADD","number":18,"content":"        lineChanges.filter { it.operation \u003d\u003d LineOperation.ADD }.forEach {"},{"operation":"ADD","number":19,"content":"            val annotatedLine \u003d AnnotatedLine(commit, it.lineNumber, it.content)"},{"operation":"ADD","number":20,"content":"            if (it.lineNumber \u003e newAnnotatedLines.size) {"},{"operation":"ADD","number":21,"content":"                newAnnotatedLines.add(annotatedLine)"},{"operation":"ADD","number":22,"content":"            } else {"},{"operation":"ADD","number":23,"content":"                newAnnotatedLines.add(it.lineNumber - 1, annotatedLine)"},{"operation":"ADD","number":24,"content":"            }"},{"operation":"ADD","number":25,"content":"        }"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"        reindex(newAnnotatedLines)"},{"operation":"ADD","number":28,"content":""},{"operation":"ADD","number":29,"content":"        annotatedLines \u003d newAnnotatedLines"},{"operation":"ADD","number":30,"content":"    }"},{"operation":"ADD","number":31,"content":""},{"operation":"ADD","number":32,"content":""},{"operation":"ADD","number":33,"content":"    private fun reindex(annotatedLines: MutableList\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":34,"content":"        annotatedLines.forEachIndexed { index, annotatedLine -\u003e annotatedLine.lineNumber \u003d index + 1 }"},{"operation":"ADD","number":35,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":6,"content":"    val isMergeCommit: Boolean"},{"operation":"ADD","number":7,"content":"        get() \u003d parents.size \u003e 1"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Line.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Line.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"data class Line(var oldLineNumber: Int, var newLineNumber: Int, var oldContent: String, var newContent: String, var author: Author, var change: Change) {"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"}"},{"operation":"ADD","number":3,"content":"data class Line(var oldLineNumber: Int, var newLineNumber: Int, var oldContent: String, var newContent: String, var author: Author, var change: Change)"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/LineChange.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class LineChange(var operation: LineOperation, var lineNumber: Int, var content: String)"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/model/LineOperation.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"enum class LineOperation {"},{"operation":"ADD","number":4,"content":"    ADD,"},{"operation":"ADD","number":5,"content":"    REMOVE"},{"operation":"ADD","number":6,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","newFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    val all: List\u003cTYPE\u003e"},{"operation":"REMOVE","number":9,"content":"        get() \u003d map.values as List\u003cTYPE\u003e"},{"operation":"ADD","number":8,"content":"    val all: Collection\u003cTYPE\u003e"},{"operation":"ADD","number":9,"content":"        get() \u003d map.values"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":31,"content":"    commit.changes \u003d changeSets"},{"operation":"REMOVE","number":32,"content":"            .flatMap { it.changes }"},{"operation":"REMOVE","number":33,"content":"            .map {"},{"operation":"REMOVE","number":34,"content":"                val change \u003d Change(commit \u003d commit,"},{"operation":"REMOVE","number":35,"content":"                        type \u003d transformChangeType(it.type),"},{"operation":"REMOVE","number":36,"content":"                        file \u003d getFileForChange(it, project),"},{"operation":"REMOVE","number":37,"content":"                        lines \u003d ArrayList(), //getLinesFromDiff(it.diff),"},{"operation":"REMOVE","number":38,"content":"                        oldFilename \u003d it.oldFileName,"},{"operation":"REMOVE","number":39,"content":"                        newFileName \u003d it.newFileName)"},{"operation":"REMOVE","number":40,"content":"                change.file?.changes?.add(change)"},{"operation":"REMOVE","number":41,"content":"                change"},{"operation":"REMOVE","number":42,"content":"            }"},{"operation":"ADD","number":31,"content":"    commit.changes \u003d if (commit.isMergeCommit)"},{"operation":"ADD","number":32,"content":"        getMergeCommitChanges(commit, changeSets, project)"},{"operation":"ADD","number":33,"content":"    else"},{"operation":"ADD","number":34,"content":"        changeSets.flatMap { it.changes }"},{"operation":"ADD","number":35,"content":"                .map {"},{"operation":"ADD","number":36,"content":"                    val annotatedLines \u003d it.annotatedLines.map { line -\u003e AnnotatedLine(commit, line.lineNumber, line.content) }.toMutableList()"},{"operation":"ADD","number":37,"content":"                    val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":38,"content":"                            type \u003d transformChangeType(it.type),"},{"operation":"ADD","number":39,"content":"                            file \u003d getFileForChange(it, project),"},{"operation":"ADD","number":40,"content":"                            oldFilename \u003d it.oldFileName,"},{"operation":"ADD","number":41,"content":"                            newFileName \u003d it.newFileName,"},{"operation":"ADD","number":42,"content":"                            lineChanges \u003d DiffParser(it.diff).lineChanges,"},{"operation":"ADD","number":43,"content":"                            annotatedLines \u003d annotatedLines)"},{"operation":"ADD","number":44,"content":"                    change.file.changes.add(change)"},{"operation":"ADD","number":45,"content":"                    change"},{"operation":"ADD","number":46,"content":"                }"}]},{"lineChanges":[{"operation":"REMOVE","number":45,"content":"//private fun getLinesFromDiff(diff: String): List\u003cLine\u003e {"},{"operation":"ADD","number":49,"content":"fun getMergeCommitChanges(commit: Commit, changeSets: List\u003cChangesData\u003e, project: Project): List\u003cChange\u003e {"},{"operation":"ADD","number":50,"content":"    return changeSets.flatMap { it.changes }.map { changeData -\u003e"},{"operation":"ADD","number":51,"content":"        //        val removeChanges: List\u003cLineChange\u003e"},{"operation":"ADD","number":52,"content":"//        val addChanges: List\u003cLineChange\u003e"},{"operation":"ADD","number":53,"content":"//        val file \u003d getFileForChange(changeData, project)"},{"operation":"ADD","number":54,"content":"//        val last \u003d file.changes.last()"},{"operation":"ADD","number":55,"content":"//        val annotatedLines \u003d changeData.annotatedLines.map { line -\u003e AnnotatedLine(project.commitRegistry.getByID(line.commitId)!!, line.lineNumber, line.content) }"},{"operation":"ADD","number":56,"content":"//        removeChanges \u003d last.annotatedLines.filter { !annotatedLines.contains(it) }"},{"operation":"ADD","number":57,"content":"//                .map { LineChange(LineOperation.REMOVE, it.lineNumber, it.content) }"},{"operation":"ADD","number":58,"content":"//"},{"operation":"ADD","number":59,"content":"//        addChanges \u003d annotatedLines.filter { last.annotatedLines.contains(it) }"},{"operation":"ADD","number":60,"content":"//                .map { LineChange(LineOperation.ADD, it.lineNumber, it.content) }"},{"operation":"ADD","number":61,"content":"//        val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"},{"operation":"ADD","number":62,"content":"//        lineChanges.addAll(removeChanges)"},{"operation":"ADD","number":63,"content":"//        lineChanges.addAll(addChanges)"}]},{"lineChanges":[{"operation":"REMOVE","number":47,"content":"//}"},{"operation":"ADD","number":65,"content":"        val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":66,"content":"                type \u003d transformChangeType(changeData.type),"},{"operation":"ADD","number":67,"content":"                file \u003d getFileForChange(changeData, project),"},{"operation":"ADD","number":68,"content":"                oldFilename \u003d changeData.oldFileName,"},{"operation":"ADD","number":69,"content":"                newFileName \u003d changeData.newFileName,"},{"operation":"ADD","number":70,"content":"                lineChanges \u003d ArrayList(),"},{"operation":"ADD","number":71,"content":"                annotatedLines \u003d changeData.annotatedLines.map { line -\u003e AnnotatedLine(project.commitRegistry.getByID(line.commitId)!!, line.lineNumber, line.content) }.toMutableList())"},{"operation":"ADD","number":72,"content":"        change.file.changes.add(change)"},{"operation":"ADD","number":73,"content":"        change"},{"operation":"ADD","number":74,"content":"    }"},{"operation":"ADD","number":75,"content":"}"}]},{"lineChanges":[{"operation":"REMOVE","number":49,"content":"private fun getFileForChange(changeData: ChangeData, project: Project): File? {"},{"operation":"ADD","number":77,"content":"private fun getFileForChange(changeData: ChangeData, project: Project): File {"}]},{"lineChanges":[{"operation":"REMOVE","number":79,"content":"    return file"},{"operation":"ADD","number":107,"content":"    return file!!"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DiffParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DiffParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.LineChange"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.model.LineOperation"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"class DiffParser(private val content: String) {"},{"operation":"ADD","number":8,"content":"class DiffParser(content: String) {"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    val addedLines: MutableList\u003cPair\u003cInt, String\u003e\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":9,"content":"    val deletedLines: MutableList\u003cPair\u003cInt, String\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"}]},{"lineChanges":[{"operation":"REMOVE","number":21,"content":"                deletedLines.add(Pair(i, lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"ADD","number":23,"content":"                lineChanges.add(LineChange(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"}]},{"lineChanges":[{"operation":"REMOVE","number":23,"content":"                addedLines.add(Pair(i, lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"ADD","number":25,"content":"                lineChanges.add(LineChange(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"}]}],"annotatedLines":[],"parentCommitId":"f455b1609576b1a05a6151118d5916fd9a8b6651","isBinary":false,"isBlame":false}]},{"id":"7de22708153e09901950a203024c0507552d4c6f","parentIds":["36814115cb47b3916bca7a084d94e9ae9bfc729e"],"authorName":"Mario Rivis","authorEmail":"mario.rivis@dialogdata.de","authorDate":"Aug 30, 2019, 5:32:11 PM","committerName":"Mario Rivis","committerEmail":"mario.rivis@dialogdata.de","committerDate":"Aug 30, 2019, 5:32:11 PM","message":"creating a test, need to repair merge commit appearing twice in file commits","changes":[{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":99,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":100,"content":"            \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e"},{"operation":"ADD","number":101,"content":"            \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e"},{"operation":"ADD","number":102,"content":"            \u003cversion\u003eRELEASE\u003c/version\u003e"},{"operation":"ADD","number":103,"content":"            \u003cscope\u003etest\u003c/scope\u003e"},{"operation":"ADD","number":104,"content":"        \u003c/dependency\u003e"}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"private const val REPO_NAME \u003d \"gitTest\""},{"operation":"ADD","number":6,"content":"const val REPO_NAME \u003d \"gitTest\""}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":8,"content":"        println(\"Commit: ${commit.id}      beforeChange for ${file.fullyQualifiedName}\")"},{"operation":"ADD","number":9,"content":"        println(annotatedLines.joinToString(\"\\n\") { \"${it.lineNumber} ${it.content}\" })"}]},{"lineChanges":[{"operation":"ADD","number":13,"content":"        println(\"Commit: ${commit.id}      after for ${file.fullyQualifiedName}\")"},{"operation":"ADD","number":14,"content":"        println(annotatedLines.joinToString(\"\\n\") { \"${it.lineNumber} ${it.content}\" })"},{"operation":"ADD","number":15,"content":"        print(\"\\n\\n\\n\")"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"            if (it.lineNumber \u003e newAnnotatedLines.size) {"},{"operation":"REMOVE","number":21,"content":"                newAnnotatedLines.add(annotatedLine)"},{"operation":"REMOVE","number":22,"content":"            } else {"},{"operation":"REMOVE","number":23,"content":"                newAnnotatedLines.add(it.lineNumber - 1, annotatedLine)"},{"operation":"REMOVE","number":24,"content":"            }"},{"operation":"ADD","number":25,"content":"//            if (it.lineNumber \u003e newAnnotatedLines.size) {"},{"operation":"ADD","number":26,"content":"//                newAnnotatedLines.add(annotatedLine)"},{"operation":"ADD","number":27,"content":"//            } else {"},{"operation":"ADD","number":28,"content":"            newAnnotatedLines.add(it.lineNumber - 1, annotatedLine)"},{"operation":"ADD","number":29,"content":"//            }"}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":7,"content":"    fun contentForRevision(commit: Commit): String {"},{"operation":"ADD","number":8,"content":"        val changeForCommit \u003d changes.first { it.commit \u003d\u003d commit }"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"        return changeForCommit.annotatedLines.joinToString(separator \u003d \"\\n\") { it.content }"},{"operation":"ADD","number":11,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":51,"content":"        //        val removeChanges: List\u003cLineChange\u003e"},{"operation":"REMOVE","number":52,"content":"//        val addChanges: List\u003cLineChange\u003e"},{"operation":"REMOVE","number":53,"content":"//        val file \u003d getFileForChange(changeData, project)"},{"operation":"REMOVE","number":54,"content":"//        val last \u003d file.changes.last()"},{"operation":"REMOVE","number":55,"content":"//        val annotatedLines \u003d changeData.annotatedLines.map { line -\u003e AnnotatedLine(project.commitRegistry.getByID(line.commitId)!!, line.lineNumber, line.content) }"},{"operation":"REMOVE","number":56,"content":"//        removeChanges \u003d last.annotatedLines.filter { !annotatedLines.contains(it) }"},{"operation":"REMOVE","number":57,"content":"//                .map { LineChange(LineOperation.REMOVE, it.lineNumber, it.content) }"},{"operation":"REMOVE","number":58,"content":"//"},{"operation":"REMOVE","number":59,"content":"//        addChanges \u003d annotatedLines.filter { last.annotatedLines.contains(it) }"},{"operation":"REMOVE","number":60,"content":"//                .map { LineChange(LineOperation.ADD, it.lineNumber, it.content) }"},{"operation":"REMOVE","number":61,"content":"//        val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":62,"content":"//        lineChanges.addAll(removeChanges)"},{"operation":"REMOVE","number":63,"content":"//        lineChanges.addAll(addChanges)"},{"operation":"REMOVE","number":64,"content":"//"}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/test/java/ProjectTest.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"import org.dxworks.gitsecond.GitClient"},{"operation":"ADD","number":2,"content":"import org.dxworks.gitsecond.REPO_NAME"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.Project"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"ADD","number":5,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"ADD","number":6,"content":"import org.junit.jupiter.api.BeforeAll"},{"operation":"ADD","number":7,"content":"import org.junit.jupiter.api.Test"},{"operation":"ADD","number":8,"content":"import org.junit.jupiter.api.TestInstance"},{"operation":"ADD","number":9,"content":"import kotlin.test.assertEquals"},{"operation":"ADD","number":10,"content":"import kotlin.test.fail"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"@TestInstance(TestInstance.Lifecycle.PER_CLASS)"},{"operation":"ADD","number":13,"content":"class ProjectTest {"},{"operation":"ADD","number":14,"content":"    private val gitClient \u003d GitClient()"},{"operation":"ADD","number":15,"content":"    private lateinit var project: Project"},{"operation":"ADD","number":16,"content":""},{"operation":"ADD","number":17,"content":"    @BeforeAll"},{"operation":"ADD","number":18,"content":"    fun `initialize repository and create project`() {"},{"operation":"ADD","number":19,"content":"        try {"},{"operation":"ADD","number":20,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME)"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"        } catch (e: GitAPIException) {"},{"operation":"ADD","number":23,"content":"            e.printStackTrace()"},{"operation":"ADD","number":24,"content":"            fail()"},{"operation":"ADD","number":25,"content":"        }"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"        val commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME).reversed()"},{"operation":"ADD","number":28,"content":"        project \u003d createProject(commitDatas, REPO_NAME)"},{"operation":"ADD","number":29,"content":"    }"},{"operation":"ADD","number":30,"content":""},{"operation":"ADD","number":31,"content":"    @Test"},{"operation":"ADD","number":32,"content":"    fun `all files at all commits should be correctly built`() {"},{"operation":"ADD","number":33,"content":"        project.fileRegistry.all.forEach { file -\u003e"},{"operation":"ADD","number":34,"content":"            file.changes.map { change -\u003e change.commit }.forEach { commit -\u003e"},{"operation":"ADD","number":35,"content":"                val fileContent \u003d gitClient.getFileContentForRepoAndRevision(file.fullyQualifiedName, REPO_NAME, commit.id)"},{"operation":"ADD","number":36,"content":"                val actual \u003d file.contentForRevision(commit).trim()"},{"operation":"ADD","number":37,"content":"                println(\"Commit: ${commit.isMergeCommit} ${commit.id}      expected for ${file.fullyQualifiedName}\")"},{"operation":"ADD","number":38,"content":"                println(fileContent.trim())"},{"operation":"ADD","number":39,"content":"                println()"},{"operation":"ADD","number":40,"content":"                println(\"Commit: ${commit.id}      actual for ${file.fullyQualifiedName}\")"},{"operation":"ADD","number":41,"content":"                println(actual)"},{"operation":"ADD","number":42,"content":"                print(\"\\n\\n\\n\\n\\n\")"},{"operation":"ADD","number":43,"content":"                assertEquals(fileContent.trim(), actual)"},{"operation":"ADD","number":44,"content":"            }"},{"operation":"ADD","number":45,"content":"        }"},{"operation":"ADD","number":46,"content":""},{"operation":"ADD","number":47,"content":"    }"},{"operation":"ADD","number":48,"content":""},{"operation":"ADD","number":49,"content":"    @Test"},{"operation":"ADD","number":50,"content":"    private fun `a random file from a random commit should be correctly built`(): Project {"},{"operation":"ADD","number":51,"content":"        val file \u003d project.fileRegistry.all.random()"},{"operation":"ADD","number":52,"content":"        val commit \u003d file.changes.random().commit"},{"operation":"ADD","number":53,"content":"        val expectedContent \u003d gitClient.getFileContentForRepoAndRevision(file.fullyQualifiedName, REPO_NAME, commit.id).trim()"},{"operation":"ADD","number":54,"content":"        val myContent \u003d file.contentForRevision(commit).trim()"},{"operation":"ADD","number":55,"content":""},{"operation":"ADD","number":56,"content":"        assertEquals(expectedContent, myContent)"},{"operation":"ADD","number":57,"content":"        return project"},{"operation":"ADD","number":58,"content":"    }"},{"operation":"ADD","number":59,"content":""},{"operation":"ADD","number":60,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"36814115cb47b3916bca7a084d94e9ae9bfc729e","isBinary":false,"isBlame":false}]},{"id":"e4981c4e6c023f9ae08ece8d365d0da4881bb185","parentIds":["7de22708153e09901950a203024c0507552d4c6f"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 2, 2019, 4:06:09 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 2, 2019, 4:06:09 PM","message":"started work on commit parsers","changes":[{"oldFileName":"dev/null","newFileName":"resources/gitSecondLog.sh","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"gitSecondFolder\u003d$(pwd)"},{"operation":"ADD","number":2,"content":"cd \"$1\" || exit"},{"operation":"ADD","number":3,"content":"git log -p -M5% -c -U0 \u003e ~/Documents/dx/testLog.log"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":13,"content":"import org.eclipse.jgit.diff.RenameDetector"}]},{"lineChanges":[{"operation":"REMOVE","number":173,"content":"            if (revCommit.parentCount \u003d\u003d 0) {"},{"operation":"ADD","number":174,"content":"            return if (revCommit.parentCount \u003d\u003d 0) {"}]},{"lineChanges":[{"operation":"REMOVE","number":177,"content":"                return listOf(ChangesData(null, changes))"},{"operation":"ADD","number":178,"content":"                listOf(ChangesData(null, changes))"}]},{"lineChanges":[{"operation":"REMOVE","number":186,"content":"                return changesData as List\u003cChangesData\u003e"},{"operation":"ADD","number":187,"content":"                changesData as List\u003cChangesData\u003e"}]},{"lineChanges":[{"operation":"ADD","number":203,"content":"            cleanDataForRenames(changeDatas, revCommit, repository);"}]},{"lineChanges":[{"operation":"ADD","number":219,"content":"    private fun cleanDataForRenames(changeDatas: List\u003cChangeData\u003e, revCommit: RevCommit, repository: Repository) {"},{"operation":"ADD","number":220,"content":"        val addChangeDatas \u003d changeDatas.filter { it.type \u003d\u003d DiffEntry.ChangeType.ADD }"},{"operation":"ADD","number":221,"content":"        val deleteChangeDatas \u003d changeDatas.filter { it.type \u003d\u003d DiffEntry.ChangeType.DELETE }"},{"operation":"ADD","number":222,"content":""},{"operation":"ADD","number":223,"content":"        if (addChangeDatas.isNotEmpty() \u0026\u0026 deleteChangeDatas.isNotEmpty()) {"},{"operation":"ADD","number":224,"content":"            val git \u003d Git(repository)"},{"operation":"ADD","number":225,"content":"//            val log \u003d git.log()."},{"operation":"ADD","number":226,"content":"        }"},{"operation":"ADD","number":227,"content":"    }"},{"operation":"ADD","number":228,"content":""}]},{"lineChanges":[{"operation":"ADD","number":250,"content":""}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":19,"content":"    println(commitDatas)"},{"operation":"ADD","number":19,"content":"    commitDatas.map { \"${it.message} ${it.isMergeCommit}\" }.forEach { println(it) }"}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"//    val blames \u003d project.commitRegistry.all"},{"operation":"REMOVE","number":25,"content":"//            .filter { it.isMergeCommit }"},{"operation":"REMOVE","number":26,"content":"//            .flatMap { it.changes }"},{"operation":"REMOVE","number":27,"content":"//            .mapNotNull { change -\u003e change.file?.let { gitClient.blame(REPO_NAME, it.fullyQualifiedName, change.commit.id, project) } }"},{"operation":"REMOVE","number":28,"content":""},{"operation":"ADD","number":24,"content":"//Show the entire history of a file (including history beyond renames):"},{"operation":"ADD","number":25,"content":"//$ git log --follow -p -- \u003cfile\u003e"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":7,"content":"//    private fun getParentChange(commit: Commit) : Change?{"},{"operation":"ADD","number":8,"content":"//        commit.parents.find{parentCommit -\u003e parentCommit.changes.any { it.file \u003d\u003d file }}"},{"operation":"ADD","number":9,"content":"//    }"},{"operation":"ADD","number":10,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":25,"content":"//            if (it.lineNumber \u003e newAnnotatedLines.size) {"},{"operation":"REMOVE","number":26,"content":"//                newAnnotatedLines.add(annotatedLine)"},{"operation":"REMOVE","number":27,"content":"//            } else {"}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"//            }"}]},{"lineChanges":[{"operation":"REMOVE","number":45,"content":"}"},{"operation":"ADD","number":45,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import java.util.*"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class File(var fullyQualifiedName: String, var changes: MutableList\u003cChange\u003e) {"},{"operation":"ADD","number":7,"content":"data class File(var fullyQualifiedName: String, var changes: MutableList\u003cChange\u003e, var aliases: MutableList\u003cString\u003e \u003d Collections.singletonList(fullyQualifiedName), var isAlive: Boolean \u003d true) {"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class CommitParser(val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":6,"content":"    val isMergeCommit: Boolean \u003d lines.removeIf { it.startsWith(\"Merge\") }"},{"operation":"ADD","number":7,"content":"    val commitId: String"},{"operation":"ADD","number":8,"content":"    val authorId: AuthorID"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"    init {"},{"operation":"ADD","number":11,"content":"        commitId \u003d extractCommitId()"},{"operation":"ADD","number":12,"content":"        authorId \u003d extractAuthorId()"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    private fun extractCommitId(): String {"},{"operation":"ADD","number":16,"content":"        val commitLine \u003d lines.removeAt(0)"},{"operation":"ADD","number":17,"content":"        return commitLine.split(\" \")[1]"},{"operation":"ADD","number":18,"content":"    }"},{"operation":"ADD","number":19,"content":""},{"operation":"ADD","number":20,"content":"    private fun extractAuthorId(): AuthorID {"},{"operation":"ADD","number":21,"content":"        val authorLine \u003d lines.removeAt(0).removePrefix(\"Author: \")"},{"operation":"ADD","number":22,"content":"        val authorDetails \u003d authorLine.split(\" \u003c\")"},{"operation":"ADD","number":23,"content":"        return AuthorID(name \u003d authorDetails[0], email \u003d authorDetails[1].removeSuffix(\"\u003e\"))"},{"operation":"ADD","number":24,"content":"    }"},{"operation":"ADD","number":25,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.nio.file.Files"},{"operation":"ADD","number":4,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class LogParser(log: String) {"},{"operation":"ADD","number":7,"content":"    private val lines:List\u003cString\u003e \u003d Files.readAllLines(Paths.get(log)).filter { it.isNotBlank() }"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"    private val COMMIT \u003d \"commit\""},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    init {"},{"operation":"ADD","number":12,"content":"        val commits: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":13,"content":"        var currentCommitLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":14,"content":"        lines.forEach() {"},{"operation":"ADD","number":15,"content":"            if (it.startsWith(COMMIT)) {"},{"operation":"ADD","number":16,"content":"                currentCommitLines \u003d ArrayList()"},{"operation":"ADD","number":17,"content":"                commits.add(currentCommitLines)"},{"operation":"ADD","number":18,"content":"            }"},{"operation":"ADD","number":19,"content":"                currentCommitLines.add(it)"},{"operation":"ADD","number":20,"content":"        }"},{"operation":"ADD","number":21,"content":"        val commitParsers \u003d commits.map { CommitParser(it) }"},{"operation":"ADD","number":22,"content":"                println(commitParsers)"},{"operation":"ADD","number":23,"content":"    }"},{"operation":"ADD","number":24,"content":"}"},{"operation":"ADD","number":25,"content":""},{"operation":"ADD","number":26,"content":"fun main() {"},{"operation":"ADD","number":27,"content":"    LogParser(System.getProperty(\"user.home\") + \"/Documents/dx/testLog.log\")"},{"operation":"ADD","number":28,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false},{"oldFileName":"src/test/java/ProjectTest.kt","newFileName":"src/test/java/ProjectTest.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":50,"content":"    private fun `a random file from a random commit should be correctly built`(): Project {"},{"operation":"ADD","number":50,"content":"    private fun `a random file from a random commit should be correctly built`() {"}]},{"lineChanges":[{"operation":"REMOVE","number":57,"content":"        return project"}]}],"annotatedLines":[],"parentCommitId":"7de22708153e09901950a203024c0507552d4c6f","isBinary":false,"isBlame":false}]},{"id":"19bb9dfb9f743b824a76e55acd2a823c49e9dc96","parentIds":["e4981c4e6c023f9ae08ece8d365d0da4881bb185"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 2, 2019, 7:59:17 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 2, 2019, 7:59:17 PM","message":"added more parsers, hunk parser needs implementation","changes":[{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.ChangeType"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class ChangeParser(private val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":6,"content":"    val oldFileName: String"},{"operation":"ADD","number":7,"content":"    val newFileName: String"},{"operation":"ADD","number":8,"content":"    val changeType: ChangeType"},{"operation":"ADD","number":9,"content":"    val hunkParsers: List\u003cHunkParser\u003e"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    private val oldFileNameLinePrefix \u003d \"--- \""},{"operation":"ADD","number":12,"content":"    private val newFileNameLinePrefix \u003d \"+++ \""},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    init {"},{"operation":"ADD","number":16,"content":"        lines.removeAt(0)"},{"operation":"ADD","number":17,"content":"        changeType \u003d extractChangeType()"},{"operation":"ADD","number":18,"content":"        val (oldFileName, newFileName) \u003d extractFileNames()"},{"operation":"ADD","number":19,"content":""},{"operation":"ADD","number":20,"content":"        this.oldFileName \u003d oldFileName"},{"operation":"ADD","number":21,"content":"        this.newFileName \u003d newFileName"},{"operation":"ADD","number":22,"content":"        hunkParsers \u003d createHunkParsers()"},{"operation":"ADD","number":23,"content":"    }"},{"operation":"ADD","number":24,"content":""},{"operation":"ADD","number":25,"content":"    private fun extractFileNames(): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":26,"content":"        val oldFileNameLineIndex \u003d lines.indexOfFirst { it.startsWith(oldFileNameLinePrefix) }"},{"operation":"ADD","number":27,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"ADD","number":28,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"},{"operation":"ADD","number":29,"content":"    }"},{"operation":"ADD","number":30,"content":""},{"operation":"ADD","number":31,"content":"    private fun extractChangeType(): ChangeType {"},{"operation":"ADD","number":32,"content":"        val changeTypeLine \u003d lines.removeAt(0)"},{"operation":"ADD","number":33,"content":"        return if (changeTypeLine.startsWith(\"new file mode\")) {"},{"operation":"ADD","number":34,"content":"            lines.removeAt(0)"},{"operation":"ADD","number":35,"content":"            ChangeType.ADD"},{"operation":"ADD","number":36,"content":"        } else if (changeTypeLine.startsWith(\"deleted file mode\")) {"},{"operation":"ADD","number":37,"content":"            lines.removeAt(0)"},{"operation":"ADD","number":38,"content":"            ChangeType.DELETE"},{"operation":"ADD","number":39,"content":"        } else if (changeTypeLine.startsWith(\"similarity index\")) {"},{"operation":"ADD","number":40,"content":"            lines.removeAt(0)"},{"operation":"ADD","number":41,"content":"            lines.removeAt(0)"},{"operation":"ADD","number":42,"content":"            lines.removeAt(0)"},{"operation":"ADD","number":43,"content":"            ChangeType.RENAME"},{"operation":"ADD","number":44,"content":"        } else ChangeType.MODIFY"},{"operation":"ADD","number":45,"content":"    }"},{"operation":"ADD","number":46,"content":""},{"operation":"ADD","number":47,"content":"    private fun createHunkParsers(): List\u003cHunkParser\u003e {"},{"operation":"ADD","number":48,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":49,"content":"            val hunks: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":50,"content":"            var currentHunkLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":51,"content":"            lines.forEach() {"},{"operation":"ADD","number":52,"content":"                if (it.startsWith(\"@\")) {"},{"operation":"ADD","number":53,"content":"                    currentHunkLines \u003d ArrayList()"},{"operation":"ADD","number":54,"content":"                    hunks.add(currentHunkLines)"},{"operation":"ADD","number":55,"content":"                }"},{"operation":"ADD","number":56,"content":"                currentHunkLines.add(it)"},{"operation":"ADD","number":57,"content":"            }"},{"operation":"ADD","number":58,"content":"            hunks.map { HunkParser(it) }"},{"operation":"ADD","number":59,"content":"        } else ArrayList()"},{"operation":"ADD","number":60,"content":"    }"},{"operation":"ADD","number":61,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e4981c4e6c023f9ae08ece8d365d0da4881bb185","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":4,"content":"import java.util.*"},{"operation":"ADD","number":5,"content":"import kotlin.collections.ArrayList"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"class CommitParser(val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":7,"content":"class CommitParser(private val lines: MutableList\u003cString\u003e) {"}]},{"lineChanges":[{"operation":"ADD","number":11,"content":"    val date: Date"},{"operation":"ADD","number":12,"content":"    val message: String"},{"operation":"ADD","number":13,"content":"    val changeParsers: List\u003cChangeParser\u003e"}]},{"lineChanges":[{"operation":"ADD","number":18,"content":"        date \u003d extractDate()"},{"operation":"ADD","number":19,"content":"        message \u003d extractMessage()"},{"operation":"ADD","number":20,"content":"        changeParsers \u003d createChangeParsers()"}]},{"lineChanges":[{"operation":"REMOVE","number":25,"content":"}"},{"operation":"ADD","number":33,"content":"\\ No newline at end of file"},{"operation":"ADD","number":34,"content":""},{"operation":"ADD","number":35,"content":"    private fun extractDate(): Date {"},{"operation":"ADD","number":36,"content":"        val dateLine \u003d lines.removeAt(0)"},{"operation":"ADD","number":37,"content":"        return Date(dateLine.removePrefix(\"Date: \"))"},{"operation":"ADD","number":38,"content":"    }"},{"operation":"ADD","number":39,"content":""},{"operation":"ADD","number":40,"content":"    private fun extractMessage(): String {"},{"operation":"ADD","number":41,"content":"        var message: String \u003d \"\""},{"operation":"ADD","number":42,"content":"        while (lines.isNotEmpty() \u0026\u0026 !lines[0].startsWith(\"diff \")) {"},{"operation":"ADD","number":43,"content":"            message +\u003d lines.removeAt(0).trim()"},{"operation":"ADD","number":44,"content":"        }"},{"operation":"ADD","number":45,"content":"        return message"},{"operation":"ADD","number":46,"content":"    }"},{"operation":"ADD","number":47,"content":""},{"operation":"ADD","number":48,"content":"    private fun createChangeParsers(): List\u003cChangeParser\u003e {"},{"operation":"ADD","number":49,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":50,"content":"            val changes: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":51,"content":"            var currentChangeLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":52,"content":"            lines.forEach() {"},{"operation":"ADD","number":53,"content":"                if (it.startsWith(\"diff \")) {"},{"operation":"ADD","number":54,"content":"                    currentChangeLines \u003d ArrayList()"},{"operation":"ADD","number":55,"content":"                    changes.add(currentChangeLines)"},{"operation":"ADD","number":56,"content":"                }"},{"operation":"ADD","number":57,"content":"                currentChangeLines.add(it)"},{"operation":"ADD","number":58,"content":"            }"},{"operation":"ADD","number":59,"content":"            changes.map { ChangeParser(it) }"},{"operation":"ADD","number":60,"content":"        } else ArrayList()"},{"operation":"ADD","number":61,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"e4981c4e6c023f9ae08ece8d365d0da4881bb185","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"class HunkParser(it: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e4981c4e6c023f9ae08ece8d365d0da4881bb185","isBinary":false,"isBlame":false}]},{"id":"9d52a24f7e4601b6494e711a5b05aff9a0499a17","parentIds":["19bb9dfb9f743b824a76e55acd2a823c49e9dc96"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 3, 2019, 11:30:04 AM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 3, 2019, 11:30:04 AM","message":"hunk parser can parse simple commits","changes":[{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"    var parent: Change? \u003d if (file.changes.isEmpty()) null else file.changes.last()"},{"operation":"ADD","number":5,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD || file.changes.isEmpty()) null else getParentChange(commit.parents)"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"//    private fun getParentChange(commit: Commit) : Change?{"},{"operation":"REMOVE","number":8,"content":"//        commit.parents.find{parentCommit -\u003e parentCommit.changes.any { it.file \u003d\u003d file }}"},{"operation":"REMOVE","number":9,"content":"//    }"},{"operation":"ADD","number":7,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e) : Change{"},{"operation":"ADD","number":8,"content":"        return commits.flatMap { it.changes }.find { it.file \u003d\u003d file } ?: getParentChange(commits.flatMap { it.parents })"},{"operation":"ADD","number":9,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"19bb9dfb9f743b824a76e55acd2a823c49e9dc96","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":25,"content":"    private fun extractFileNames(): Pair\u003cString, String\u003e {"},{"operation":"REMOVE","number":26,"content":"        val oldFileNameLineIndex \u003d lines.indexOfFirst { it.startsWith(oldFileNameLinePrefix) }"},{"operation":"REMOVE","number":27,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"REMOVE","number":28,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"},{"operation":"REMOVE","number":29,"content":"    }"},{"operation":"REMOVE","number":30,"content":""}]},{"lineChanges":[{"operation":"ADD","number":41,"content":"    private fun extractFileNames(): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":42,"content":"        val oldFileNameLineIndex \u003d lines.indexOfFirst { it.startsWith(oldFileNameLinePrefix) }"},{"operation":"ADD","number":43,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"ADD","number":44,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"},{"operation":"ADD","number":45,"content":"    }"},{"operation":"ADD","number":46,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":51,"content":"            lines.forEach() {"},{"operation":"ADD","number":51,"content":"            lines.forEach {"}]}],"annotatedLines":[],"parentCommitId":"19bb9dfb9f743b824a76e55acd2a823c49e9dc96","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"class HunkParser(it: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.LineChange"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.model.LineOperation"}]},{"lineChanges":[{"operation":"ADD","number":6,"content":"class HunkParser(val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"    val lineChanges: List\u003cLineChange\u003e"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"    init {"},{"operation":"ADD","number":11,"content":"        val (removePair, addPair) \u003d getRemoveAndAddHunkInfo(lines.removeAt(0))"},{"operation":"ADD","number":12,"content":"        this.lineChanges \u003d extractLineChanges(removePair, addPair)"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    private fun extractLineChanges(removePair: Pair\u003cInt, Int\u003e, addPair: Pair\u003cInt, Int\u003e): List\u003cLineChange\u003e {"},{"operation":"ADD","number":16,"content":"        val (removeStart, removeCount) \u003d removePair"},{"operation":"ADD","number":17,"content":"        val (addStart, addCount) \u003d addPair"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"        val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"},{"operation":"ADD","number":20,"content":"        var diffLineIndex \u003d 0"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"        for (i in removeStart until (removeStart + removeCount))"},{"operation":"ADD","number":23,"content":"            lineChanges.add(LineChange(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"ADD","number":24,"content":"        for (i in addStart until (addStart + addCount))"},{"operation":"ADD","number":25,"content":"            lineChanges.add(LineChange(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"        return lineChanges"},{"operation":"ADD","number":28,"content":"    }"},{"operation":"ADD","number":29,"content":""},{"operation":"ADD","number":30,"content":"    private fun getRemoveAndAddHunkInfo(changeInfoLine: String): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"},{"operation":"ADD","number":31,"content":"        val numbers \u003d changeInfoLine.split(\"@ \")[1].split(\" @\")[0]"},{"operation":"ADD","number":32,"content":"        val removeAndAddInfo \u003d numbers.split(\" \")"},{"operation":"ADD","number":33,"content":"        return Pair(getNumbersPair(removeAndAddInfo[0]), getNumbersPair(removeAndAddInfo[1]))"},{"operation":"ADD","number":34,"content":"    }"},{"operation":"ADD","number":35,"content":""},{"operation":"ADD","number":36,"content":"    private fun getNumbersPair(info: String): Pair\u003cInt, Int\u003e {"},{"operation":"ADD","number":37,"content":"        val numbers \u003d info.substring(1)"},{"operation":"ADD","number":38,"content":"        val lineNumberAndCount \u003d numbers.split(\",\")"},{"operation":"ADD","number":39,"content":"        val lineNumber \u003d Integer.parseInt(lineNumberAndCount[0])"},{"operation":"ADD","number":40,"content":"        val lineCount \u003d if (lineNumberAndCount.size \u003c 2) 1 else Integer.parseInt(lineNumberAndCount[1])"},{"operation":"ADD","number":41,"content":"        return Pair(lineNumber, lineCount)"},{"operation":"ADD","number":42,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"19bb9dfb9f743b824a76e55acd2a823c49e9dc96","isBinary":false,"isBlame":false}]},{"id":"25a14972533a944d2a266a040a0679c62fe5f5a5","parentIds":["9d52a24f7e4601b6494e711a5b05aff9a0499a17"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 3, 2019, 4:32:56 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 3, 2019, 4:32:56 PM","message":"prepared grounds for making a blame parser","changes":[{"oldFileName":"resources/gitSecondLog.sh","newFileName":"resources/gitSecondLog.sh","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"git log -p -M5% -c -U0 \u003e ~/Documents/dx/testLog.log"},{"operation":"ADD","number":3,"content":"\\ No newline at end of file"},{"operation":"ADD","number":4,"content":"if [[\"$2\" \u003d \"-l\"]]"}]}],"annotatedLines":[],"parentCommitId":"9d52a24f7e4601b6494e711a5b05aff9a0499a17","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":6,"content":"import kotlin.collections.HashMap"},{"operation":"ADD","number":7,"content":"import kotlin.collections.HashSet"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    val isMergeCommit: Boolean \u003d lines.removeIf { it.startsWith(\"Merge\") }"},{"operation":"ADD","number":10,"content":"    val isMergeCommit: Boolean"}]},{"lineChanges":[{"operation":"ADD","number":12,"content":"    val parentIds: List\u003cString\u003e"}]},{"lineChanges":[{"operation":"ADD","number":17,"content":"    val filesContentsAtMergeCommit: Map\u003cString, String\u003e"}]},{"lineChanges":[{"operation":"ADD","number":21,"content":"        parentIds \u003d extractParentIds()"},{"operation":"ADD","number":22,"content":"        isMergeCommit \u003d parentIds.size \u003e 1"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"        changeParsers \u003d createChangeParsers()"},{"operation":"ADD","number":26,"content":"        changeParsers \u003d if (isMergeCommit) ArrayList() else createChangeParsers()"},{"operation":"ADD","number":27,"content":"        filesContentsAtMergeCommit \u003d if (isMergeCommit) getFilesContents() else HashMap()"},{"operation":"ADD","number":28,"content":"    }"},{"operation":"ADD","number":29,"content":""},{"operation":"ADD","number":30,"content":"    private fun getFilesContents(): Map\u003cString, String\u003e {"},{"operation":"ADD","number":31,"content":"        val changedFileNames \u003d getChangedFileNames()"},{"operation":"ADD","number":32,"content":"        val filesMap: MutableMap\u003cString, String\u003e \u003d HashMap()"},{"operation":"ADD","number":33,"content":""},{"operation":"ADD","number":34,"content":""},{"operation":"ADD","number":35,"content":""},{"operation":"ADD","number":36,"content":"        return filesMap"},{"operation":"ADD","number":37,"content":"    }"},{"operation":"ADD","number":38,"content":""},{"operation":"ADD","number":39,"content":"    private fun getChangedFileNames(): Set\u003cString\u003e {"},{"operation":"ADD","number":40,"content":"        val changedFileNames: MutableSet\u003cString\u003e \u003d HashSet()"},{"operation":"ADD","number":41,"content":""},{"operation":"ADD","number":42,"content":"        return changedFileNames"}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"        val commitLine \u003d lines.removeAt(0)"},{"operation":"REMOVE","number":25,"content":"        return commitLine.split(\" \")[1]"},{"operation":"ADD","number":46,"content":"        return lines.removeAt(0).removePrefix(\"commit: \")"},{"operation":"ADD","number":47,"content":"    }"},{"operation":"ADD","number":48,"content":""},{"operation":"ADD","number":49,"content":"    private fun extractParentIds(): List\u003cString\u003e {"},{"operation":"ADD","number":50,"content":"        return lines.removeAt(0).removePrefix(\"parents: \").split(\" \")"}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"        val authorLine \u003d lines.removeAt(0).removePrefix(\"Author: \")"},{"operation":"REMOVE","number":30,"content":"        val authorDetails \u003d authorLine.split(\" \u003c\")"},{"operation":"REMOVE","number":31,"content":"        return AuthorID(name \u003d authorDetails[0], email \u003d authorDetails[1].removeSuffix(\"\u003e\"))"},{"operation":"ADD","number":54,"content":"        val authorName \u003d lines.removeAt(0).removePrefix(\"author name: \")"},{"operation":"ADD","number":55,"content":"        val authorEmail \u003d lines.removeAt(0).removePrefix(\"author email: \")"},{"operation":"ADD","number":56,"content":"        return AuthorID(authorEmail, authorName)"}]},{"lineChanges":[{"operation":"REMOVE","number":35,"content":"        val dateLine \u003d lines.removeAt(0)"},{"operation":"REMOVE","number":36,"content":"        return Date(dateLine.removePrefix(\"Date: \"))"},{"operation":"ADD","number":60,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \"))"}]},{"lineChanges":[{"operation":"ADD","number":64,"content":"        lines.removeAt(0)"}]},{"lineChanges":[{"operation":"REMOVE","number":42,"content":"            message +\u003d lines.removeAt(0).trim()"},{"operation":"ADD","number":67,"content":"            message \u003d \"$message\\n${lines.removeAt(0)}\""}]},{"lineChanges":[{"operation":"REMOVE","number":44,"content":"        return message"},{"operation":"ADD","number":69,"content":"        return message.trim()"}]}],"annotatedLines":[],"parentCommitId":"9d52a24f7e4601b6494e711a5b05aff9a0499a17","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/GitInfoGatherer.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.nio.file.Path"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class GitInfoGatherer(val path: Path) {"},{"operation":"ADD","number":6,"content":"    private val gitLogCommand \u003d \"git log -p -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %cD%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":7,"content":"    private val gitShowChangedFilesCommand \u003d \"git show --name-only --oneline \""},{"operation":"ADD","number":8,"content":"    private val gitBlameCommand \u003d \"git blame -p \""},{"operation":"ADD","number":9,"content":"    val processBuilder \u003d ProcessBuilder()"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    init {"},{"operation":"ADD","number":12,"content":"        processBuilder.directory(path.toFile())"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    fun getLogs(): List\u003cString\u003e {"},{"operation":"ADD","number":16,"content":"        processBuilder.command(gitLogCommand)"},{"operation":"ADD","number":17,"content":"        val process \u003d processBuilder.start()"},{"operation":"ADD","number":18,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"ADD","number":19,"content":"        return if (exitVal \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":20,"content":"    }"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"    fun getChangedFilesForRevision(revision: String): List\u003cString\u003e {"},{"operation":"ADD","number":23,"content":""},{"operation":"ADD","number":24,"content":"        processBuilder.command(gitShowChangedFilesCommand + revision)"},{"operation":"ADD","number":25,"content":"        val process \u003d processBuilder.start()"},{"operation":"ADD","number":26,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"ADD","number":27,"content":"        return if (exitVal \u003d\u003d 0) prepareCommandOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":28,"content":"    }"},{"operation":"ADD","number":29,"content":""},{"operation":"ADD","number":30,"content":"    private fun prepareCommandOutput(process: Process): List\u003cString\u003e {"},{"operation":"ADD","number":31,"content":"        val output \u003d process.inputStream.readAllBytes().toString().split(\"\\n\").toMutableList()"},{"operation":"ADD","number":32,"content":"        output.removeAt(0)"},{"operation":"ADD","number":33,"content":"        return output.filter { it.isNotBlank() }"},{"operation":"ADD","number":34,"content":"    }"},{"operation":"ADD","number":35,"content":""},{"operation":"ADD","number":36,"content":"    fun blame(revision: String, file: String): List\u003cString\u003e {"},{"operation":"ADD","number":37,"content":"        processBuilder.command(gitBlameCommand + \"$file $revision\")"},{"operation":"ADD","number":38,"content":"        val process \u003d processBuilder.start()"},{"operation":"ADD","number":39,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"ADD","number":40,"content":"        return if (exitVal \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":41,"content":"    }"},{"operation":"ADD","number":42,"content":""},{"operation":"ADD","number":43,"content":"    private fun splitOutput(process: Process) \u003d process.inputStream.readAllBytes().toString().split(\"\\n\")"},{"operation":"ADD","number":44,"content":""},{"operation":"ADD","number":45,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"9d52a24f7e4601b6494e711a5b05aff9a0499a17","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    private val lines:List\u003cString\u003e \u003d Files.readAllLines(Paths.get(log)).filter { it.isNotBlank() }"},{"operation":"REMOVE","number":8,"content":""},{"operation":"ADD","number":7,"content":"    private val lines:List\u003cString\u003e \u003d Files.readAllLines(Paths.get(log))"}]},{"lineChanges":[{"operation":"ADD","number":10,"content":"    val commitParsers: List\u003cCommitParser\u003e"},{"operation":"ADD","number":11,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":21,"content":"        val commitParsers \u003d commits.map { CommitParser(it) }"},{"operation":"ADD","number":22,"content":"        commitParsers \u003d commits.map { CommitParser(it) }"}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"    LogParser(System.getProperty(\"user.home\") + \"/Documents/dx/testLog.log\")"},{"operation":"ADD","number":28,"content":"    val commitParsers \u003d LogParser(System.getProperty(\"user.home\") + \"/Documents/dx/testLog.log\").commitParsers"},{"operation":"ADD","number":29,"content":"    println(commitParsers)"}]}],"annotatedLines":[],"parentCommitId":"9d52a24f7e4601b6494e711a5b05aff9a0499a17","isBinary":false,"isBlame":false}]},{"id":"30fc6a33255202afef70a18410cf93e085c32d3e","parentIds":["25a14972533a944d2a266a040a0679c62fe5f5a5"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 3, 2019, 10:44:49 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 3, 2019, 10:44:49 PM","message":"abstract parsers for commit and change, ready to implement blame parser","changes":[{"oldFileName":"dev/null","newFileName":"resources/git","type":"ADD","hunks":[],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":true,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/dto/AnnotatedLineDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class AnnotatedLineDTO(val commitId: String, val authorID: AuthorID, val number: Int, val content: String)"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/dto/ChangeDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.ChangeType"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class ChangeDTO(val oldFileName: String,"},{"operation":"ADD","number":6,"content":"                val newFileName: String,"},{"operation":"ADD","number":7,"content":"                val changeType: ChangeType,"},{"operation":"ADD","number":8,"content":"                val hunks: List\u003cHunkDTO\u003e,"},{"operation":"ADD","number":9,"content":"                val annotatedAnnotatedLines: List\u003cAnnotatedLineDTO\u003e)"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/dto/CommitDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":4,"content":"import java.util.*"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class CommitDTO(val commitId: String,"},{"operation":"ADD","number":7,"content":"                val parentIds: List\u003cString\u003e,"},{"operation":"ADD","number":8,"content":"                val authorId: AuthorID,"},{"operation":"ADD","number":9,"content":"                val date: Date,"},{"operation":"ADD","number":10,"content":"                val message: String,"},{"operation":"ADD","number":11,"content":"                val changes: List\u003cChangeDTO\u003e) {"},{"operation":"ADD","number":12,"content":"    val isMergeCommit: Boolean \u003d parentIds.size \u003e 1"},{"operation":"ADD","number":13,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/dto/HunkDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"data class HunkDTO(val lineChanges: List\u003cLineChangeDTO\u003e)"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/dto/LineChangeDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.LineOperation"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"data class LineChangeDTO(val operation: LineOperation, val lineNumber: Int, val content: String)"},{"operation":"ADD","number":6,"content":""}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/BlameParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class BlameParser(private val blame: List\u003cString\u003e, lines: MutableList\u003cString\u003e): ChangeParser(lines) {"},{"operation":"ADD","number":7,"content":"    override fun extractHunks(): List\u003cHunkDTO\u003e {"},{"operation":"ADD","number":8,"content":"        return ArrayList()"},{"operation":"ADD","number":9,"content":"    }"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    override fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"ADD","number":12,"content":"        TODO(\"implement extract annotated lines from blame\")"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.dto.HunkDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"class ChangeParser(private val lines: MutableList\u003cString\u003e) {"},{"operation":"REMOVE","number":6,"content":"    val oldFileName: String"},{"operation":"REMOVE","number":7,"content":"    val newFileName: String"},{"operation":"REMOVE","number":8,"content":"    val changeType: ChangeType"},{"operation":"REMOVE","number":9,"content":"    val hunkParsers: List\u003cHunkParser\u003e"},{"operation":"ADD","number":8,"content":"abstract class ChangeParser(protected val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":9,"content":"    private val oldFileNameLinePrefix \u003d \"--- a\""},{"operation":"ADD","number":10,"content":"    private val newFileNameLinePrefix \u003d \"+++ b\""}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    private val oldFileNameLinePrefix \u003d \"--- \""},{"operation":"REMOVE","number":12,"content":"    private val newFileNameLinePrefix \u003d \"+++ \""},{"operation":"ADD","number":12,"content":"    lateinit var change: ChangeDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":""},{"operation":"REMOVE","number":15,"content":"    init {"},{"operation":"ADD","number":14,"content":"    fun parse(): ChangeParser {"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"        changeType \u003d extractChangeType()"}]},{"lineChanges":[{"operation":"ADD","number":17,"content":"        change \u003d ChangeDTO("},{"operation":"ADD","number":18,"content":"                changeType \u003d extractChangeType(),"},{"operation":"ADD","number":19,"content":""},{"operation":"ADD","number":20,"content":"                oldFileName \u003d oldFileName,"},{"operation":"ADD","number":21,"content":"                newFileName \u003d newFileName,"},{"operation":"ADD","number":22,"content":"                hunks \u003d extractHunks(),"},{"operation":"ADD","number":23,"content":"                annotatedAnnotatedLines \u003d extractAnnotatedLines())"},{"operation":"ADD","number":24,"content":"        return this"},{"operation":"ADD","number":25,"content":"    }"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"        this.oldFileName \u003d oldFileName"},{"operation":"REMOVE","number":21,"content":"        this.newFileName \u003d newFileName"},{"operation":"REMOVE","number":22,"content":"        hunkParsers \u003d createHunkParsers()"},{"operation":"ADD","number":27,"content":"    abstract fun extractHunks(): List\u003cHunkDTO\u003e"},{"operation":"ADD","number":28,"content":""},{"operation":"ADD","number":29,"content":"    abstract fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e"},{"operation":"ADD","number":30,"content":""},{"operation":"ADD","number":31,"content":"    protected fun getHunks(): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":32,"content":"        val hunks: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":33,"content":"        var currentHunkLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":34,"content":"        lines.forEach {"},{"operation":"ADD","number":35,"content":"            if (it.startsWith(\"@\")) {"},{"operation":"ADD","number":36,"content":"                currentHunkLines \u003d ArrayList()"},{"operation":"ADD","number":37,"content":"                hunks.add(currentHunkLines)"},{"operation":"ADD","number":38,"content":"            }"},{"operation":"ADD","number":39,"content":"            currentHunkLines.add(it)"},{"operation":"ADD","number":40,"content":"        }"},{"operation":"ADD","number":41,"content":"        return hunks"}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"        return if (changeTypeLine.startsWith(\"new file mode\")) {"},{"operation":"REMOVE","number":28,"content":"            lines.removeAt(0)"},{"operation":"REMOVE","number":29,"content":"            ChangeType.ADD"},{"operation":"REMOVE","number":30,"content":"        } else if (changeTypeLine.startsWith(\"deleted file mode\")) {"},{"operation":"REMOVE","number":31,"content":"            lines.removeAt(0)"},{"operation":"REMOVE","number":32,"content":"            ChangeType.DELETE"},{"operation":"REMOVE","number":33,"content":"        } else if (changeTypeLine.startsWith(\"similarity index\")) {"},{"operation":"REMOVE","number":34,"content":"            lines.removeAt(0)"},{"operation":"REMOVE","number":35,"content":"            lines.removeAt(0)"},{"operation":"REMOVE","number":36,"content":"            lines.removeAt(0)"},{"operation":"REMOVE","number":37,"content":"            ChangeType.RENAME"},{"operation":"REMOVE","number":38,"content":"        } else ChangeType.MODIFY"},{"operation":"ADD","number":46,"content":"        return when {"},{"operation":"ADD","number":47,"content":"            changeTypeLine.startsWith(\"new file mode\") -\u003e {"},{"operation":"ADD","number":48,"content":"                lines.removeAt(0)"},{"operation":"ADD","number":49,"content":"                ChangeType.ADD"},{"operation":"ADD","number":50,"content":"            }"},{"operation":"ADD","number":51,"content":"            changeTypeLine.startsWith(\"deleted file mode\") -\u003e {"},{"operation":"ADD","number":52,"content":"                lines.removeAt(0)"},{"operation":"ADD","number":53,"content":"                ChangeType.DELETE"},{"operation":"ADD","number":54,"content":"            }"},{"operation":"ADD","number":55,"content":"            changeTypeLine.startsWith(\"similarity index\") -\u003e {"},{"operation":"ADD","number":56,"content":"                lines.removeAt(0)"},{"operation":"ADD","number":57,"content":"                lines.removeAt(0)"},{"operation":"ADD","number":58,"content":"                lines.removeAt(0)"},{"operation":"ADD","number":59,"content":"                ChangeType.RENAME"},{"operation":"ADD","number":60,"content":"            }"},{"operation":"ADD","number":61,"content":"            else -\u003e ChangeType.MODIFY"},{"operation":"ADD","number":62,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":43,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"REMOVE","number":44,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"},{"operation":"REMOVE","number":45,"content":"    }"},{"operation":"REMOVE","number":46,"content":""},{"operation":"REMOVE","number":47,"content":"    private fun createHunkParsers(): List\u003cHunkParser\u003e {"},{"operation":"REMOVE","number":48,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":49,"content":"            val hunks: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":50,"content":"            var currentHunkLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":51,"content":"            lines.forEach {"},{"operation":"REMOVE","number":52,"content":"                if (it.startsWith(\"@\")) {"},{"operation":"REMOVE","number":53,"content":"                    currentHunkLines \u003d ArrayList()"},{"operation":"REMOVE","number":54,"content":"                    hunks.add(currentHunkLines)"},{"operation":"REMOVE","number":55,"content":"                }"},{"operation":"REMOVE","number":56,"content":"                currentHunkLines.add(it)"},{"operation":"REMOVE","number":57,"content":"            }"},{"operation":"REMOVE","number":58,"content":"            hunks.map { HunkParser(it) }"},{"operation":"REMOVE","number":59,"content":"        } else ArrayList()"},{"operation":"ADD","number":67,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix),"},{"operation":"ADD","number":68,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix))"}]},{"lineChanges":[{"operation":"REMOVE","number":61,"content":"}"},{"operation":"ADD","number":70,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.dto.CommitDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import kotlin.collections.ArrayList"},{"operation":"REMOVE","number":6,"content":"import kotlin.collections.HashMap"},{"operation":"REMOVE","number":7,"content":"import kotlin.collections.HashSet"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"class CommitParser(private val lines: MutableList\u003cString\u003e) {"},{"operation":"REMOVE","number":10,"content":"    val isMergeCommit: Boolean"},{"operation":"REMOVE","number":11,"content":"    val commitId: String"},{"operation":"REMOVE","number":12,"content":"    val parentIds: List\u003cString\u003e"},{"operation":"REMOVE","number":13,"content":"    val authorId: AuthorID"},{"operation":"REMOVE","number":14,"content":"    val date: Date"},{"operation":"REMOVE","number":15,"content":"    val message: String"},{"operation":"REMOVE","number":16,"content":"    val changeParsers: List\u003cChangeParser\u003e"},{"operation":"REMOVE","number":17,"content":"    val filesContentsAtMergeCommit: Map\u003cString, String\u003e"},{"operation":"REMOVE","number":18,"content":""},{"operation":"REMOVE","number":19,"content":"    init {"},{"operation":"REMOVE","number":20,"content":"        commitId \u003d extractCommitId()"},{"operation":"REMOVE","number":21,"content":"        parentIds \u003d extractParentIds()"},{"operation":"REMOVE","number":22,"content":"        isMergeCommit \u003d parentIds.size \u003e 1"},{"operation":"REMOVE","number":23,"content":"        authorId \u003d extractAuthorId()"},{"operation":"REMOVE","number":24,"content":"        date \u003d extractDate()"},{"operation":"REMOVE","number":25,"content":"        message \u003d extractMessage()"},{"operation":"REMOVE","number":26,"content":"        changeParsers \u003d if (isMergeCommit) ArrayList() else createChangeParsers()"},{"operation":"REMOVE","number":27,"content":"        filesContentsAtMergeCommit \u003d if (isMergeCommit) getFilesContents() else HashMap()"},{"operation":"REMOVE","number":28,"content":"    }"},{"operation":"REMOVE","number":29,"content":""},{"operation":"REMOVE","number":30,"content":"    private fun getFilesContents(): Map\u003cString, String\u003e {"},{"operation":"REMOVE","number":31,"content":"        val changedFileNames \u003d getChangedFileNames()"},{"operation":"REMOVE","number":32,"content":"        val filesMap: MutableMap\u003cString, String\u003e \u003d HashMap()"},{"operation":"ADD","number":8,"content":"abstract class CommitParser(protected val lines: MutableList\u003cString\u003e) {"},{"operation":"ADD","number":9,"content":"    private var parsed: Boolean \u003d false"},{"operation":"ADD","number":10,"content":"    protected val commitId \u003d extractCommitId()"}]},{"lineChanges":[{"operation":"ADD","number":12,"content":"    lateinit var commit: CommitDTO"},{"operation":"ADD","number":13,"content":"        private set"}]},{"lineChanges":[{"operation":"REMOVE","number":35,"content":""},{"operation":"REMOVE","number":36,"content":"        return filesMap"},{"operation":"ADD","number":15,"content":"    fun parse(): CommitParser {"},{"operation":"ADD","number":16,"content":"        if (!parsed) {"},{"operation":"ADD","number":17,"content":"            commit \u003d CommitDTO("},{"operation":"ADD","number":18,"content":"                    commitId \u003d commitId,"},{"operation":"ADD","number":19,"content":"                    parentIds \u003d extractParentIds(),"},{"operation":"ADD","number":20,"content":"                    authorId \u003d extractAuthorId(),"},{"operation":"ADD","number":21,"content":"                    date \u003d extractDate(),"},{"operation":"ADD","number":22,"content":"                    message \u003d extractMessage(),"},{"operation":"ADD","number":23,"content":"                    changes \u003d extractChanges())"},{"operation":"ADD","number":24,"content":"            parsed \u003d true"},{"operation":"ADD","number":25,"content":"        }"},{"operation":"ADD","number":26,"content":"        return this"}]},{"lineChanges":[{"operation":"REMOVE","number":39,"content":"    private fun getChangedFileNames(): Set\u003cString\u003e {"},{"operation":"REMOVE","number":40,"content":"        val changedFileNames: MutableSet\u003cString\u003e \u003d HashSet()"},{"operation":"ADD","number":29,"content":"    abstract fun extractChanges(): List\u003cChangeDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":42,"content":"        return changedFileNames"},{"operation":"ADD","number":31,"content":"    protected fun getChanges(): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":32,"content":"        val changes: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":33,"content":"        var currentChangeLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":34,"content":"        lines.forEach {"},{"operation":"ADD","number":35,"content":"            if (it.startsWith(\"diff \")) {"},{"operation":"ADD","number":36,"content":"                currentChangeLines \u003d ArrayList()"},{"operation":"ADD","number":37,"content":"                changes.add(currentChangeLines)"},{"operation":"ADD","number":38,"content":"            }"},{"operation":"ADD","number":39,"content":"            currentChangeLines.add(it)"},{"operation":"ADD","number":40,"content":"        }"},{"operation":"ADD","number":41,"content":"        return changes"}]},{"lineChanges":[{"operation":"REMOVE","number":71,"content":""},{"operation":"REMOVE","number":72,"content":"    private fun createChangeParsers(): List\u003cChangeParser\u003e {"},{"operation":"REMOVE","number":73,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":74,"content":"            val changes: MutableList\u003cMutableList\u003cString\u003e\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":75,"content":"            var currentChangeLines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":76,"content":"            lines.forEach() {"},{"operation":"REMOVE","number":77,"content":"                if (it.startsWith(\"diff \")) {"},{"operation":"REMOVE","number":78,"content":"                    currentChangeLines \u003d ArrayList()"},{"operation":"REMOVE","number":79,"content":"                    changes.add(currentChangeLines)"},{"operation":"REMOVE","number":80,"content":"                }"},{"operation":"REMOVE","number":81,"content":"                currentChangeLines.add(it)"},{"operation":"REMOVE","number":82,"content":"            }"},{"operation":"REMOVE","number":83,"content":"            changes.map { ChangeParser(it) }"},{"operation":"REMOVE","number":84,"content":"        } else ArrayList()"},{"operation":"REMOVE","number":85,"content":"    }"},{"operation":"REMOVE","number":86,"content":"}"},{"operation":"ADD","number":70,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParserFactory.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"class CommitParserFactory {"},{"operation":"ADD","number":4,"content":"    companion object {"},{"operation":"ADD","number":5,"content":"        private val parents \u003d \"parents: \""},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"        fun create(lines: MutableList\u003cString\u003e, gitInfoGatherer: GitInfoGatherer): CommitParser {"},{"operation":"ADD","number":8,"content":"            return if (getParents(lines).size \u003e 1) MergeCommitParser(lines, gitInfoGatherer) else SimpleCommitParser(ArrayList(lines))"},{"operation":"ADD","number":9,"content":"        }"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"        private fun getParents(lines: List\u003cString\u003e) \u003d"},{"operation":"ADD","number":12,"content":"                lines.find { it.startsWith(parents) }!!.removePrefix(parents).split(\" \")"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/GitInfoGatherer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/GitInfoGatherer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"class GitInfoGatherer(val path: Path) {"},{"operation":"REMOVE","number":6,"content":"    private val gitLogCommand \u003d \"git log -p -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %cD%nmessage:%n%s%n%b\\\"\""},{"operation":"REMOVE","number":7,"content":"    private val gitShowChangedFilesCommand \u003d \"git show --name-only --oneline \""},{"operation":"REMOVE","number":8,"content":"    private val gitBlameCommand \u003d \"git blame -p \""},{"operation":"REMOVE","number":9,"content":"    val processBuilder \u003d ProcessBuilder()"},{"operation":"ADD","number":5,"content":"class GitInfoGatherer(private val path: Path) {"},{"operation":"ADD","number":6,"content":"    private val git \u003d \"git\""},{"operation":"ADD","number":7,"content":"    private val gitLogCommand \u003d \"$git log -p -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":8,"content":"    private val gitShowChangedFilesCommand \u003d \"$git show --name-only --oneline\""},{"operation":"ADD","number":9,"content":"    private val gitBlameCommand \u003d \"$git blame -p\""},{"operation":"ADD","number":10,"content":"    private val processBuilder \u003d ProcessBuilder()"}]},{"lineChanges":[{"operation":"REMOVE","number":16,"content":"        processBuilder.command(gitLogCommand)"},{"operation":"ADD","number":17,"content":"        processBuilder.command(\"bash\", \"-c\", gitLogCommand)"}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"        processBuilder.command(gitShowChangedFilesCommand + revision)"},{"operation":"ADD","number":25,"content":"        processBuilder.command(\"bash\", \"-c\", \"$gitShowChangedFilesCommand $revision\")"}]},{"lineChanges":[{"operation":"REMOVE","number":31,"content":"        val output \u003d process.inputStream.readAllBytes().toString().split(\"\\n\").toMutableList()"},{"operation":"ADD","number":32,"content":"        val output \u003d String(process.inputStream.readAllBytes()).split(\"\\n\").toMutableList()"}]},{"lineChanges":[{"operation":"REMOVE","number":37,"content":"        processBuilder.command(gitBlameCommand + \"$file $revision\")"},{"operation":"ADD","number":38,"content":"        processBuilder.command(\"bash\", \"-c\", \"$gitBlameCommand $file $revision\")"}]},{"lineChanges":[{"operation":"REMOVE","number":43,"content":"    private fun splitOutput(process: Process) \u003d process.inputStream.readAllBytes().toString().split(\"\\n\")"},{"operation":"ADD","number":44,"content":"    private fun splitOutput(process: Process) \u003d String(process.inputStream.readAllBytes()).split(\"\\n\")"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.LineChange"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.dto.LineChangeDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    val lineChanges: List\u003cLineChange\u003e"},{"operation":"ADD","number":9,"content":"    val hunk: HunkDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"        this.lineChanges \u003d extractLineChanges(removePair, addPair)"},{"operation":"ADD","number":13,"content":"        hunk \u003d HunkDTO("},{"operation":"ADD","number":14,"content":"                lineChanges \u003d extractLineChanges(removePair, addPair))"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"    private fun extractLineChanges(removePair: Pair\u003cInt, Int\u003e, addPair: Pair\u003cInt, Int\u003e): List\u003cLineChange\u003e {"},{"operation":"ADD","number":17,"content":"    private fun extractLineChanges(removePair: Pair\u003cInt, Int\u003e, addPair: Pair\u003cInt, Int\u003e): List\u003cLineChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":19,"content":"        val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"},{"operation":"ADD","number":21,"content":"        val lineChanges: MutableList\u003cLineChangeDTO\u003e \u003d ArrayList()"}]},{"lineChanges":[{"operation":"REMOVE","number":23,"content":"            lineChanges.add(LineChange(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"ADD","number":25,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"}]},{"lineChanges":[{"operation":"REMOVE","number":25,"content":"            lineChanges.add(LineChange(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"ADD","number":27,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import java.nio.file.Files"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.CommitDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"class LogParser(log: String) {"},{"operation":"REMOVE","number":7,"content":"    private val lines:List\u003cString\u003e \u003d Files.readAllLines(Paths.get(log))"},{"operation":"ADD","number":6,"content":"class LogParser(gitInfoGatherer: GitInfoGatherer) {"},{"operation":"ADD","number":7,"content":"    private val lines \u003d gitInfoGatherer.getLogs()"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    val commitParsers: List\u003cCommitParser\u003e"},{"operation":"ADD","number":10,"content":"    val commits: List\u003cCommitDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"        lines.forEach() {"},{"operation":"ADD","number":15,"content":"        lines.forEach {"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"                currentCommitLines.add(it)"},{"operation":"ADD","number":20,"content":"            currentCommitLines.add(it)"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"        commitParsers \u003d commits.map { CommitParser(it) }"},{"operation":"REMOVE","number":23,"content":"                println(commitParsers)"},{"operation":"ADD","number":22,"content":"        this.commits \u003d commits.map { CommitParserFactory.create(it, gitInfoGatherer).parse().commit }"}]},{"lineChanges":[{"operation":"REMOVE","number":28,"content":"    val commitParsers \u003d LogParser(System.getProperty(\"user.home\") + \"/Documents/dx/testLog.log\").commitParsers"},{"operation":"REMOVE","number":29,"content":"    println(commitParsers)"},{"operation":"ADD","number":27,"content":""},{"operation":"ADD","number":28,"content":"    val process \u003d ProcessBuilder(\"bash\", \"-c\", \"git --version\").start()"},{"operation":"ADD","number":29,"content":"    process.waitFor()"},{"operation":"ADD","number":30,"content":"    String(process.inputStream.readAllBytes()).also { println(it) }"},{"operation":"ADD","number":31,"content":""},{"operation":"ADD","number":32,"content":"    val gitInfoGatherer \u003d GitInfoGatherer(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"ADD","number":33,"content":"    val commits \u003d LogParser(gitInfoGatherer).commits"},{"operation":"ADD","number":34,"content":"    println(commits)"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/MergeCommitParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":""},{"operation":"ADD","number":5,"content":"class MergeCommitParser(lines: MutableList\u003cString\u003e, private val gitInfoGatherer: GitInfoGatherer) : CommitParser(lines) {"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    override fun extractChanges(): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":8,"content":"        val changes \u003d getChanges()"},{"operation":"ADD","number":9,"content":"        val blames \u003d changes.map { gitInfoGatherer.blame(commitId, extractNewFileName(it)) }"},{"operation":"ADD","number":10,"content":"        return blames.mapIndexed { index, blame -\u003e BlameParser(blame, changes[index]).parse().change }"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    private fun extractNewFileName(diff: MutableList\u003cString\u003e): String {"},{"operation":"ADD","number":14,"content":"        val newFileNameLinePrefix \u003d \"+++ b/\""},{"operation":"ADD","number":15,"content":"        val newNameLineIndex \u003d diff.indexOfFirst { it.startsWith(newFileNameLinePrefix) }"},{"operation":"ADD","number":16,"content":"        return lines[newNameLineIndex].removePrefix(newFileNameLinePrefix)"},{"operation":"ADD","number":17,"content":"    }"},{"operation":"ADD","number":18,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/SimpleChangeParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitsecond.model.ChangeType"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"class SimpleChangeParser(lines: MutableList\u003cString\u003e): ChangeParser(lines) {"},{"operation":"ADD","number":9,"content":"    override fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"ADD","number":10,"content":"        return ArrayList()"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    override fun extractHunks(): List\u003cHunkDTO\u003e {"},{"operation":"ADD","number":14,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":15,"content":"            getHunks().map { HunkParser(it).hunk }"},{"operation":"ADD","number":16,"content":"        } else ArrayList()"},{"operation":"ADD","number":17,"content":"    }"},{"operation":"ADD","number":18,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitsecond/parsers/SimpleCommitParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import kotlin.collections.ArrayList"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class SimpleCommitParser(lines: MutableList\u003cString\u003e) : CommitParser(lines) {"},{"operation":"ADD","number":7,"content":"    override fun extractChanges(): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":8,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":9,"content":"            getChanges().map { SimpleChangeParser(it).parse().change }"},{"operation":"ADD","number":10,"content":"        } else ArrayList()"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"25a14972533a944d2a266a040a0679c62fe5f5a5","isBinary":false,"isBlame":false}]},{"id":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","parentIds":["30fc6a33255202afef70a18410cf93e085c32d3e"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 3, 2019, 10:45:38 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 3, 2019, 10:45:38 PM","message":"removed git","changes":[{"oldFileName":"resources/git","newFileName":"dev/null","type":"DELETE","hunks":[],"annotatedLines":[],"parentCommitId":"30fc6a33255202afef70a18410cf93e085c32d3e","isBinary":true,"isBlame":false}]},{"id":"df22270bec3322ee418c191da2f11a90f867f384","parentIds":["b3fdc7bf3eecf162cde457219969eb47d7db2b66"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 4, 2019, 3:06:55 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 4, 2019, 3:06:55 PM","message":"refactoring and bug fixing","changes":[{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/dto/AnnotatedLineDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"class AnnotatedLineDTO(val commitId: String, val number: Int, val content: String)"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/dto/ChangeDTO.kt","newFileName":"src/main/java/org/dxworks/dto/ChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.dto"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/dto/CommitDTO.kt","newFileName":"src/main/java/org/dxworks/dto/CommitDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.dto"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/dto/HunkDTO.kt","newFileName":"src/main/java/org/dxworks/dto/HunkDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.dto"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/dto/LineChangeDTO.kt","newFileName":"src/main/java/org/dxworks/dto/LineChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.dto"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/GitInfoGatherer.kt","newFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector"}]},{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.parsers.LogParser"}]},{"lineChanges":[{"operation":"ADD","number":5,"content":"import java.nio.file.Paths"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"class GitInfoGatherer(private val path: Path) {"},{"operation":"ADD","number":7,"content":"class GitClient(path: Path) {"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    private val gitLogCommand \u003d \"$git log -p -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"REMOVE","number":8,"content":"    private val gitShowChangedFilesCommand \u003d \"$git show --name-only --oneline\""},{"operation":"REMOVE","number":9,"content":"    private val gitBlameCommand \u003d \"$git blame -p\""},{"operation":"ADD","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":10,"content":"    private val gitBlameCommand \u003d \"$git blame -l\""}]},{"lineChanges":[{"operation":"REMOVE","number":19,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"REMOVE","number":20,"content":"        return if (exitVal \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"REMOVE","number":21,"content":"    }"},{"operation":"REMOVE","number":22,"content":""},{"operation":"REMOVE","number":23,"content":"    fun getChangedFilesForRevision(revision: String): List\u003cString\u003e {"},{"operation":"REMOVE","number":24,"content":""},{"operation":"REMOVE","number":25,"content":"        processBuilder.command(\"bash\", \"-c\", \"$gitShowChangedFilesCommand $revision\")"},{"operation":"REMOVE","number":26,"content":"        val process \u003d processBuilder.start()"},{"operation":"REMOVE","number":27,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"REMOVE","number":28,"content":"        return if (exitVal \u003d\u003d 0) prepareCommandOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"REMOVE","number":29,"content":"    }"},{"operation":"REMOVE","number":30,"content":""},{"operation":"REMOVE","number":31,"content":"    private fun prepareCommandOutput(process: Process): List\u003cString\u003e {"},{"operation":"REMOVE","number":32,"content":"        val output \u003d String(process.inputStream.readAllBytes()).split(\"\\n\").toMutableList()"},{"operation":"REMOVE","number":33,"content":"        output.removeAt(0)"},{"operation":"REMOVE","number":34,"content":"        return output.filter { it.isNotBlank() }"},{"operation":"ADD","number":20,"content":"        return if (process.waitFor() \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"}]},{"lineChanges":[{"operation":"REMOVE","number":40,"content":"        val exitVal \u003d process.waitFor()"},{"operation":"REMOVE","number":41,"content":"        return if (exitVal \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":26,"content":"        return if (process.waitFor() \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"}]},{"lineChanges":[{"operation":"ADD","number":30,"content":"}"},{"operation":"ADD","number":31,"content":""},{"operation":"ADD","number":32,"content":"fun main() {"},{"operation":"ADD","number":33,"content":""},{"operation":"ADD","number":34,"content":"    val process \u003d ProcessBuilder(\"bash\", \"-c\", \"git --version\").start()"},{"operation":"ADD","number":35,"content":"    if (process.waitFor() \u003d\u003d 0)"},{"operation":"ADD","number":36,"content":"        String(process.inputStream.readAllBytes()).also { println(it) }"},{"operation":"ADD","number":37,"content":"    else"},{"operation":"ADD","number":38,"content":"        throw IllegalStateException(\"This program requires a git client\")"}]},{"lineChanges":[{"operation":"ADD","number":40,"content":"    val gitClient \u003d GitClient(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"ADD","number":41,"content":"    val commits \u003d LogParser(gitClient).commits"},{"operation":"ADD","number":42,"content":"    println(commits)"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParserFactory.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/CommitParserFactory.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.impl.MergeCommitParser"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitinspector.parsers.impl.SimpleCommitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"        private val parents \u003d \"parents: \""},{"operation":"ADD","number":10,"content":"        private const val parents \u003d \"parents: \""}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"        fun create(lines: MutableList\u003cString\u003e, gitInfoGatherer: GitInfoGatherer): CommitParser {"},{"operation":"REMOVE","number":8,"content":"            return if (getParents(lines).size \u003e 1) MergeCommitParser(lines, gitInfoGatherer) else SimpleCommitParser(ArrayList(lines))"},{"operation":"ADD","number":12,"content":"        fun create(lines: MutableList\u003cString\u003e, gitClient: GitClient): CommitParser {"},{"operation":"ADD","number":13,"content":"            return if (getParents(lines).size \u003e 1) MergeCommitParser(gitClient) else SimpleCommitParser()"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/GitParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"interface GitParser\u003cT\u003e {"},{"operation":"ADD","number":4,"content":"    fun parse(lines: MutableList\u003cString\u003e): T"},{"operation":"ADD","number":5,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.CommitDTO"},{"operation":"REMOVE","number":4,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.CommitDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.GitClient"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"class LogParser(gitInfoGatherer: GitInfoGatherer) {"},{"operation":"REMOVE","number":7,"content":"    private val lines \u003d gitInfoGatherer.getLogs()"},{"operation":"REMOVE","number":8,"content":"    private val COMMIT \u003d \"commit\""},{"operation":"ADD","number":6,"content":"class LogParser(gitClient: GitClient) {"},{"operation":"ADD","number":7,"content":"    private val commit \u003d \"commit: \""},{"operation":"ADD","number":8,"content":"    private val lines \u003d gitClient.getLogs()"}]},{"lineChanges":[{"operation":"REMOVE","number":16,"content":"            if (it.startsWith(COMMIT)) {"},{"operation":"ADD","number":16,"content":"            if (it.startsWith(commit)) {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"        this.commits \u003d commits.map { CommitParserFactory.create(it, gitInfoGatherer).parse().commit }"},{"operation":"ADD","number":22,"content":"        this.commits \u003d commits.map { CommitParserFactory.create(it, gitClient).parse(it) }"}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"}"},{"operation":"REMOVE","number":25,"content":""},{"operation":"REMOVE","number":26,"content":"fun main() {"},{"operation":"REMOVE","number":27,"content":""},{"operation":"REMOVE","number":28,"content":"    val process \u003d ProcessBuilder(\"bash\", \"-c\", \"git --version\").start()"},{"operation":"REMOVE","number":29,"content":"    process.waitFor()"},{"operation":"REMOVE","number":30,"content":"    String(process.inputStream.readAllBytes()).also { println(it) }"},{"operation":"REMOVE","number":31,"content":""},{"operation":"REMOVE","number":32,"content":"    val gitInfoGatherer \u003d GitInfoGatherer(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"REMOVE","number":33,"content":"    val commits \u003d LogParser(gitInfoGatherer).commits"},{"operation":"REMOVE","number":34,"content":"    println(commits)"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.dto.HunkDTO"}]},{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.gitinspector.parsers.GitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"abstract class ChangeParser(protected val lines: MutableList\u003cString\u003e) {"},{"operation":"REMOVE","number":9,"content":"    private val oldFileNameLinePrefix \u003d \"--- a\""},{"operation":"REMOVE","number":10,"content":"    private val newFileNameLinePrefix \u003d \"+++ b\""},{"operation":"ADD","number":9,"content":"abstract class ChangeParser : GitParser\u003cChangeDTO\u003e {"},{"operation":"ADD","number":10,"content":"    private val oldFileNameLinePrefix \u003d \"--- \""},{"operation":"ADD","number":11,"content":"    private val newFileNameLinePrefix \u003d \"+++ \""}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    lateinit var change: ChangeDTO"},{"operation":"REMOVE","number":13,"content":""},{"operation":"REMOVE","number":14,"content":"    fun parse(): ChangeParser {"},{"operation":"ADD","number":13,"content":"    override fun parse(lines: MutableList\u003cString\u003e): ChangeDTO {"}]},{"lineChanges":[{"operation":"REMOVE","number":16,"content":"        val (oldFileName, newFileName) \u003d extractFileNames()"},{"operation":"REMOVE","number":17,"content":"        change \u003d ChangeDTO("},{"operation":"REMOVE","number":18,"content":"                changeType \u003d extractChangeType(),"},{"operation":"REMOVE","number":19,"content":""},{"operation":"ADD","number":15,"content":"        val (oldFileName, newFileName) \u003d extractFileNames(lines)"},{"operation":"ADD","number":16,"content":"        return ChangeDTO("},{"operation":"ADD","number":17,"content":"                changeType \u003d extractChangeType(lines),"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"                hunks \u003d extractHunks(),"},{"operation":"REMOVE","number":23,"content":"                annotatedAnnotatedLines \u003d extractAnnotatedLines())"},{"operation":"REMOVE","number":24,"content":"        return this"},{"operation":"ADD","number":20,"content":"                hunks \u003d extractHunks(lines),"},{"operation":"ADD","number":21,"content":"                annotatedAnnotatedLines \u003d extractAnnotatedLines(lines))"}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"    abstract fun extractHunks(): List\u003cHunkDTO\u003e"},{"operation":"ADD","number":24,"content":"    abstract fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"    abstract fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e"},{"operation":"ADD","number":26,"content":"    abstract fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":31,"content":"    protected fun getHunks(): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":28,"content":"    protected fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":44,"content":"    private fun extractChangeType(): ChangeType {"},{"operation":"ADD","number":41,"content":"    private fun extractChangeType(lines: MutableList\u003cString\u003e): ChangeType {"}]},{"lineChanges":[{"operation":"REMOVE","number":65,"content":"    private fun extractFileNames(): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":62,"content":"    private fun extractFileNames(lines: MutableList\u003cString\u003e): Pair\u003cString, String\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":67,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix),"},{"operation":"REMOVE","number":68,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix))"},{"operation":"ADD","number":64,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"ADD","number":65,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.dto.CommitDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.CommitDTO"}]},{"lineChanges":[{"operation":"ADD","number":6,"content":"import org.dxworks.gitinspector.parsers.GitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"abstract class CommitParser(protected val lines: MutableList\u003cString\u003e) {"},{"operation":"REMOVE","number":9,"content":"    private var parsed: Boolean \u003d false"},{"operation":"REMOVE","number":10,"content":"    protected val commitId \u003d extractCommitId()"},{"operation":"REMOVE","number":11,"content":""},{"operation":"REMOVE","number":12,"content":"    lateinit var commit: CommitDTO"},{"operation":"REMOVE","number":13,"content":"        private set"},{"operation":"REMOVE","number":14,"content":""},{"operation":"REMOVE","number":15,"content":"    fun parse(): CommitParser {"},{"operation":"REMOVE","number":16,"content":"        if (!parsed) {"},{"operation":"REMOVE","number":17,"content":"            commit \u003d CommitDTO("},{"operation":"REMOVE","number":18,"content":"                    commitId \u003d commitId,"},{"operation":"REMOVE","number":19,"content":"                    parentIds \u003d extractParentIds(),"},{"operation":"REMOVE","number":20,"content":"                    authorId \u003d extractAuthorId(),"},{"operation":"REMOVE","number":21,"content":"                    date \u003d extractDate(),"},{"operation":"REMOVE","number":22,"content":"                    message \u003d extractMessage(),"},{"operation":"REMOVE","number":23,"content":"                    changes \u003d extractChanges())"},{"operation":"REMOVE","number":24,"content":"            parsed \u003d true"},{"operation":"REMOVE","number":25,"content":"        }"},{"operation":"REMOVE","number":26,"content":"        return this"},{"operation":"ADD","number":9,"content":"abstract class CommitParser : GitParser\u003cCommitDTO\u003e {"},{"operation":"ADD","number":10,"content":"    override fun parse(lines: MutableList\u003cString\u003e): CommitDTO {"},{"operation":"ADD","number":11,"content":"        val commitId \u003d extractCommitId(lines)"},{"operation":"ADD","number":12,"content":"        return CommitDTO("},{"operation":"ADD","number":13,"content":"                commitId \u003d commitId,"},{"operation":"ADD","number":14,"content":"                parentIds \u003d extractParentIds(lines),"},{"operation":"ADD","number":15,"content":"                authorId \u003d extractAuthorId(lines),"},{"operation":"ADD","number":16,"content":"                date \u003d extractDate(lines),"},{"operation":"ADD","number":17,"content":"                message \u003d extractMessage(lines),"},{"operation":"ADD","number":18,"content":"                changes \u003d extractChanges(lines, commitId))"}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"    abstract fun extractChanges(): List\u003cChangeDTO\u003e"},{"operation":"ADD","number":21,"content":"    abstract fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":31,"content":"    protected fun getChanges(): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":23,"content":"    protected fun getChanges(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":44,"content":"    private fun extractCommitId(): String {"},{"operation":"ADD","number":36,"content":"    private fun extractCommitId(lines: MutableList\u003cString\u003e): String {"}]},{"lineChanges":[{"operation":"REMOVE","number":48,"content":"    private fun extractParentIds(): List\u003cString\u003e {"},{"operation":"ADD","number":40,"content":"    private fun extractParentIds(lines: MutableList\u003cString\u003e): List\u003cString\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":52,"content":"    private fun extractAuthorId(): AuthorID {"},{"operation":"ADD","number":44,"content":"    private fun extractAuthorId(lines: MutableList\u003cString\u003e): AuthorID {"}]},{"lineChanges":[{"operation":"REMOVE","number":58,"content":"    private fun extractDate(): Date {"},{"operation":"ADD","number":50,"content":"    private fun extractDate(lines: MutableList\u003cString\u003e): Date {"}]},{"lineChanges":[{"operation":"REMOVE","number":62,"content":"    private fun extractMessage(): String {"},{"operation":"ADD","number":54,"content":"    private fun extractMessage(lines: MutableList\u003cString\u003e): String {"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/HunkParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.LineChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"abstract class HunkParser : GitParser\u003cHunkDTO\u003e {"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"    override fun parse(lines: MutableList\u003cString\u003e): HunkDTO {"},{"operation":"ADD","number":10,"content":"        return HunkDTO(extractLineChanges(lines))"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    protected abstract fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    protected fun getNumbersPair(info: String): Pair\u003cInt, Int\u003e {"},{"operation":"ADD","number":16,"content":"        val numbers \u003d info.substring(1)"},{"operation":"ADD","number":17,"content":"        val lineNumberAndCount \u003d numbers.split(\",\")"},{"operation":"ADD","number":18,"content":"        val lineNumber \u003d Integer.parseInt(lineNumberAndCount[0])"},{"operation":"ADD","number":19,"content":"        val lineCount \u003d if (lineNumberAndCount.size \u003c 2) 1 else Integer.parseInt(lineNumberAndCount[1])"},{"operation":"ADD","number":20,"content":"        return Pair(lineNumber, lineCount)"},{"operation":"ADD","number":21,"content":"    }"},{"operation":"ADD","number":22,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.ChangeParser"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"class BlameParser(private val blame: List\u003cString\u003e) : ChangeParser() {"},{"operation":"ADD","number":8,"content":"    override fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"ADD","number":9,"content":"        return getHunks(lines).map { MergeHunkParser().parse(it) }"},{"operation":"ADD","number":10,"content":"    }"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    override fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"ADD","number":13,"content":"        return blame.filter { it.isNotBlank() }.map {"},{"operation":"ADD","number":14,"content":"            val commitIdAndOther \u003d it.split(\" (\")"},{"operation":"ADD","number":15,"content":"            val commitId \u003d commitIdAndOther[0]"},{"operation":"ADD","number":16,"content":"            val authorAndContent \u003d commitIdAndOther[1].split(\") \")"},{"operation":"ADD","number":17,"content":"            val content \u003d authorAndContent[1]"},{"operation":"ADD","number":18,"content":"            val authorTimeLineNo \u003d authorAndContent[0]"},{"operation":"ADD","number":19,"content":"            val lineNumber \u003d authorTimeLineNo.substring(authorTimeLineNo.lastIndexOf(\" \") + 1).toInt()"},{"operation":"ADD","number":20,"content":"            AnnotatedLineDTO(commitId, lineNumber, content)"},{"operation":"ADD","number":21,"content":"        }"},{"operation":"ADD","number":22,"content":"    }"},{"operation":"ADD","number":23,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/MergeCommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":5,"content":"class MergeCommitParser(lines: MutableList\u003cString\u003e, private val gitInfoGatherer: GitInfoGatherer) : CommitParser(lines) {"},{"operation":"ADD","number":7,"content":"class MergeCommitParser(private val gitInfoGatherer: GitClient) : CommitParser() {"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    override fun extractChanges(): List\u003cChangeDTO\u003e {"},{"operation":"REMOVE","number":8,"content":"        val changes \u003d getChanges()"},{"operation":"ADD","number":9,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":10,"content":"        val changes \u003d getChanges(lines)"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"        return blames.mapIndexed { index, blame -\u003e BlameParser(blame, changes[index]).parse().change }"},{"operation":"ADD","number":12,"content":"        return blames.mapIndexed { index, blame -\u003e BlameParser(blame).parse(changes[index]) }"}]},{"lineChanges":[{"operation":"REMOVE","number":13,"content":"    private fun extractNewFileName(diff: MutableList\u003cString\u003e): String {"},{"operation":"ADD","number":15,"content":"    private fun extractNewFileName(lines: MutableList\u003cString\u003e): String {"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"        val newNameLineIndex \u003d diff.indexOfFirst { it.startsWith(newFileNameLinePrefix) }"},{"operation":"ADD","number":17,"content":"        val newNameLineIndex \u003d lines.indexOfFirst { it.startsWith(newFileNameLinePrefix) }"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/MergeHunkParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.LineChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.HunkParser"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class MergeHunkParser : HunkParser() {"},{"operation":"ADD","number":7,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":8,"content":"        return emptyList()"},{"operation":"ADD","number":9,"content":"    }"},{"operation":"ADD","number":10,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.ChangeParser"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"class SimpleChangeParser : ChangeParser() {"},{"operation":"ADD","number":8,"content":"    override fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"ADD","number":9,"content":"        return emptyList()"},{"operation":"ADD","number":10,"content":"    }"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    override fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"ADD","number":13,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":14,"content":"            getHunks(lines).map { SimpleHunkParser().parse(it) }"},{"operation":"ADD","number":15,"content":"        } else emptyList()"},{"operation":"ADD","number":16,"content":"    }"},{"operation":"ADD","number":17,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class SimpleCommitParser : CommitParser() {"},{"operation":"ADD","number":7,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":8,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":9,"content":"            getChanges(lines).map { SimpleChangeParser().parse(lines) }"},{"operation":"ADD","number":10,"content":"        } else ArrayList()"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/HunkParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleHunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.dto.LineChangeDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.LineChangeDTO"}]},{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.HunkParser"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"class HunkParser(val lines: MutableList\u003cString\u003e) {"},{"operation":"REMOVE","number":8,"content":""},{"operation":"REMOVE","number":9,"content":"    val hunk: HunkDTO"},{"operation":"REMOVE","number":10,"content":""},{"operation":"REMOVE","number":11,"content":"    init {"},{"operation":"ADD","number":7,"content":"class SimpleHunkParser : HunkParser() {"},{"operation":"ADD","number":8,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":13,"content":"        hunk \u003d HunkDTO("},{"operation":"REMOVE","number":14,"content":"                lineChanges \u003d extractLineChanges(removePair, addPair))"},{"operation":"REMOVE","number":15,"content":"    }"},{"operation":"REMOVE","number":16,"content":""},{"operation":"REMOVE","number":17,"content":"    private fun extractLineChanges(removePair: Pair\u003cInt, Int\u003e, addPair: Pair\u003cInt, Int\u003e): List\u003cLineChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":37,"content":""},{"operation":"REMOVE","number":38,"content":"    private fun getNumbersPair(info: String): Pair\u003cInt, Int\u003e {"},{"operation":"REMOVE","number":39,"content":"        val numbers \u003d info.substring(1)"},{"operation":"REMOVE","number":40,"content":"        val lineNumberAndCount \u003d numbers.split(\",\")"},{"operation":"REMOVE","number":41,"content":"        val lineNumber \u003d Integer.parseInt(lineNumberAndCount[0])"},{"operation":"REMOVE","number":42,"content":"        val lineCount \u003d if (lineNumberAndCount.size \u003c 2) 1 else Integer.parseInt(lineNumberAndCount[1])"},{"operation":"REMOVE","number":43,"content":"        return Pair(lineNumber, lineCount)"},{"operation":"REMOVE","number":44,"content":"    }"},{"operation":"REMOVE","number":45,"content":"}"},{"operation":"ADD","number":29,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":13,"content":"import org.eclipse.jgit.diff.RenameDetector"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/dto/AnnotatedLineDTO.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.dto"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"class AnnotatedLineDTO(val commitId: String, val authorID: AuthorID, val number: Int, val content: String)"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/BlameParser.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"REMOVE","number":5,"content":""},{"operation":"REMOVE","number":6,"content":"class BlameParser(private val blame: List\u003cString\u003e, lines: MutableList\u003cString\u003e): ChangeParser(lines) {"},{"operation":"REMOVE","number":7,"content":"    override fun extractHunks(): List\u003cHunkDTO\u003e {"},{"operation":"REMOVE","number":8,"content":"        return ArrayList()"},{"operation":"REMOVE","number":9,"content":"    }"},{"operation":"REMOVE","number":10,"content":""},{"operation":"REMOVE","number":11,"content":"    override fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"REMOVE","number":12,"content":"        TODO(\"implement extract annotated lines from blame\")"},{"operation":"REMOVE","number":13,"content":"    }"},{"operation":"REMOVE","number":14,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/SimpleChangeParser.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.dto.HunkDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitsecond.model.ChangeType"},{"operation":"REMOVE","number":7,"content":""},{"operation":"REMOVE","number":8,"content":"class SimpleChangeParser(lines: MutableList\u003cString\u003e): ChangeParser(lines) {"},{"operation":"REMOVE","number":9,"content":"    override fun extractAnnotatedLines(): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"REMOVE","number":10,"content":"        return ArrayList()"},{"operation":"REMOVE","number":11,"content":"    }"},{"operation":"REMOVE","number":12,"content":""},{"operation":"REMOVE","number":13,"content":"    override fun extractHunks(): List\u003cHunkDTO\u003e {"},{"operation":"REMOVE","number":14,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":15,"content":"            getHunks().map { HunkParser(it).hunk }"},{"operation":"REMOVE","number":16,"content":"        } else ArrayList()"},{"operation":"REMOVE","number":17,"content":"    }"},{"operation":"REMOVE","number":18,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/parsers/SimpleCommitParser.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.parsers"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.dto.ChangeDTO"},{"operation":"REMOVE","number":4,"content":"import kotlin.collections.ArrayList"},{"operation":"REMOVE","number":5,"content":""},{"operation":"REMOVE","number":6,"content":"class SimpleCommitParser(lines: MutableList\u003cString\u003e) : CommitParser(lines) {"},{"operation":"REMOVE","number":7,"content":"    override fun extractChanges(): List\u003cChangeDTO\u003e {"},{"operation":"REMOVE","number":8,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":9,"content":"            getChanges().map { SimpleChangeParser(it).parse().change }"},{"operation":"REMOVE","number":10,"content":"        } else ArrayList()"},{"operation":"REMOVE","number":11,"content":"    }"},{"operation":"REMOVE","number":12,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"b3fdc7bf3eecf162cde457219969eb47d7db2b66","isBinary":false,"isBlame":false}]},{"id":"2fb277cef743fd198530398c6ed2557a6dfedc12","parentIds":["df22270bec3322ee418c191da2f11a90f867f384"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 4, 2019, 3:43:20 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 4, 2019, 3:43:20 PM","message":"more refactoring","changes":[{"oldFileName":"src/main/java/org/dxworks/dto/ChangeDTO.kt","newFileName":"src/main/java/org/dxworks/dto/ChangeDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"                val changeType: ChangeType,"},{"operation":"ADD","number":7,"content":"                val type: ChangeType,"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"                val annotatedAnnotatedLines: List\u003cAnnotatedLineDTO\u003e)"},{"operation":"ADD","number":9,"content":"                val annotatedLines: List\u003cAnnotatedLineDTO\u003e)"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/CommitDTO.kt","newFileName":"src/main/java/org/dxworks/dto/CommitDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"class CommitDTO(val commitId: String,"},{"operation":"ADD","number":5,"content":"class CommitDTO(val id: String,"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"                val authorId: AuthorID,"},{"operation":"ADD","number":7,"content":"                val authorName: String,"},{"operation":"ADD","number":8,"content":"                val authorEmail: String,"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"src/main/java/org/dxworks/dto/ProjectDTO.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"class ProjectDTO(val commits: List\u003cCommitDTO\u003e)"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %at%nmessage:%n%s%n%b\\\"\""}]},{"lineChanges":[{"operation":"REMOVE","number":41,"content":"    val commits \u003d LogParser(gitClient).commits"},{"operation":"ADD","number":41,"content":"    val commits \u003d LogParser(gitClient).parse(gitClient.getLogs())"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.CommitDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.ProjectDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"class LogParser(gitClient: GitClient) {"},{"operation":"ADD","number":6,"content":"class LogParser(private val gitClient: GitClient) : GitParser\u003cProjectDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    private val lines \u003d gitClient.getLogs()"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    val commits: List\u003cCommitDTO\u003e"},{"operation":"REMOVE","number":11,"content":""},{"operation":"REMOVE","number":12,"content":"    init {"},{"operation":"ADD","number":9,"content":"    override fun parse(lines: MutableList\u003cString\u003e): ProjectDTO {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"        this.commits \u003d commits.map { CommitParserFactory.create(it, gitClient).parse(it) }"},{"operation":"ADD","number":19,"content":"        return ProjectDTO(commits.map { CommitParserFactory.create(it, gitClient).parse(it) })"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":17,"content":"                changeType \u003d extractChangeType(lines),"},{"operation":"ADD","number":17,"content":"                type \u003d extractChangeType(lines),"}]},{"lineChanges":[{"operation":"REMOVE","number":21,"content":"                annotatedAnnotatedLines \u003d extractAnnotatedLines(lines))"},{"operation":"ADD","number":21,"content":"                annotatedLines \u003d extractAnnotatedLines(lines))"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.model.AuthorID"}]},{"lineChanges":[{"operation":"REMOVE","number":13,"content":"                commitId \u003d commitId,"},{"operation":"ADD","number":12,"content":"                id \u003d commitId,"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"                authorId \u003d extractAuthorId(lines),"},{"operation":"ADD","number":14,"content":"                authorName \u003d extractAuthorName(lines),"},{"operation":"ADD","number":15,"content":"                authorEmail \u003d extractAuthorEmail(lines),"}]},{"lineChanges":[{"operation":"REMOVE","number":44,"content":"    private fun extractAuthorId(lines: MutableList\u003cString\u003e): AuthorID {"},{"operation":"REMOVE","number":45,"content":"        val authorName \u003d lines.removeAt(0).removePrefix(\"author name: \")"},{"operation":"REMOVE","number":46,"content":"        val authorEmail \u003d lines.removeAt(0).removePrefix(\"author email: \")"},{"operation":"REMOVE","number":47,"content":"        return AuthorID(authorEmail, authorName)"},{"operation":"ADD","number":44,"content":"    private fun extractAuthorName(lines: MutableList\u003cString\u003e): String {"},{"operation":"ADD","number":45,"content":"        return lines.removeAt(0).removePrefix(\"author name: \")"},{"operation":"ADD","number":46,"content":"    }"},{"operation":"ADD","number":47,"content":""},{"operation":"ADD","number":48,"content":"    private fun extractAuthorEmail(lines: MutableList\u003cString\u003e): String {"},{"operation":"ADD","number":49,"content":"        return lines.removeAt(0).removePrefix(\"author email: \")"}]},{"lineChanges":[{"operation":"REMOVE","number":51,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \"))"},{"operation":"ADD","number":53,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \").toLong())"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/GitClient.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.data.AnnotatedLineData"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.data.ChangeData"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.data.ChangesData"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitsecond.data.CommitData"},{"operation":"REMOVE","number":7,"content":"import org.eclipse.jgit.api.BlameCommand"},{"operation":"REMOVE","number":8,"content":"import org.eclipse.jgit.api.Git"},{"operation":"REMOVE","number":9,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"REMOVE","number":10,"content":"import org.eclipse.jgit.diff.DiffEntry"},{"operation":"REMOVE","number":11,"content":"import org.eclipse.jgit.diff.DiffFormatter"},{"operation":"REMOVE","number":12,"content":"import org.eclipse.jgit.diff.RawTextComparator"},{"operation":"REMOVE","number":13,"content":"import org.eclipse.jgit.lib.ObjectReader"},{"operation":"REMOVE","number":14,"content":"import org.eclipse.jgit.lib.Repository"},{"operation":"REMOVE","number":15,"content":"import org.eclipse.jgit.revwalk.RevCommit"},{"operation":"REMOVE","number":16,"content":"import org.eclipse.jgit.revwalk.RevWalk"},{"operation":"REMOVE","number":17,"content":"import org.eclipse.jgit.revwalk.filter.RevFilter"},{"operation":"REMOVE","number":18,"content":"import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider"},{"operation":"REMOVE","number":19,"content":"import org.eclipse.jgit.treewalk.AbstractTreeIterator"},{"operation":"REMOVE","number":20,"content":"import org.eclipse.jgit.treewalk.CanonicalTreeParser"},{"operation":"REMOVE","number":21,"content":"import org.eclipse.jgit.treewalk.EmptyTreeIterator"},{"operation":"REMOVE","number":22,"content":"import org.eclipse.jgit.treewalk.TreeWalk"},{"operation":"REMOVE","number":23,"content":"import org.eclipse.jgit.treewalk.filter.PathFilter"},{"operation":"REMOVE","number":24,"content":"import org.eclipse.jgit.util.io.DisabledOutputStream"},{"operation":"REMOVE","number":25,"content":"import org.slf4j.LoggerFactory"},{"operation":"REMOVE","number":26,"content":"import java.io.ByteArrayOutputStream"},{"operation":"REMOVE","number":27,"content":"import java.io.File"},{"operation":"REMOVE","number":28,"content":"import java.io.FileNotFoundException"},{"operation":"REMOVE","number":29,"content":"import java.io.IOException"},{"operation":"REMOVE","number":30,"content":"import java.nio.file.Paths"},{"operation":"REMOVE","number":31,"content":"import java.util.*"},{"operation":"REMOVE","number":32,"content":"import kotlin.collections.ArrayList"},{"operation":"REMOVE","number":33,"content":""},{"operation":"REMOVE","number":34,"content":"class GitClient {"},{"operation":"REMOVE","number":35,"content":"    private val could_not_parse_changes_correctly \u003d \"Could not parse changes correctly\""},{"operation":"REMOVE","number":36,"content":""},{"operation":"REMOVE","number":37,"content":"    init {"},{"operation":"REMOVE","number":38,"content":"        initializeReposPath()"},{"operation":"REMOVE","number":39,"content":"    }"},{"operation":"REMOVE","number":40,"content":""},{"operation":"REMOVE","number":41,"content":""},{"operation":"REMOVE","number":42,"content":"    private fun initializeReposPath() {"},{"operation":"REMOVE","number":43,"content":"        val repoFilePath \u003d File(REPOS_PATH)"},{"operation":"REMOVE","number":44,"content":"        if (!repoFilePath.exists()) {"},{"operation":"REMOVE","number":45,"content":"            val didMakeDirs \u003d repoFilePath.mkdirs()"},{"operation":"REMOVE","number":46,"content":"            if (!didMakeDirs) {"},{"operation":"REMOVE","number":47,"content":"                log.error(\"Could not make directory $REPOS_PATH\")"},{"operation":"REMOVE","number":48,"content":"            }"},{"operation":"REMOVE","number":49,"content":"        }"},{"operation":"REMOVE","number":50,"content":""},{"operation":"REMOVE","number":51,"content":"        log.info(\"Repos path set to $REPOS_PATH\")"},{"operation":"REMOVE","number":52,"content":"    }"},{"operation":"REMOVE","number":53,"content":""},{"operation":"REMOVE","number":54,"content":"    @Throws(IOException::class)"},{"operation":"REMOVE","number":55,"content":"    private fun getRepositoryByProjectIdAndRepoName(repoName: String): Git {"},{"operation":"REMOVE","number":56,"content":"        return Git.open(Paths.get(REPOS_PATH + File.separator + repoName + File.separator + \".git\").toFile())"},{"operation":"REMOVE","number":57,"content":"    }"},{"operation":"REMOVE","number":58,"content":""},{"operation":"REMOVE","number":59,"content":"    fun checkoutRevisionForRepo(revisionName: String, repoName: String) {"},{"operation":"REMOVE","number":60,"content":"        try {"},{"operation":"REMOVE","number":61,"content":"            val git \u003d this.getRepositoryByProjectIdAndRepoName(repoName)"},{"operation":"REMOVE","number":62,"content":"            git.checkout().setName(revisionName).call()"},{"operation":"REMOVE","number":63,"content":"        } catch (ex: IOException) {"},{"operation":"REMOVE","number":64,"content":"            log.error(\"could not find repository for $repoName\", ex)"},{"operation":"REMOVE","number":65,"content":"        } catch (ex: GitAPIException) {"},{"operation":"REMOVE","number":66,"content":"            log.error(\"Error trying to checkout revision $revisionName for student $repoName\", ex)"},{"operation":"REMOVE","number":67,"content":"        }"},{"operation":"REMOVE","number":68,"content":""},{"operation":"REMOVE","number":69,"content":"    }"},{"operation":"REMOVE","number":70,"content":""},{"operation":"REMOVE","number":71,"content":"    @Throws(GitAPIException::class)"},{"operation":"REMOVE","number":72,"content":"    fun cloneAndInitializeRepository(repositoryURL: String, repoName: String) {"},{"operation":"REMOVE","number":73,"content":""},{"operation":"REMOVE","number":74,"content":"        val studentFolder \u003d Paths.get(REPOS_PATH + File.separator + repoName).toFile()"},{"operation":"REMOVE","number":75,"content":"        if (studentFolder.exists() \u0026\u0026 studentFolder.isDirectory) {"},{"operation":"REMOVE","number":76,"content":"            log.error(\"Student $repoName already has a cloned repository\")"},{"operation":"REMOVE","number":77,"content":"            return"},{"operation":"REMOVE","number":78,"content":"        } else {"},{"operation":"REMOVE","number":79,"content":"            val createdStudentDirectory \u003d studentFolder.mkdirs()"},{"operation":"REMOVE","number":80,"content":"            if (!createdStudentDirectory) {"},{"operation":"REMOVE","number":81,"content":"                log.error(\"Could not create directory for student $repoName\")"},{"operation":"REMOVE","number":82,"content":"                return"},{"operation":"REMOVE","number":83,"content":"            }"},{"operation":"REMOVE","number":84,"content":"        }"},{"operation":"REMOVE","number":85,"content":""},{"operation":"REMOVE","number":86,"content":"        val cloneCommand \u003d Git.cloneRepository().setURI(repositoryURL).setDirectory(studentFolder).setCloneAllBranches(true).setBranch(\"master\").setCredentialsProvider(UsernamePasswordCredentialsProvider(\"mario.rivis@gmail.com\", \"just6and9\"))"},{"operation":"REMOVE","number":87,"content":"        cloneCommand.call()"},{"operation":"REMOVE","number":88,"content":"    }"},{"operation":"REMOVE","number":89,"content":""},{"operation":"REMOVE","number":90,"content":"    @Throws(IOException::class)"},{"operation":"REMOVE","number":91,"content":"    fun getFileContentForRepoAndRevision(filePath: String, repoName: String, revisionName: String): String {"},{"operation":"REMOVE","number":92,"content":"        val repository \u003d this.getRepositoryByProjectIdAndRepoName(repoName).repository"},{"operation":"REMOVE","number":93,"content":"        val lastCommitId \u003d repository.resolve(revisionName)"},{"operation":"REMOVE","number":94,"content":"        val revWalk \u003d RevWalk(repository)"},{"operation":"REMOVE","number":95,"content":"        val commit \u003d revWalk.parseCommit(lastCommitId)"},{"operation":"REMOVE","number":96,"content":"        val tree \u003d commit.tree"},{"operation":"REMOVE","number":97,"content":"        val treeWalk \u003d TreeWalk(repository)"},{"operation":"REMOVE","number":98,"content":"        treeWalk.addTree(tree)"},{"operation":"REMOVE","number":99,"content":"        treeWalk.isRecursive \u003d true"},{"operation":"REMOVE","number":100,"content":"        treeWalk.filter \u003d PathFilter.create(filePath)"},{"operation":"REMOVE","number":101,"content":"        if (!treeWalk.next()) {"},{"operation":"REMOVE","number":102,"content":"            println(\"File not found\")"},{"operation":"REMOVE","number":103,"content":"            throw FileNotFoundException(filePath)"},{"operation":"REMOVE","number":104,"content":"        } else {"},{"operation":"REMOVE","number":105,"content":"            val objectId \u003d treeWalk.getObjectId(0)"},{"operation":"REMOVE","number":106,"content":"            val loader \u003d repository.open(objectId)"},{"operation":"REMOVE","number":107,"content":"            return String(loader.bytes)"},{"operation":"REMOVE","number":108,"content":"        }"},{"operation":"REMOVE","number":109,"content":"    }"},{"operation":"REMOVE","number":110,"content":""},{"operation":"REMOVE","number":111,"content":"    fun generateGitLogForDx(repoName: String): List\u003cCommitData\u003e {"},{"operation":"REMOVE","number":112,"content":"        try {"},{"operation":"REMOVE","number":113,"content":"            val git \u003d this.getRepositoryByProjectIdAndRepoName(repoName)"},{"operation":"REMOVE","number":114,"content":"            val repository \u003d git.repository"},{"operation":"REMOVE","number":115,"content":""},{"operation":"REMOVE","number":116,"content":"            return git.log().setRevFilter(RevFilter.ALL).call()"},{"operation":"REMOVE","number":117,"content":"                    .map { getCommitDetails(repository, it) }"},{"operation":"REMOVE","number":118,"content":"        } catch (var4: GitAPIException) {"},{"operation":"REMOVE","number":119,"content":"            log.error(\"Git Api error\", var4)"},{"operation":"REMOVE","number":120,"content":"        } catch (var5: IOException) {"},{"operation":"REMOVE","number":121,"content":"            log.error(\"could not find repository $repoName\", var5)"},{"operation":"REMOVE","number":122,"content":"        }"},{"operation":"REMOVE","number":123,"content":""},{"operation":"REMOVE","number":124,"content":"        return emptyList()"},{"operation":"REMOVE","number":125,"content":"    }"},{"operation":"REMOVE","number":126,"content":""},{"operation":"REMOVE","number":127,"content":"    private fun blame(repo: Repository, filePath: String, commitId: String): MutableList\u003cAnnotatedLineData\u003e {"},{"operation":"REMOVE","number":128,"content":"        val gitObject \u003d repo.resolve(commitId)"},{"operation":"REMOVE","number":129,"content":"        val blameCommand \u003d BlameCommand(repo)"},{"operation":"REMOVE","number":130,"content":"        blameCommand.setFilePath(filePath)"},{"operation":"REMOVE","number":131,"content":"        blameCommand.setStartCommit(gitObject)"},{"operation":"REMOVE","number":132,"content":"        val blameResult \u003d blameCommand.call()"},{"operation":"REMOVE","number":133,"content":"        val rawText \u003d blameResult.resultContents"},{"operation":"REMOVE","number":134,"content":"        val length \u003d rawText.size()"},{"operation":"REMOVE","number":135,"content":""},{"operation":"REMOVE","number":136,"content":"        val lines: MutableList\u003cAnnotatedLineData\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":137,"content":""},{"operation":"REMOVE","number":138,"content":"        for (i in 0 until length) {"},{"operation":"REMOVE","number":139,"content":"            val commit \u003d blameResult.getSourceCommit(i)"},{"operation":"REMOVE","number":140,"content":"            val line \u003d AnnotatedLineData(commit.name, i + 1, rawText.getString(i))"},{"operation":"REMOVE","number":141,"content":"            lines.add(line)"},{"operation":"REMOVE","number":142,"content":"        }"},{"operation":"REMOVE","number":143,"content":""},{"operation":"REMOVE","number":144,"content":"        val blameContent \u003d String(rawText.rawContent)"},{"operation":"REMOVE","number":145,"content":"        val blameLines \u003d blameContent.split(\"\\n\")"},{"operation":"REMOVE","number":146,"content":"        val blameLength \u003d blameLines.size"},{"operation":"REMOVE","number":147,"content":""},{"operation":"REMOVE","number":148,"content":""},{"operation":"REMOVE","number":149,"content":"//        lines.forEach {"},{"operation":"REMOVE","number":150,"content":"//            println(\"${it.lineNumber} ${it.commit?.date} ${it.commit?.author!!.id.name} ${it.content}\")"},{"operation":"REMOVE","number":151,"content":"//        }"},{"operation":"REMOVE","number":152,"content":""},{"operation":"REMOVE","number":153,"content":"        return lines"},{"operation":"REMOVE","number":154,"content":"    }"},{"operation":"REMOVE","number":155,"content":""},{"operation":"REMOVE","number":156,"content":"    private fun getCommitDetails(repository: Repository, revCommit: RevCommit): CommitData {"},{"operation":"REMOVE","number":157,"content":"        return CommitData(id \u003d revCommit.name,"},{"operation":"REMOVE","number":158,"content":"                authorName \u003d revCommit.authorIdent.name,"},{"operation":"REMOVE","number":159,"content":"                authorEmail \u003d revCommit.authorIdent.emailAddress,"},{"operation":"REMOVE","number":160,"content":"                date \u003d Date(revCommit.commitTime.toLong() * 1000L),"},{"operation":"REMOVE","number":161,"content":"                message \u003d revCommit.fullMessage,"},{"operation":"REMOVE","number":162,"content":"                changeSets \u003d getCommitChanges(repository, revCommit),"},{"operation":"REMOVE","number":163,"content":"                parentIds \u003d revCommit.parents.map { it.name })"},{"operation":"REMOVE","number":164,"content":"    }"},{"operation":"REMOVE","number":165,"content":""},{"operation":"REMOVE","number":166,"content":"    private fun getCommitChanges(repository: Repository, revCommit: RevCommit): List\u003cChangesData\u003e {"},{"operation":"REMOVE","number":167,"content":"        val reader \u003d repository.newObjectReader()"},{"operation":"REMOVE","number":168,"content":"        val currentCommitTreeIterator \u003d CanonicalTreeParser()"},{"operation":"REMOVE","number":169,"content":""},{"operation":"REMOVE","number":170,"content":"        try {"},{"operation":"REMOVE","number":171,"content":"            currentCommitTreeIterator.reset(reader, revCommit.tree.id)"},{"operation":"REMOVE","number":172,"content":""},{"operation":"REMOVE","number":173,"content":"            return if (revCommit.parentCount \u003d\u003d 0) {"},{"operation":"REMOVE","number":174,"content":"                val parentTreeIterator \u003d EmptyTreeIterator()"},{"operation":"REMOVE","number":175,"content":"                val diffs \u003d getDiffsBetweenCommits(repository, parentTreeIterator, currentCommitTreeIterator)"},{"operation":"REMOVE","number":176,"content":"                val changes \u003d transformDiffsToChangeDatas(revCommit, repository, diffs)"},{"operation":"REMOVE","number":177,"content":"                listOf(ChangesData(null, changes))"},{"operation":"REMOVE","number":178,"content":"            } else {"},{"operation":"REMOVE","number":179,"content":"                val changesData \u003d revCommit.parents"},{"operation":"REMOVE","number":180,"content":"                        .map { getChangesData(repository, reader, currentCommitTreeIterator, revCommit, it) }"},{"operation":"REMOVE","number":181,"content":"                        .filter { Objects.nonNull(it) }"},{"operation":"REMOVE","number":182,"content":""},{"operation":"REMOVE","number":183,"content":"                if (changesData.size !\u003d revCommit.parentCount) {"},{"operation":"REMOVE","number":184,"content":"                    log.warn(\"Not all merge commit parents have been correctly parsed!\")"},{"operation":"REMOVE","number":185,"content":"                }"},{"operation":"REMOVE","number":186,"content":"                changesData as List\u003cChangesData\u003e"},{"operation":"REMOVE","number":187,"content":"            }"},{"operation":"REMOVE","number":188,"content":""},{"operation":"REMOVE","number":189,"content":"        } catch (e: IOException) {"},{"operation":"REMOVE","number":190,"content":"            log.error(could_not_parse_changes_correctly, e)"},{"operation":"REMOVE","number":191,"content":"            return emptyList()"},{"operation":"REMOVE","number":192,"content":"        }"},{"operation":"REMOVE","number":193,"content":""},{"operation":"REMOVE","number":194,"content":"    }"},{"operation":"REMOVE","number":195,"content":""},{"operation":"REMOVE","number":196,"content":"    private fun getChangesData(repository: Repository, reader: ObjectReader, currentCommitTreeIterator: CanonicalTreeParser, revCommit: RevCommit, parentCommit: RevCommit): ChangesData? {"},{"operation":"REMOVE","number":197,"content":"        val parentIterator \u003d CanonicalTreeParser()"},{"operation":"REMOVE","number":198,"content":"        try {"},{"operation":"REMOVE","number":199,"content":"            parentIterator.reset(reader, parentCommit.tree.id)"},{"operation":"REMOVE","number":200,"content":"            val diffsBetweenCommits \u003d getDiffsBetweenCommits(repository, parentIterator, currentCommitTreeIterator)"},{"operation":"REMOVE","number":201,"content":"            val changeDatas \u003d transformDiffsToChangeDatas(revCommit, repository, diffsBetweenCommits)"},{"operation":"REMOVE","number":202,"content":"            cleanDataForRenames(changeDatas, revCommit, repository);"},{"operation":"REMOVE","number":203,"content":""},{"operation":"REMOVE","number":204,"content":"            return ChangesData(parentCommit.name, changeDatas)"},{"operation":"REMOVE","number":205,"content":"        } catch (e: IOException) {"},{"operation":"REMOVE","number":206,"content":"            log.error(could_not_parse_changes_correctly, e)"},{"operation":"REMOVE","number":207,"content":"            return null"},{"operation":"REMOVE","number":208,"content":"        } finally {"},{"operation":"REMOVE","number":209,"content":"            try {"},{"operation":"REMOVE","number":210,"content":"                currentCommitTreeIterator.reset(reader, revCommit.tree.id)"},{"operation":"REMOVE","number":211,"content":"            } catch (e: IOException) {"},{"operation":"REMOVE","number":212,"content":"                log.error(could_not_parse_changes_correctly, e)"},{"operation":"REMOVE","number":213,"content":"            }"},{"operation":"REMOVE","number":214,"content":""},{"operation":"REMOVE","number":215,"content":"        }"},{"operation":"REMOVE","number":216,"content":"    }"},{"operation":"REMOVE","number":217,"content":""},{"operation":"REMOVE","number":218,"content":"    private fun cleanDataForRenames(changeDatas: List\u003cChangeData\u003e, revCommit: RevCommit, repository: Repository) {"},{"operation":"REMOVE","number":219,"content":"        val addChangeDatas \u003d changeDatas.filter { it.type \u003d\u003d DiffEntry.ChangeType.ADD }"},{"operation":"REMOVE","number":220,"content":"        val deleteChangeDatas \u003d changeDatas.filter { it.type \u003d\u003d DiffEntry.ChangeType.DELETE }"},{"operation":"REMOVE","number":221,"content":""},{"operation":"REMOVE","number":222,"content":"        if (addChangeDatas.isNotEmpty() \u0026\u0026 deleteChangeDatas.isNotEmpty()) {"},{"operation":"REMOVE","number":223,"content":"            val git \u003d Git(repository)"},{"operation":"REMOVE","number":224,"content":"//            val log \u003d git.log()."},{"operation":"REMOVE","number":225,"content":"        }"},{"operation":"REMOVE","number":226,"content":"    }"},{"operation":"REMOVE","number":227,"content":""},{"operation":"REMOVE","number":228,"content":"    private fun transformDiffsToChangeDatas(revCommit: RevCommit, repository: Repository, diffs: List\u003cDiffEntry\u003e): List\u003cChangeData\u003e {"},{"operation":"REMOVE","number":229,"content":"        return diffs.map {"},{"operation":"REMOVE","number":230,"content":"            val changeData \u003d ChangeData(type \u003d it.changeType,"},{"operation":"REMOVE","number":231,"content":"                    oldFileName \u003d it.oldPath,"},{"operation":"REMOVE","number":232,"content":"                    newFileName \u003d it.newPath,"},{"operation":"REMOVE","number":233,"content":"                    commitID \u003d revCommit.name,"},{"operation":"REMOVE","number":234,"content":"                    annotatedLines \u003d if (revCommit.parents.size \u003e 1) blame(repository, it.newPath, revCommit.name) else ArrayList())"},{"operation":"REMOVE","number":235,"content":"            setDiff(repository, it, changeData)"},{"operation":"REMOVE","number":236,"content":"            changeData"},{"operation":"REMOVE","number":237,"content":"        }"},{"operation":"REMOVE","number":238,"content":"    }"},{"operation":"REMOVE","number":239,"content":""},{"operation":"REMOVE","number":240,"content":"    @Throws(IOException::class)"},{"operation":"REMOVE","number":241,"content":"    private fun getDiffsBetweenCommits(repository: Repository, parentTreeIterator: AbstractTreeIterator, currentCommitTreeIterator: AbstractTreeIterator): List\u003cDiffEntry\u003e {"},{"operation":"REMOVE","number":242,"content":"        val df \u003d DiffFormatter(DisabledOutputStream.INSTANCE)"},{"operation":"REMOVE","number":243,"content":"        df.setRepository(repository)"},{"operation":"REMOVE","number":244,"content":"        df.setDiffComparator(RawTextComparator.DEFAULT)"},{"operation":"REMOVE","number":245,"content":"        df.isDetectRenames \u003d true"},{"operation":"REMOVE","number":246,"content":"        return df.scan(parentTreeIterator, currentCommitTreeIterator)"},{"operation":"REMOVE","number":247,"content":"    }"},{"operation":"REMOVE","number":248,"content":""},{"operation":"REMOVE","number":249,"content":""},{"operation":"REMOVE","number":250,"content":"    private fun setDiff(repository: Repository, diff: DiffEntry, repoChangeBlock: ChangeData) {"},{"operation":"REMOVE","number":251,"content":"        val out \u003d ByteArrayOutputStream()"},{"operation":"REMOVE","number":252,"content":"        val df \u003d DiffFormatter(out)"},{"operation":"REMOVE","number":253,"content":"        df.setRepository(repository)"},{"operation":"REMOVE","number":254,"content":""},{"operation":"REMOVE","number":255,"content":"        try {"},{"operation":"REMOVE","number":256,"content":"            df.setContext(0)"},{"operation":"REMOVE","number":257,"content":"            df.isDetectRenames \u003d true"},{"operation":"REMOVE","number":258,"content":"            df.format(diff)"},{"operation":"REMOVE","number":259,"content":"            val modifications \u003d out.toString()"},{"operation":"REMOVE","number":260,"content":"            out.reset()"},{"operation":"REMOVE","number":261,"content":"            repoChangeBlock.diff \u003d modifications"},{"operation":"REMOVE","number":262,"content":"        } catch (e: IOException) {"},{"operation":"REMOVE","number":263,"content":"            log.error(\"DiffParser between commits could not be parsed correctly!\", e)"},{"operation":"REMOVE","number":264,"content":"        }"},{"operation":"REMOVE","number":265,"content":""},{"operation":"REMOVE","number":266,"content":"    }"},{"operation":"REMOVE","number":267,"content":""},{"operation":"REMOVE","number":268,"content":"    private fun trimList(lines: List\u003cString\u003e): List\u003cString\u003e {"},{"operation":"REMOVE","number":269,"content":"        for (i in lines.indices) {"},{"operation":"REMOVE","number":270,"content":"            if (lines[i].startsWith(\"@@\")) {"},{"operation":"REMOVE","number":271,"content":"                return lines.subList(i, lines.size)"},{"operation":"REMOVE","number":272,"content":"            }"},{"operation":"REMOVE","number":273,"content":"        }"},{"operation":"REMOVE","number":274,"content":""},{"operation":"REMOVE","number":275,"content":"        return emptyList()"},{"operation":"REMOVE","number":276,"content":"    }"},{"operation":"REMOVE","number":277,"content":""},{"operation":"REMOVE","number":278,"content":"    companion object {"},{"operation":"REMOVE","number":279,"content":""},{"operation":"REMOVE","number":280,"content":"        val REPOS_PATH \u003d APP_FOLDER_PATH + File.separator + \"repos\""},{"operation":"REMOVE","number":281,"content":"        private val log \u003d LoggerFactory.getLogger(GitClient::class.java)"},{"operation":"REMOVE","number":282,"content":"    }"},{"operation":"REMOVE","number":283,"content":""},{"operation":"REMOVE","number":284,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"REMOVE","number":4,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"REMOVE","number":5,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    val gitClient \u003d GitClient()"},{"operation":"REMOVE","number":10,"content":""},{"operation":"REMOVE","number":11,"content":"    try {"},{"operation":"REMOVE","number":12,"content":"        gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME)"},{"operation":"REMOVE","number":13,"content":""},{"operation":"REMOVE","number":14,"content":"    } catch (e: GitAPIException) {"},{"operation":"REMOVE","number":15,"content":"        e.printStackTrace()"},{"operation":"REMOVE","number":16,"content":"    }"},{"operation":"REMOVE","number":17,"content":""},{"operation":"REMOVE","number":18,"content":"    val commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME).reversed()"},{"operation":"REMOVE","number":19,"content":"    commitDatas.map { \"${it.message} ${it.isMergeCommit}\" }.forEach { println(it) }"},{"operation":"REMOVE","number":20,"content":""},{"operation":"REMOVE","number":21,"content":"    val project \u003d createProject(commitDatas, REPO_NAME)"},{"operation":"REMOVE","number":22,"content":"    println(project)"}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"//Show the entire history of a file (including history beyond renames):"},{"operation":"REMOVE","number":25,"content":"//$ git log --follow -p -- \u003cfile\u003e"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.data.ChangeData"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.data.ChangesData"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.data.CommitData"},{"operation":"ADD","number":3,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.dto.CommitDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"import org.eclipse.jgit.diff.DiffEntry"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"fun createProject(commitDatas: List\u003cCommitData\u003e, projectId: String): Project {"},{"operation":"ADD","number":7,"content":"fun createProject(commitDtos: List\u003cCommitDTO\u003e, projectId: String): Project {"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    commitDatas.forEach {"},{"operation":"ADD","number":10,"content":"    commitDtos.forEach {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"        addChangesToCommit(it.changeSets, commit, project)"},{"operation":"ADD","number":20,"content":"        addChangesToCommit(it.changes, commit, project)"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":"private fun addChangesToCommit(changeSets: List\u003cChangesData\u003e, commit: Commit, project: Project) {"},{"operation":"ADD","number":28,"content":"private fun addChangesToCommit(changes: List\u003cChangeDTO\u003e, commit: Commit, project: Project) {"}]},{"lineChanges":[{"operation":"REMOVE","number":32,"content":"        getMergeCommitChanges(commit, changeSets, project)"},{"operation":"ADD","number":30,"content":"        getMergeCommitChanges(commit, changes, project)"}]},{"lineChanges":[{"operation":"REMOVE","number":34,"content":"        changeSets.flatMap { it.changes }"},{"operation":"REMOVE","number":35,"content":"                .map {"},{"operation":"REMOVE","number":36,"content":"                    val annotatedLines \u003d it.annotatedLines.map { line -\u003e AnnotatedLine(commit, line.lineNumber, line.content) }.toMutableList()"},{"operation":"REMOVE","number":37,"content":"                    val change \u003d Change(commit \u003d commit,"},{"operation":"REMOVE","number":38,"content":"                            type \u003d transformChangeType(it.type),"},{"operation":"REMOVE","number":39,"content":"                            file \u003d getFileForChange(it, project),"},{"operation":"REMOVE","number":40,"content":"                            oldFilename \u003d it.oldFileName,"},{"operation":"REMOVE","number":41,"content":"                            newFileName \u003d it.newFileName,"},{"operation":"REMOVE","number":42,"content":"                            lineChanges \u003d DiffParser(it.diff).lineChanges,"},{"operation":"REMOVE","number":43,"content":"                            annotatedLines \u003d annotatedLines)"},{"operation":"REMOVE","number":44,"content":"                    change.file.changes.add(change)"},{"operation":"REMOVE","number":45,"content":"                    change"},{"operation":"REMOVE","number":46,"content":"                }"},{"operation":"ADD","number":32,"content":"        changes.map { changeDTO -\u003e"},{"operation":"ADD","number":33,"content":"            val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":34,"content":"                    type \u003d changeDTO.type,"},{"operation":"ADD","number":35,"content":"                    file \u003d getFileForChange(changeDTO, project),"},{"operation":"ADD","number":36,"content":"                    oldFilename \u003d changeDTO.oldFileName,"},{"operation":"ADD","number":37,"content":"                    newFileName \u003d changeDTO.newFileName,"},{"operation":"ADD","number":38,"content":"                    lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"ADD","number":39,"content":"                    annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(commit, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":40,"content":"            change.file.changes.add(change)"},{"operation":"ADD","number":41,"content":"            change"},{"operation":"ADD","number":42,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":49,"content":"fun getMergeCommitChanges(commit: Commit, changeSets: List\u003cChangesData\u003e, project: Project): List\u003cChange\u003e {"},{"operation":"REMOVE","number":50,"content":"    return changeSets.flatMap { it.changes }.map { changeData -\u003e"},{"operation":"ADD","number":45,"content":"fun getMergeCommitChanges(commit: Commit, changes: List\u003cChangeDTO\u003e, project: Project): List\u003cChange\u003e {"},{"operation":"ADD","number":46,"content":"    return changes.map { changeDTO -\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":52,"content":"                type \u003d transformChangeType(changeData.type),"},{"operation":"REMOVE","number":53,"content":"                file \u003d getFileForChange(changeData, project),"},{"operation":"REMOVE","number":54,"content":"                oldFilename \u003d changeData.oldFileName,"},{"operation":"REMOVE","number":55,"content":"                newFileName \u003d changeData.newFileName,"},{"operation":"ADD","number":48,"content":"                type \u003d changeDTO.type,"},{"operation":"ADD","number":49,"content":"                file \u003d getFileForChange(changeDTO, project),"},{"operation":"ADD","number":50,"content":"                oldFilename \u003d changeDTO.oldFileName,"},{"operation":"ADD","number":51,"content":"                newFileName \u003d changeDTO.newFileName,"}]},{"lineChanges":[{"operation":"REMOVE","number":57,"content":"                annotatedLines \u003d changeData.annotatedLines.map { line -\u003e AnnotatedLine(project.commitRegistry.getByID(line.commitId)!!, line.lineNumber, line.content) }.toMutableList())"},{"operation":"ADD","number":53,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"}]},{"lineChanges":[{"operation":"REMOVE","number":63,"content":"private fun getFileForChange(changeData: ChangeData, project: Project): File {"},{"operation":"ADD","number":59,"content":"private fun getFileForChange(change: ChangeDTO, project: Project): File {"}]},{"lineChanges":[{"operation":"REMOVE","number":65,"content":"    val changeType \u003d transformChangeType(changeData.type)"},{"operation":"ADD","number":61,"content":"    val changeType \u003d change.type"}]},{"lineChanges":[{"operation":"REMOVE","number":71,"content":"            file \u003d project.fileRegistry.getByID(changeData.newFileName)"},{"operation":"ADD","number":67,"content":"            file \u003d project.fileRegistry.getByID(change.newFileName)"}]},{"lineChanges":[{"operation":"REMOVE","number":73,"content":"                file \u003d File(fullyQualifiedName \u003d changeData.newFileName, changes \u003d ArrayList())"},{"operation":"ADD","number":69,"content":"                file \u003d File(fullyQualifiedName \u003d change.newFileName, changes \u003d ArrayList())"}]},{"lineChanges":[{"operation":"REMOVE","number":78,"content":"            file \u003d project.fileRegistry.getByID(changeData.oldFileName)"},{"operation":"ADD","number":74,"content":"            file \u003d project.fileRegistry.getByID(change.oldFileName)"}]},{"lineChanges":[{"operation":"REMOVE","number":80,"content":"                System.err.println(\"File not found for rename change: $changeData\")"},{"operation":"ADD","number":76,"content":"                System.err.println(\"File not found for rename change: $change\")"}]},{"lineChanges":[{"operation":"REMOVE","number":82,"content":"                file.fullyQualifiedName \u003d changeData.newFileName"},{"operation":"ADD","number":78,"content":"                file.fullyQualifiedName \u003d change.newFileName"}]},{"lineChanges":[{"operation":"REMOVE","number":86,"content":"            file \u003d project.fileRegistry.getByID(changeData.newFileName)"},{"operation":"ADD","number":82,"content":"            file \u003d project.fileRegistry.getByID(change.newFileName)"}]},{"lineChanges":[{"operation":"REMOVE","number":88,"content":"                System.err.println(\"File not found for change: $changeData\")"},{"operation":"ADD","number":84,"content":"                System.err.println(\"File not found for change: $change\")"}]},{"lineChanges":[{"operation":"REMOVE","number":96,"content":"private fun transformChangeType(type: DiffEntry.ChangeType): ChangeType {"},{"operation":"REMOVE","number":97,"content":"    return when (type) {"},{"operation":"REMOVE","number":98,"content":"        DiffEntry.ChangeType.ADD -\u003e ChangeType.ADD"},{"operation":"REMOVE","number":99,"content":"        DiffEntry.ChangeType.COPY -\u003e ChangeType.COPY"},{"operation":"REMOVE","number":100,"content":"        DiffEntry.ChangeType.DELETE -\u003e ChangeType.DELETE"},{"operation":"REMOVE","number":101,"content":"        DiffEntry.ChangeType.MODIFY -\u003e ChangeType.MODIFY"},{"operation":"REMOVE","number":102,"content":"        DiffEntry.ChangeType.RENAME -\u003e ChangeType.RENAME"},{"operation":"REMOVE","number":103,"content":"    }"},{"operation":"REMOVE","number":104,"content":"}"},{"operation":"REMOVE","number":105,"content":""},{"operation":"REMOVE","number":106,"content":"private fun getCommitAuthor(commitData: CommitData, project: Project): Author {"},{"operation":"REMOVE","number":107,"content":"    val authorID \u003d AuthorID(name \u003d commitData.authorName, email \u003d commitData.authorEmail)"},{"operation":"ADD","number":92,"content":"private fun getCommitAuthor(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"ADD","number":93,"content":"    val authorID \u003d AuthorID(name \u003d commitDTO.authorName, email \u003d commitDTO.authorEmail)"}]},{"lineChanges":[{"operation":"REMOVE","number":119,"content":"    return parentIds.map { project.commitRegistry.getByID(it) }.filterNotNull()"},{"operation":"ADD","number":105,"content":"    return parentIds.mapNotNull { project.commitRegistry.getByID(it) }"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false},{"oldFileName":"src/test/java/ProjectTest.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"import org.dxworks.gitsecond.GitClient"},{"operation":"REMOVE","number":2,"content":"import org.dxworks.gitsecond.REPO_NAME"},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.Project"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"REMOVE","number":5,"content":"import org.eclipse.jgit.api.errors.GitAPIException"},{"operation":"REMOVE","number":6,"content":"import org.junit.jupiter.api.BeforeAll"},{"operation":"REMOVE","number":7,"content":"import org.junit.jupiter.api.Test"},{"operation":"REMOVE","number":8,"content":"import org.junit.jupiter.api.TestInstance"},{"operation":"REMOVE","number":9,"content":"import kotlin.test.assertEquals"},{"operation":"REMOVE","number":10,"content":"import kotlin.test.fail"},{"operation":"REMOVE","number":11,"content":""},{"operation":"REMOVE","number":12,"content":"@TestInstance(TestInstance.Lifecycle.PER_CLASS)"},{"operation":"REMOVE","number":13,"content":"class ProjectTest {"},{"operation":"REMOVE","number":14,"content":"    private val gitClient \u003d GitClient()"},{"operation":"REMOVE","number":15,"content":"    private lateinit var project: Project"},{"operation":"REMOVE","number":16,"content":""},{"operation":"REMOVE","number":17,"content":"    @BeforeAll"},{"operation":"REMOVE","number":18,"content":"    fun `initialize repository and create project`() {"},{"operation":"REMOVE","number":19,"content":"        try {"},{"operation":"REMOVE","number":20,"content":"            gitClient.cloneAndInitializeRepository(\"https://github.com/nagyDarius/gitLogTest.git\", REPO_NAME)"},{"operation":"REMOVE","number":21,"content":""},{"operation":"REMOVE","number":22,"content":"        } catch (e: GitAPIException) {"},{"operation":"REMOVE","number":23,"content":"            e.printStackTrace()"},{"operation":"REMOVE","number":24,"content":"            fail()"},{"operation":"REMOVE","number":25,"content":"        }"},{"operation":"REMOVE","number":26,"content":""},{"operation":"REMOVE","number":27,"content":"        val commitDatas \u003d gitClient.generateGitLogForDx(REPO_NAME).reversed()"},{"operation":"REMOVE","number":28,"content":"        project \u003d createProject(commitDatas, REPO_NAME)"},{"operation":"REMOVE","number":29,"content":"    }"},{"operation":"REMOVE","number":30,"content":""},{"operation":"REMOVE","number":31,"content":"    @Test"},{"operation":"REMOVE","number":32,"content":"    fun `all files at all commits should be correctly built`() {"},{"operation":"REMOVE","number":33,"content":"        project.fileRegistry.all.forEach { file -\u003e"},{"operation":"REMOVE","number":34,"content":"            file.changes.map { change -\u003e change.commit }.forEach { commit -\u003e"},{"operation":"REMOVE","number":35,"content":"                val fileContent \u003d gitClient.getFileContentForRepoAndRevision(file.fullyQualifiedName, REPO_NAME, commit.id)"},{"operation":"REMOVE","number":36,"content":"                val actual \u003d file.contentForRevision(commit).trim()"},{"operation":"REMOVE","number":37,"content":"                println(\"Commit: ${commit.isMergeCommit} ${commit.id}      expected for ${file.fullyQualifiedName}\")"},{"operation":"REMOVE","number":38,"content":"                println(fileContent.trim())"},{"operation":"REMOVE","number":39,"content":"                println()"},{"operation":"REMOVE","number":40,"content":"                println(\"Commit: ${commit.id}      actual for ${file.fullyQualifiedName}\")"},{"operation":"REMOVE","number":41,"content":"                println(actual)"},{"operation":"REMOVE","number":42,"content":"                print(\"\\n\\n\\n\\n\\n\")"},{"operation":"REMOVE","number":43,"content":"                assertEquals(fileContent.trim(), actual)"},{"operation":"REMOVE","number":44,"content":"            }"},{"operation":"REMOVE","number":45,"content":"        }"},{"operation":"REMOVE","number":46,"content":""},{"operation":"REMOVE","number":47,"content":"    }"},{"operation":"REMOVE","number":48,"content":""},{"operation":"REMOVE","number":49,"content":"    @Test"},{"operation":"REMOVE","number":50,"content":"    private fun `a random file from a random commit should be correctly built`() {"},{"operation":"REMOVE","number":51,"content":"        val file \u003d project.fileRegistry.all.random()"},{"operation":"REMOVE","number":52,"content":"        val commit \u003d file.changes.random().commit"},{"operation":"REMOVE","number":53,"content":"        val expectedContent \u003d gitClient.getFileContentForRepoAndRevision(file.fullyQualifiedName, REPO_NAME, commit.id).trim()"},{"operation":"REMOVE","number":54,"content":"        val myContent \u003d file.contentForRevision(commit).trim()"},{"operation":"REMOVE","number":55,"content":""},{"operation":"REMOVE","number":56,"content":"        assertEquals(expectedContent, myContent)"},{"operation":"REMOVE","number":57,"content":"    }"},{"operation":"REMOVE","number":58,"content":""},{"operation":"REMOVE","number":59,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"df22270bec3322ee418c191da2f11a90f867f384","isBinary":false,"isBlame":false}]},{"id":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","parentIds":["2fb277cef743fd198530398c6ed2557a6dfedc12"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 4, 2019, 4:44:21 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 4, 2019, 4:44:21 PM","message":"project creation works","changes":[{"oldFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":41,"content":"    val commits \u003d LogParser(gitClient).parse(gitClient.getLogs())"},{"operation":"ADD","number":41,"content":"    val commits \u003d LogParser(gitClient).parse(gitClient.getLogs().toMutableList())"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":19,"content":"        return ProjectDTO(commits.map { CommitParserFactory.create(it, gitClient).parse(it) })"},{"operation":"ADD","number":19,"content":"        return ProjectDTO(commits.map { CommitParserFactory.create(it, gitClient).parse(it) }.reversed())"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitsecond.model.ChangeType"}]},{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.gitsecond.model.ChangeType"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"            getChanges(lines).map { SimpleChangeParser().parse(lines) }"},{"operation":"ADD","number":9,"content":"            getChanges(lines).map { SimpleChangeParser().parse(it) }"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"const val REPO_NAME \u003d \"gitTest\""},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"fun main(args: Array\u003cString\u003e) {"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.parsers.LogParser"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"ADD","number":6,"content":"import java.nio.file.Paths"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"fun main() {"},{"operation":"ADD","number":9,"content":"    val gitClient \u003d GitClient(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"ADD","number":10,"content":"    val projectDTO \u003d LogParser(gitClient).parse(gitClient.getLogs().toMutableList())"},{"operation":"ADD","number":11,"content":"    val project \u003d createProject(projectDTO, \"TestProject\")"},{"operation":"ADD","number":12,"content":"    println(projectDTO)"},{"operation":"ADD","number":13,"content":"    println(project)"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"data class Change(var commit: Commit, var type: ChangeType, var file: File, var oldFilename: String, var newFileName: String, var lineChanges: MutableList\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":4,"content":"data class Change(var commit: Commit, var type: ChangeType, var file: File, var oldFilename: String, var newFileName: String, var lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"}]},{"lineChanges":[{"operation":"ADD","number":6,"content":"    val isRenameChange: Boolean"},{"operation":"ADD","number":7,"content":"        get() \u003d type \u003d\u003d ChangeType.RENAME"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e) : Change{"},{"operation":"REMOVE","number":8,"content":"        return commits.flatMap { it.changes }.find { it.file \u003d\u003d file } ?: getParentChange(commits.flatMap { it.parents })"},{"operation":"ADD","number":9,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e): Change {"},{"operation":"ADD","number":10,"content":"        return commits.flatMap { it.changes }.find { it.file \u003d\u003d file }"},{"operation":"ADD","number":11,"content":"                ?: getParentChange(commits.flatMap { it.parents })"}]},{"lineChanges":[{"operation":"REMOVE","number":42,"content":"    fun isRenameChange(): Boolean {"},{"operation":"REMOVE","number":43,"content":"        return type \u003d\u003d ChangeType.RENAME"},{"operation":"REMOVE","number":44,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":8,"content":""}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","newFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":27,"content":"    fun remove(id: ID): TYPE? {"},{"operation":"ADD","number":28,"content":"        return map.remove(id)"},{"operation":"ADD","number":29,"content":"    }"},{"operation":"ADD","number":30,"content":""}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.dto.ProjectDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"fun createProject(commitDtos: List\u003cCommitDTO\u003e, projectId: String): Project {"},{"operation":"ADD","number":8,"content":"fun createProject(projectDTO: ProjectDTO, projectId: String): Project {"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    commitDtos.forEach {"},{"operation":"ADD","number":11,"content":"    projectDTO.commits.forEach {"}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"    commit.changes \u003d if (commit.isMergeCommit)"},{"operation":"REMOVE","number":30,"content":"        getMergeCommitChanges(commit, changes, project)"},{"operation":"REMOVE","number":31,"content":"    else"},{"operation":"REMOVE","number":32,"content":"        changes.map { changeDTO -\u003e"},{"operation":"REMOVE","number":33,"content":"            val change \u003d Change(commit \u003d commit,"},{"operation":"REMOVE","number":34,"content":"                    type \u003d changeDTO.type,"},{"operation":"REMOVE","number":35,"content":"                    file \u003d getFileForChange(changeDTO, project),"},{"operation":"REMOVE","number":36,"content":"                    oldFilename \u003d changeDTO.oldFileName,"},{"operation":"REMOVE","number":37,"content":"                    newFileName \u003d changeDTO.newFileName,"},{"operation":"REMOVE","number":38,"content":"                    lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"REMOVE","number":39,"content":"                    annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(commit, it.number, it.content) }.toMutableList())"},{"operation":"REMOVE","number":40,"content":"            change.file.changes.add(change)"},{"operation":"REMOVE","number":41,"content":"            change"},{"operation":"REMOVE","number":42,"content":"        }"},{"operation":"REMOVE","number":43,"content":"}"},{"operation":"REMOVE","number":44,"content":""},{"operation":"REMOVE","number":45,"content":"fun getMergeCommitChanges(commit: Commit, changes: List\u003cChangeDTO\u003e, project: Project): List\u003cChange\u003e {"},{"operation":"REMOVE","number":46,"content":"    return changes.map { changeDTO -\u003e"},{"operation":"ADD","number":30,"content":"    commit.changes \u003d changes.map { changeDTO -\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":52,"content":"                lineChanges \u003d ArrayList(),"},{"operation":"REMOVE","number":53,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":36,"content":"                lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"ADD","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(commit, it.number, it.content) }.toMutableList())"}]},{"lineChanges":[{"operation":"ADD","number":62,"content":"                project.fileRegistry.remove(file.fullyQualifiedName)"}]},{"lineChanges":[{"operation":"ADD","number":64,"content":"                project.fileRegistry.add(file)"},{"operation":"ADD","number":65,"content":"            }"},{"operation":"ADD","number":66,"content":"        }"},{"operation":"ADD","number":67,"content":"        ChangeType.DELETE -\u003e {"},{"operation":"ADD","number":68,"content":"            file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"ADD","number":69,"content":"            if (file \u003d\u003d null) {"},{"operation":"ADD","number":70,"content":"                System.err.println(\"File not found for change: $change\")"},{"operation":"ADD","number":71,"content":"            } else {"},{"operation":"ADD","number":72,"content":"                file.isAlive \u003d false"}]}],"annotatedLines":[],"parentCommitId":"2fb277cef743fd198530398c6ed2557a6dfedc12","isBinary":false,"isBlame":false}]},{"id":"6b8f10969abd026a6fd124edf81401d93dec7298","parentIds":["27eba5650b73ca335948fa3a12f9ee4b6faf684b"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 4, 2019, 10:56:52 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 4, 2019, 10:56:52 PM","message":"project creation works better now, as intended hopefully","changes":[{"oldFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %at%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":53,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \").toLong())"},{"operation":"ADD","number":53,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \"))"}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":15,"content":"            val commitId \u003d commitIdAndOther[0]"},{"operation":"ADD","number":15,"content":"            val commitId \u003d commitIdAndOther[0].split(\" \")[0]"}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","newFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitsecond.model.Commit"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"    private val map: MutableMap\u003cID, TYPE\u003e \u003d HashMap()"},{"operation":"ADD","number":7,"content":"    val map: MutableMap\u003cID, TYPE\u003e \u003d HashMap()"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"    fun getByID(id: ID): TYPE? {"},{"operation":"ADD","number":16,"content":"    open fun getByID(id: ID): TYPE? {"}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/CommitRegistry.kt","newFileName":"src/main/java/org/dxworks/gitsecond/registries/CommitRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    override fun getByID(id: String): Commit? {"},{"operation":"ADD","number":8,"content":"        return if (id.startsWith(\"^\")) findByPrefix(id) else super.getByID(id)"},{"operation":"ADD","number":9,"content":"    }"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    private fun findByPrefix(id: String) \u003d all.find { it.id.startsWith(id.removePrefix(\"^\")) }"},{"operation":"ADD","number":12,"content":""}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":21,"content":"        addChangesToCommit(it.changes, commit, project)"},{"operation":"REMOVE","number":22,"content":"        author.commits.add(commit)"}]},{"lineChanges":[{"operation":"ADD","number":22,"content":"        author.commits.add(commit)"},{"operation":"ADD","number":23,"content":"        addChangesToCommit(it.changes, commit, project)"}]},{"lineChanges":[{"operation":"REMOVE","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(commit, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { println(\"\u003c${it.commitId}\u003e\"); AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"}]}],"annotatedLines":[],"parentCommitId":"27eba5650b73ca335948fa3a12f9ee4b6faf684b","isBinary":false,"isBlame":false}]},{"id":"4152d07bc5e3120f6d5133647d63b97ed7475893","parentIds":["6b8f10969abd026a6fd124edf81401d93dec7298"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 5, 2019, 10:06:28 AM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 5, 2019, 10:06:28 AM","message":"cleaned printlns","changes":[{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":15,"content":"        println(\"Commit: ${commit.id}      beforeChange for ${file.fullyQualifiedName}\")"},{"operation":"REMOVE","number":16,"content":"        println(annotatedLines.joinToString(\"\\n\") { \"${it.lineNumber} ${it.content}\" })"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"        println(\"Commit: ${commit.id}      after for ${file.fullyQualifiedName}\")"},{"operation":"REMOVE","number":21,"content":"        println(annotatedLines.joinToString(\"\\n\") { \"${it.lineNumber} ${it.content}\" })"},{"operation":"REMOVE","number":22,"content":"        print(\"\\n\\n\\n\")"}]}],"annotatedLines":[],"parentCommitId":"6b8f10969abd026a6fd124edf81401d93dec7298","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { println(\"\u003c${it.commitId}\u003e\"); AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"}]}],"annotatedLines":[],"parentCommitId":"6b8f10969abd026a6fd124edf81401d93dec7298","isBinary":false,"isBlame":false}]},{"id":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","parentIds":["4152d07bc5e3120f6d5133647d63b97ed7475893"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 5, 2019, 1:36:46 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 5, 2019, 1:36:46 PM","message":"refactored file and created toStrings","changes":[{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/AnnotatedLine.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/AnnotatedLine.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"data class AnnotatedLine(var commit: Commit, var lineNumber: Int, var content: String) {"},{"operation":"REMOVE","number":4,"content":"    override fun equals(other: Any?): Boolean {"},{"operation":"REMOVE","number":5,"content":"        if (other is AnnotatedLine)"},{"operation":"REMOVE","number":6,"content":"            return (commit.id \u003d\u003d other.commit.id).and(lineNumber \u003d\u003d other.lineNumber).and(content \u003d\u003d other.content)"},{"operation":"REMOVE","number":7,"content":"        else"},{"operation":"REMOVE","number":8,"content":"            return false"},{"operation":"ADD","number":3,"content":"data class AnnotatedLine(var commit: Commit, var number: Int, var content: String) {"},{"operation":"ADD","number":4,"content":"    override fun toString(): String {"},{"operation":"ADD","number":5,"content":"        return \"${commit.id} (${commit.author.id} ${commit.date} $number) $content\""}]}],"annotatedLines":[],"parentCommitId":"4152d07bc5e3120f6d5133647d63b97ed7475893","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/AuthorID.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/AuthorID.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":4,"content":"    override fun toString(): String {"},{"operation":"ADD","number":5,"content":"        return \"$name \u003c$email\u003e\""},{"operation":"ADD","number":6,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"4152d07bc5e3120f6d5133647d63b97ed7475893","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":23,"content":"                .forEach { removeChange -\u003e newAnnotatedLines.removeIf { it.lineNumber \u003d\u003d removeChange.lineNumber \u0026\u0026 it.content \u003d\u003d removeChange.content } }"},{"operation":"ADD","number":23,"content":"                .forEach { removeChange -\u003e newAnnotatedLines.removeIf { it.number \u003d\u003d removeChange.lineNumber \u0026\u0026 it.content \u003d\u003d removeChange.content } }"}]},{"lineChanges":[{"operation":"REMOVE","number":37,"content":"        annotatedLines.forEachIndexed { index, annotatedLine -\u003e annotatedLine.lineNumber \u003d index + 1 }"},{"operation":"ADD","number":37,"content":"        annotatedLines.forEachIndexed { index, annotatedLine -\u003e annotatedLine.number \u003d index + 1 }"}]}],"annotatedLines":[],"parentCommitId":"4152d07bc5e3120f6d5133647d63b97ed7475893","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import java.util.*"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"data class File(var fullyQualifiedName: String, var changes: MutableList\u003cChange\u003e, var aliases: MutableList\u003cString\u003e \u003d Collections.singletonList(fullyQualifiedName), var isAlive: Boolean \u003d true) {"},{"operation":"ADD","number":6,"content":"data class File(var fullyQualifiedName: String, var isAlive: Boolean \u003d true) {"},{"operation":"ADD","number":7,"content":"    val changes: MutableMap\u003cString, Change\u003e \u003d HashMap()"},{"operation":"ADD","number":8,"content":"    val aliases: MutableMap\u003cString, String\u003e \u003d HashMap()"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    fun contentForRevision(commit: Commit): String {"},{"operation":"REMOVE","number":10,"content":"        val changeForCommit \u003d changes.first { it.commit \u003d\u003d commit }"},{"operation":"ADD","number":10,"content":"    fun annotatedLinesForRevision(commit: Commit): List\u003cAnnotatedLine\u003e? {"},{"operation":"ADD","number":11,"content":"        val change \u003d changes[commit.id]"},{"operation":"ADD","number":12,"content":"        return change?.annotatedLines ?: getLastChange(commit.parents).annotatedLines"},{"operation":"ADD","number":13,"content":"    }"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    private fun getLastChange(commits: List\u003cCommit\u003e): Change {"},{"operation":"ADD","number":16,"content":"        return commits.mapNotNull { changes[it.id] }"},{"operation":"ADD","number":17,"content":"                .firstOrNull() ?: getLastChange(commits.flatMap { it.parents })"},{"operation":"ADD","number":18,"content":"    }"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"        return changeForCommit.annotatedLines.joinToString(separator \u003d \"\\n\") { it.content }"},{"operation":"ADD","number":20,"content":"    fun addChange(change: Change) {"},{"operation":"ADD","number":21,"content":"        changes[change.commit.id] \u003d change"},{"operation":"ADD","number":22,"content":"        aliases[change.commit.id] \u003d change.newFileName"}]},{"lineChanges":[{"operation":"ADD","number":25,"content":""}]}],"annotatedLines":[],"parentCommitId":"4152d07bc5e3120f6d5133647d63b97ed7475893","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":38,"content":"        change.file.changes.add(change)"},{"operation":"ADD","number":38,"content":"        change.file.addChange(change)"}]},{"lineChanges":[{"operation":"REMOVE","number":53,"content":"                file \u003d File(fullyQualifiedName \u003d change.newFileName, changes \u003d ArrayList())"},{"operation":"ADD","number":53,"content":"                file \u003d File(fullyQualifiedName \u003d change.newFileName)"}]}],"annotatedLines":[],"parentCommitId":"4152d07bc5e3120f6d5133647d63b97ed7475893","isBinary":false,"isBlame":false}]},{"id":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","parentIds":["a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 9, 2019, 4:07:40 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 9, 2019, 4:07:40 PM","message":"fixed al lot of bugs, transformation completed on kafka","changes":[{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":105,"content":""},{"operation":"ADD","number":106,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":107,"content":"            \u003cgroupId\u003eorg.slf4j\u003c/groupId\u003e"},{"operation":"ADD","number":108,"content":"            \u003cartifactId\u003eslf4j-api\u003c/artifactId\u003e"},{"operation":"ADD","number":109,"content":"            \u003cversion\u003e1.8.0-beta2\u003c/version\u003e"},{"operation":"ADD","number":110,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":111,"content":""},{"operation":"ADD","number":112,"content":"        \u003c!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --\u003e"},{"operation":"ADD","number":113,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":114,"content":"            \u003cgroupId\u003ech.qos.logback\u003c/groupId\u003e"},{"operation":"ADD","number":115,"content":"            \u003cartifactId\u003elogback-classic\u003c/artifactId\u003e"},{"operation":"ADD","number":116,"content":"            \u003cversion\u003e1.3.0-alpha4\u003c/version\u003e"},{"operation":"ADD","number":117,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":118,"content":""},{"operation":"ADD","number":119,"content":""}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import lombok.extern.slf4j.Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.slf4j.LoggerFactory"},{"operation":"ADD","number":6,"content":"import java.io.BufferedReader"}]},{"lineChanges":[{"operation":"ADD","number":10,"content":"@Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":12,"content":"    companion object {"},{"operation":"ADD","number":13,"content":"        private val LOG \u003d LoggerFactory.getLogger(GitClient::class.java)"},{"operation":"ADD","number":14,"content":"    }"},{"operation":"ADD","number":15,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    private val gitLogCommand \u003d \"$git log -M5% -c -U0 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":17,"content":"    private val gitLogCommand \u003d \"$git log -M25% -c -U0 --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""}]},{"lineChanges":[{"operation":"ADD","number":26,"content":"        LOG.info(\"Running log command: $gitLogCommand\")"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"        return if (process.waitFor() \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":29,"content":"        val reader \u003d BufferedReader(process.inputStream.reader())"},{"operation":"ADD","number":30,"content":"        val lines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":31,"content":"        reader.forEachLine { lines.add(it) }"},{"operation":"ADD","number":32,"content":"        return if (process.waitFor() \u003d\u003d 0) {"},{"operation":"ADD","number":33,"content":"            LOG.info(\"Log command finished\")"},{"operation":"ADD","number":34,"content":"            lines"},{"operation":"ADD","number":35,"content":"        } else throw RuntimeException(\"Git command failed\")"}]},{"lineChanges":[{"operation":"ADD","number":39,"content":"        LOG.info(\"Running blame command: $gitBlameCommand\")"}]},{"lineChanges":[{"operation":"REMOVE","number":26,"content":"        return if (process.waitFor() \u003d\u003d 0) splitOutput(process) else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":42,"content":"        val reader \u003d BufferedReader(process.inputStream.reader())"},{"operation":"ADD","number":43,"content":"        val lines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"ADD","number":44,"content":"        reader.forEachLine { lines.add(it) }"},{"operation":"ADD","number":45,"content":"        return if (process.waitFor() \u003d\u003d 0) {"},{"operation":"ADD","number":46,"content":"            LOG.info(\"Blame command finished\")"},{"operation":"ADD","number":47,"content":"            lines"},{"operation":"ADD","number":48,"content":"        } else throw RuntimeException(\"Git command failed\")"}]},{"lineChanges":[{"operation":"REMOVE","number":28,"content":""},{"operation":"REMOVE","number":29,"content":"    private fun splitOutput(process: Process) \u003d String(process.inputStream.readAllBytes()).split(\"\\n\")"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import lombok.extern.slf4j.Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":6,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"@Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":10,"content":"    companion object {"},{"operation":"ADD","number":11,"content":"        private val LOG \u003d LoggerFactory.getLogger(LogParser::class.java)"},{"operation":"ADD","number":12,"content":"    }"},{"operation":"ADD","number":13,"content":""}]},{"lineChanges":[{"operation":"ADD","number":19,"content":"        LOG.info(\"Extracting commits\")"}]},{"lineChanges":[{"operation":"ADD","number":27,"content":"        LOG.info(\"Found ${commits.size} commits\")"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import lombok.extern.slf4j.Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":9,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"ADD","number":11,"content":"@Slf4j"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    private val oldFileNameLinePrefix \u003d \"--- \""},{"operation":"REMOVE","number":11,"content":"    private val newFileNameLinePrefix \u003d \"+++ \""},{"operation":"ADD","number":13,"content":"    companion object {"},{"operation":"ADD","number":14,"content":"        private val LOG \u003d LoggerFactory.getLogger(ChangeParser::class.java)"},{"operation":"ADD","number":15,"content":"    }"},{"operation":"ADD","number":16,"content":""},{"operation":"ADD","number":17,"content":"    private val devNull \u003d \"dev/null\""}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":"        lines.removeAt(0)"},{"operation":"REMOVE","number":15,"content":"        val (oldFileName, newFileName) \u003d extractFileNames(lines)"},{"operation":"ADD","number":20,"content":"        val type \u003d extractChangeType(lines)"},{"operation":"ADD","number":21,"content":"        val (oldFileName, newFileName) \u003d extractFileNames(lines, type)"},{"operation":"ADD","number":22,"content":"        LOG.info(\"Parsing $type change: $oldFileName -\u003e $newFileName\")"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"                type \u003d extractChangeType(lines),"},{"operation":"ADD","number":24,"content":"                type \u003d type,"}]},{"lineChanges":[{"operation":"REMOVE","number":31,"content":"        lines.forEach {"},{"operation":"REMOVE","number":32,"content":"            if (it.startsWith(\"@\")) {"},{"operation":"REMOVE","number":33,"content":"                currentHunkLines \u003d ArrayList()"},{"operation":"REMOVE","number":34,"content":"                hunks.add(currentHunkLines)"},{"operation":"ADD","number":38,"content":"        LOG.info(\"Extracting hunks\")"},{"operation":"ADD","number":39,"content":"        val firstHunkIndex \u003d lines.indexOfFirst { it.startsWith(\"@\") }"},{"operation":"ADD","number":40,"content":"        return if (firstHunkIndex \u003d\u003d -1)"},{"operation":"ADD","number":41,"content":"            emptyList()"},{"operation":"ADD","number":42,"content":"        else {"},{"operation":"ADD","number":43,"content":"            lines.subList(firstHunkIndex, lines.size).forEach {"},{"operation":"ADD","number":44,"content":"                if (it.startsWith(\"@\")) {"},{"operation":"ADD","number":45,"content":"                    currentHunkLines \u003d ArrayList()"},{"operation":"ADD","number":46,"content":"                    hunks.add(currentHunkLines)"},{"operation":"ADD","number":47,"content":"                }"},{"operation":"ADD","number":48,"content":"                currentHunkLines.add(it)"}]},{"lineChanges":[{"operation":"REMOVE","number":36,"content":"            currentHunkLines.add(it)"},{"operation":"ADD","number":50,"content":"            LOG.info(\"Found ${hunks.size} hunks\")"},{"operation":"ADD","number":51,"content":"            hunks"}]},{"lineChanges":[{"operation":"REMOVE","number":38,"content":"        return hunks"}]},{"lineChanges":[{"operation":"REMOVE","number":42,"content":"        val changeTypeLine \u003d lines.removeAt(0)"},{"operation":"REMOVE","number":43,"content":"        return when {"},{"operation":"REMOVE","number":44,"content":"            changeTypeLine.startsWith(\"new file mode\") -\u003e {"},{"operation":"REMOVE","number":45,"content":"                lines.removeAt(0)"},{"operation":"REMOVE","number":46,"content":"                ChangeType.ADD"},{"operation":"REMOVE","number":47,"content":"            }"},{"operation":"REMOVE","number":48,"content":"            changeTypeLine.startsWith(\"deleted file mode\") -\u003e {"},{"operation":"REMOVE","number":49,"content":"                lines.removeAt(0)"},{"operation":"REMOVE","number":50,"content":"                ChangeType.DELETE"},{"operation":"REMOVE","number":51,"content":"            }"},{"operation":"REMOVE","number":52,"content":"            changeTypeLine.startsWith(\"similarity index\") -\u003e {"},{"operation":"REMOVE","number":53,"content":"                lines.removeAt(0)"},{"operation":"REMOVE","number":54,"content":"                lines.removeAt(0)"},{"operation":"REMOVE","number":55,"content":"                lines.removeAt(0)"},{"operation":"REMOVE","number":56,"content":"                ChangeType.RENAME"},{"operation":"REMOVE","number":57,"content":"            }"},{"operation":"REMOVE","number":58,"content":"            else -\u003e ChangeType.MODIFY"},{"operation":"ADD","number":56,"content":"        var changeTypeLine \u003d lines.find { it.startsWith(\"new file mode\") }"},{"operation":"ADD","number":57,"content":"        if (changeTypeLine !\u003d null)"},{"operation":"ADD","number":58,"content":"            return ChangeType.ADD"},{"operation":"ADD","number":59,"content":"        changeTypeLine \u003d lines.find { it.startsWith(\"deleted file mode\") }"},{"operation":"ADD","number":60,"content":"        if (changeTypeLine !\u003d null)"},{"operation":"ADD","number":61,"content":"            return ChangeType.DELETE"},{"operation":"ADD","number":62,"content":"        changeTypeLine \u003d lines.find { it.startsWith(\"similarity index\") }"},{"operation":"ADD","number":63,"content":"        if (changeTypeLine !\u003d null)"},{"operation":"ADD","number":64,"content":"            return ChangeType.RENAME"},{"operation":"ADD","number":65,"content":"        return ChangeType.MODIFY"},{"operation":"ADD","number":66,"content":"    }"},{"operation":"ADD","number":67,"content":""},{"operation":"ADD","number":68,"content":""},{"operation":"ADD","number":69,"content":"    private fun extractFileNames(lines: MutableList\u003cString\u003e, type: ChangeType): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":70,"content":"        val diffLine \u003d lines.removeAt(0)"},{"operation":"ADD","number":71,"content":"        return when (type) {"},{"operation":"ADD","number":72,"content":"            ChangeType.ADD -\u003e extractFileNames(diffLine, fromName \u003d devNull)"},{"operation":"ADD","number":73,"content":"            ChangeType.DELETE -\u003e extractFileNames(diffLine, toName \u003d devNull)"},{"operation":"ADD","number":74,"content":"            else -\u003e extractFileNames(diffLine)"}]},{"lineChanges":[{"operation":"REMOVE","number":62,"content":"    private fun extractFileNames(lines: MutableList\u003cString\u003e): Pair\u003cString, String\u003e {"},{"operation":"REMOVE","number":63,"content":"        val oldFileNameLineIndex \u003d lines.indexOfFirst { it.startsWith(oldFileNameLinePrefix) }"},{"operation":"REMOVE","number":64,"content":"        return Pair(first \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(oldFileNameLinePrefix).removePrefix(\"a\"),"},{"operation":"REMOVE","number":65,"content":"                second \u003d lines.removeAt(oldFileNameLineIndex).removePrefix(newFileNameLinePrefix).removePrefix(\"b\"))"},{"operation":"ADD","number":78,"content":"    private fun extractFileNames(line: String, fromName: String? \u003d null, toName: String? \u003d null): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":79,"content":"        val fromNameIndex \u003d line.indexOf(\"a/\") + 2"},{"operation":"ADD","number":80,"content":"        val lastSpaceIndex \u003d line.lastIndexOf(\" \")"},{"operation":"ADD","number":81,"content":"        val toNameIndex \u003d lastSpaceIndex + 3"},{"operation":"ADD","number":82,"content":"        return if (line.contains(\"--combined\")) {"},{"operation":"ADD","number":83,"content":"            val fileName \u003d line.substring(lastSpaceIndex).trim()"},{"operation":"ADD","number":84,"content":"            Pair(fileName, fileName)"},{"operation":"ADD","number":85,"content":"        } else Pair((fromName ?: line.substring(fromNameIndex, lastSpaceIndex)).trim(),"},{"operation":"ADD","number":86,"content":"                (toName ?: line.substring(toNameIndex)).trim())"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import lombok.extern.slf4j.Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.gitinspector.parsers.LogParser"},{"operation":"ADD","number":8,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"ADD","number":11,"content":"@Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":13,"content":"    companion object {"},{"operation":"ADD","number":14,"content":"        private val LOG \u003d LoggerFactory.getLogger(CommitParser::class.java)"},{"operation":"ADD","number":15,"content":"    }"},{"operation":"ADD","number":16,"content":""}]},{"lineChanges":[{"operation":"ADD","number":19,"content":"        LOG.info(\"Parsing commit with id: $commitId\")"}]},{"lineChanges":[{"operation":"ADD","number":35,"content":"        LOG.info(\"Extracting changes\")"}]},{"lineChanges":[{"operation":"ADD","number":43,"content":"        LOG.info(\"Found ${changes.size} changes\")"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.transformers.createProject"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitsecond.transformers.OptimusSecond"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    val gitClient \u003d GitClient(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"ADD","number":9,"content":"    val gitClient \u003d GitClient(Paths.get(\"/home/darius/.dx-platform/projects/kafka/repository/kafka\"))"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    val project \u003d createProject(projectDTO, \"TestProject\")"},{"operation":"ADD","number":11,"content":"    val project \u003d OptimusSecond.createProject(projectDTO, \"TestProject\")"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e): Change {"},{"operation":"REMOVE","number":10,"content":"        return commits.flatMap { it.changes }.find { it.file \u003d\u003d file }"},{"operation":"ADD","number":9,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e): Change? {"},{"operation":"ADD","number":10,"content":"        return if (commits.isEmpty()) null"},{"operation":"ADD","number":11,"content":"        else commits.flatMap { it.changes }.find { it.file \u003d\u003d file }"}]},{"lineChanges":[{"operation":"REMOVE","number":26,"content":"            val annotatedLine \u003d AnnotatedLine(commit, it.lineNumber, it.content)"},{"operation":"REMOVE","number":27,"content":"            newAnnotatedLines.add(it.lineNumber - 1, annotatedLine)"},{"operation":"ADD","number":27,"content":"            newAnnotatedLines.add(AnnotatedLine(commit, it.lineNumber, it.content))"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    fun annotatedLinesForRevision(commit: Commit): List\u003cAnnotatedLine\u003e? {"},{"operation":"ADD","number":10,"content":"    fun annotatedLinesForRevision(commit: Commit): List\u003cAnnotatedLine\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"        return change?.annotatedLines ?: getLastChange(commit.parents).annotatedLines"},{"operation":"ADD","number":12,"content":"        return change?.annotatedLines ?: getLastChangeAnnotatedLines(commit.parents)"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":"    private fun getLastChange(commits: List\u003cCommit\u003e): Change {"},{"operation":"REMOVE","number":16,"content":"        return commits.mapNotNull { changes[it.id] }"},{"operation":"REMOVE","number":17,"content":"                .firstOrNull() ?: getLastChange(commits.flatMap { it.parents })"},{"operation":"ADD","number":15,"content":"    private fun getLastChangeAnnotatedLines(commits: List\u003cCommit\u003e): List\u003cAnnotatedLine\u003e {"},{"operation":"ADD","number":16,"content":"        return if (commits.isEmpty())"},{"operation":"ADD","number":17,"content":"            return emptyList()"},{"operation":"ADD","number":18,"content":"        else"},{"operation":"ADD","number":19,"content":"            commits.mapNotNull { changes[it.id] }"},{"operation":"ADD","number":20,"content":"                    .firstOrNull()?.annotatedLines ?: getLastChangeAnnotatedLines(commits.flatMap { it.parents })"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Project.kt","newFileName":"src/main/java/org/dxworks/gitsecond/model/Project.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    val authorRegistry: AuthorRegistry \u003d AuthorRegistry()"},{"operation":"REMOVE","number":10,"content":"    val commitRegistry: CommitRegistry \u003d CommitRegistry()"},{"operation":"REMOVE","number":11,"content":"    val fileRegistry: FileRegistry \u003d FileRegistry()"},{"operation":"REMOVE","number":12,"content":""},{"operation":"ADD","number":9,"content":"    val authorRegistry \u003d AuthorRegistry()"},{"operation":"ADD","number":10,"content":"    val commitRegistry \u003d CommitRegistry()"},{"operation":"ADD","number":11,"content":"    val fileRegistry \u003d FileRegistry()"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import lombok.extern.slf4j.Slf4j"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"fun createProject(projectDTO: ProjectDTO, projectId: String): Project {"},{"operation":"REMOVE","number":9,"content":"    val project \u003d Project(projectId)"},{"operation":"ADD","number":10,"content":"@Slf4j"},{"operation":"ADD","number":11,"content":"class OptimusSecond() {"},{"operation":"ADD","number":12,"content":"    companion object {"},{"operation":"ADD","number":13,"content":"        private val LOG \u003d LoggerFactory.getLogger(OptimusSecond::class.java)"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    projectDTO.commits.forEach {"},{"operation":"REMOVE","number":12,"content":"        val author \u003d getCommitAuthor(it, project)"},{"operation":"ADD","number":15,"content":"        fun createProject(projectDTO: ProjectDTO, projectId: String): Project {"},{"operation":"ADD","number":16,"content":"            val project \u003d Project(projectId)"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":"        val commit \u003d Commit(id \u003d it.id,"},{"operation":"REMOVE","number":15,"content":"                message \u003d it.message,"},{"operation":"REMOVE","number":16,"content":"                date \u003d it.date,"},{"operation":"REMOVE","number":17,"content":"                author \u003d author,"},{"operation":"REMOVE","number":18,"content":"                parents \u003d getParentFromIds(it.parentIds, project),"},{"operation":"REMOVE","number":19,"content":"                changes \u003d ArrayList())"},{"operation":"ADD","number":18,"content":"            projectDTO.commits.forEach {"},{"operation":"ADD","number":19,"content":"                LOG.info(\"Creating commit with id: ${it.id}\")"}]},{"lineChanges":[{"operation":"REMOVE","number":21,"content":"        project.commitRegistry.add(commit)"},{"operation":"REMOVE","number":22,"content":"        author.commits.add(commit)"},{"operation":"REMOVE","number":23,"content":"        addChangesToCommit(it.changes, commit, project)"},{"operation":"REMOVE","number":24,"content":"    }"},{"operation":"REMOVE","number":25,"content":""},{"operation":"REMOVE","number":26,"content":"    return project"},{"operation":"REMOVE","number":27,"content":"}"},{"operation":"REMOVE","number":28,"content":""},{"operation":"REMOVE","number":29,"content":"private fun addChangesToCommit(changes: List\u003cChangeDTO\u003e, commit: Commit, project: Project) {"},{"operation":"REMOVE","number":30,"content":"    commit.changes \u003d changes.map { changeDTO -\u003e"},{"operation":"REMOVE","number":31,"content":"        val change \u003d Change(commit \u003d commit,"},{"operation":"REMOVE","number":32,"content":"                type \u003d changeDTO.type,"},{"operation":"REMOVE","number":33,"content":"                file \u003d getFileForChange(changeDTO, project),"},{"operation":"REMOVE","number":34,"content":"                oldFilename \u003d changeDTO.oldFileName,"},{"operation":"REMOVE","number":35,"content":"                newFileName \u003d changeDTO.newFileName,"},{"operation":"REMOVE","number":36,"content":"                lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"REMOVE","number":37,"content":"                annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"},{"operation":"REMOVE","number":38,"content":"        change.file.addChange(change)"},{"operation":"REMOVE","number":39,"content":"        change"},{"operation":"REMOVE","number":40,"content":"    }"},{"operation":"REMOVE","number":41,"content":"}"},{"operation":"REMOVE","number":42,"content":""},{"operation":"REMOVE","number":43,"content":"private fun getFileForChange(change: ChangeDTO, project: Project): File {"},{"operation":"REMOVE","number":44,"content":""},{"operation":"REMOVE","number":45,"content":"    val changeType \u003d change.type"},{"operation":"ADD","number":21,"content":"                val author \u003d getCommitAuthor(it, project)"},{"operation":"ADD","number":22,"content":"                val commit \u003d Commit(id \u003d it.id,"},{"operation":"ADD","number":23,"content":"                        message \u003d it.message,"},{"operation":"ADD","number":24,"content":"                        date \u003d it.date,"},{"operation":"ADD","number":25,"content":"                        author \u003d author,"},{"operation":"ADD","number":26,"content":"                        parents \u003d getParentFromIds(it.parentIds, project),"},{"operation":"ADD","number":27,"content":"                        changes \u003d ArrayList())"}]},{"lineChanges":[{"operation":"REMOVE","number":47,"content":"    var file: File?"},{"operation":"ADD","number":29,"content":"                project.commitRegistry.add(commit)"},{"operation":"ADD","number":30,"content":"                author.commits.add(commit)"},{"operation":"ADD","number":31,"content":"                addChangesToCommit(it.changes, commit, project)"}]},{"lineChanges":[{"operation":"REMOVE","number":49,"content":"    when (changeType) {"},{"operation":"REMOVE","number":50,"content":"        ChangeType.ADD -\u003e {"},{"operation":"REMOVE","number":51,"content":"            file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"REMOVE","number":52,"content":"            if (file \u003d\u003d null) {"},{"operation":"REMOVE","number":53,"content":"                file \u003d File(fullyQualifiedName \u003d change.newFileName)"},{"operation":"REMOVE","number":54,"content":"                project.fileRegistry.add(file)"},{"operation":"REMOVE","number":55,"content":"            }"},{"operation":"REMOVE","number":56,"content":"        }"},{"operation":"REMOVE","number":57,"content":"        ChangeType.RENAME -\u003e {"},{"operation":"REMOVE","number":58,"content":"            file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"REMOVE","number":59,"content":"            if (file \u003d\u003d null) {"},{"operation":"REMOVE","number":60,"content":"                System.err.println(\"File not found for rename change: $change\")"},{"operation":"REMOVE","number":61,"content":"            } else {"},{"operation":"REMOVE","number":62,"content":"                project.fileRegistry.remove(file.fullyQualifiedName)"},{"operation":"REMOVE","number":63,"content":"                file.fullyQualifiedName \u003d change.newFileName"},{"operation":"REMOVE","number":64,"content":"                project.fileRegistry.add(file)"},{"operation":"ADD","number":33,"content":"                LOG.info(\"Done creating commit with id: ${it.id}\")"}]},{"lineChanges":[{"operation":"ADD","number":35,"content":""},{"operation":"ADD","number":36,"content":"            return project"}]},{"lineChanges":[{"operation":"REMOVE","number":67,"content":"        ChangeType.DELETE -\u003e {"},{"operation":"REMOVE","number":68,"content":"            file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"REMOVE","number":69,"content":"            if (file \u003d\u003d null) {"},{"operation":"REMOVE","number":70,"content":"                System.err.println(\"File not found for change: $change\")"},{"operation":"REMOVE","number":71,"content":"            } else {"},{"operation":"REMOVE","number":72,"content":"                file.isAlive \u003d false"},{"operation":"ADD","number":38,"content":""},{"operation":"ADD","number":39,"content":"        private fun addChangesToCommit(changes: List\u003cChangeDTO\u003e, commit: Commit, project: Project) {"},{"operation":"ADD","number":40,"content":"            commit.changes \u003d changes.map { changeDTO -\u003e"},{"operation":"ADD","number":41,"content":"                LOG.info(\"Creating ${changeDTO.type} change for file: ${changeDTO.oldFileName} -\u003e ${changeDTO.newFileName}\")"},{"operation":"ADD","number":42,"content":"                val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":43,"content":"                        type \u003d changeDTO.type,"},{"operation":"ADD","number":44,"content":"                        file \u003d getFileForChange(changeDTO, project),"},{"operation":"ADD","number":45,"content":"                        oldFilename \u003d changeDTO.oldFileName,"},{"operation":"ADD","number":46,"content":"                        newFileName \u003d changeDTO.newFileName,"},{"operation":"ADD","number":47,"content":"                        lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"ADD","number":48,"content":"                        annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":49,"content":"                change.file.addChange(change)"},{"operation":"ADD","number":50,"content":"                LOG.info(\"Change created\")"},{"operation":"ADD","number":51,"content":"                change"}]},{"lineChanges":[{"operation":"REMOVE","number":75,"content":"        else -\u003e {"},{"operation":"REMOVE","number":76,"content":"            file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"REMOVE","number":77,"content":"            if (file \u003d\u003d null) {"},{"operation":"REMOVE","number":78,"content":"                System.err.println(\"File not found for change: $change\")"},{"operation":"ADD","number":54,"content":""},{"operation":"ADD","number":55,"content":"        private fun getFileForChange(change: ChangeDTO, project: Project): File {"},{"operation":"ADD","number":56,"content":"            LOG.info(\"Getting file\")"},{"operation":"ADD","number":57,"content":"            val changeType \u003d change.type"},{"operation":"ADD","number":58,"content":""},{"operation":"ADD","number":59,"content":"            var file: File?"},{"operation":"ADD","number":60,"content":""},{"operation":"ADD","number":61,"content":"            when (changeType) {"},{"operation":"ADD","number":62,"content":"                ChangeType.ADD -\u003e {"},{"operation":"ADD","number":63,"content":"                    file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"ADD","number":64,"content":"                    if (file \u003d\u003d null) {"},{"operation":"ADD","number":65,"content":"                        file \u003d File(fullyQualifiedName \u003d change.newFileName)"},{"operation":"ADD","number":66,"content":"                        project.fileRegistry.add(file)"},{"operation":"ADD","number":67,"content":"                    }"},{"operation":"ADD","number":68,"content":"                }"},{"operation":"ADD","number":69,"content":"                ChangeType.RENAME -\u003e {"},{"operation":"ADD","number":70,"content":"                    file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"ADD","number":71,"content":"                    if (file \u003d\u003d null) {"},{"operation":"ADD","number":72,"content":"                        System.err.println(\"File not found for rename change: $change\")"},{"operation":"ADD","number":73,"content":"                    } else {"},{"operation":"ADD","number":74,"content":"                        file.fullyQualifiedName \u003d change.newFileName"},{"operation":"ADD","number":75,"content":"                        project.fileRegistry.add(file)"},{"operation":"ADD","number":76,"content":"                    }"},{"operation":"ADD","number":77,"content":"                }"},{"operation":"ADD","number":78,"content":"                ChangeType.DELETE -\u003e {"},{"operation":"ADD","number":79,"content":"                    file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"ADD","number":80,"content":"                    if (file \u003d\u003d null) {"},{"operation":"ADD","number":81,"content":"                        System.err.println(\"File not found for change: $change\")"},{"operation":"ADD","number":82,"content":"                    } else {"},{"operation":"ADD","number":83,"content":"                        file.isAlive \u003d false"},{"operation":"ADD","number":84,"content":"                    }"},{"operation":"ADD","number":85,"content":"                }"},{"operation":"ADD","number":86,"content":"                else -\u003e {"},{"operation":"ADD","number":87,"content":"                    file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"ADD","number":88,"content":"                    if (file \u003d\u003d null) {"},{"operation":"ADD","number":89,"content":"                        System.err.println(\"File not found for change: $change\")"},{"operation":"ADD","number":90,"content":"                        file \u003d File(fullyQualifiedName \u003d change.newFileName)"},{"operation":"ADD","number":91,"content":"                        project.fileRegistry.add(file)"},{"operation":"ADD","number":92,"content":"                        project.wrongRegistry.add(file, change.newFileName)"},{"operation":"ADD","number":93,"content":"                    }"},{"operation":"ADD","number":94,"content":"                }"}]},{"lineChanges":[{"operation":"REMOVE","number":80,"content":"        }"},{"operation":"REMOVE","number":81,"content":"    }"}]},{"lineChanges":[{"operation":"REMOVE","number":83,"content":"    return file!!"},{"operation":"REMOVE","number":84,"content":"}"},{"operation":"ADD","number":97,"content":"            return file!!"},{"operation":"ADD","number":98,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":86,"content":"private fun getCommitAuthor(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"REMOVE","number":87,"content":"    val authorID \u003d AuthorID(name \u003d commitDTO.authorName, email \u003d commitDTO.authorEmail)"},{"operation":"ADD","number":100,"content":"        private fun getCommitAuthor(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"ADD","number":101,"content":"            val authorID \u003d AuthorID(name \u003d commitDTO.authorName, email \u003d commitDTO.authorEmail)"}]},{"lineChanges":[{"operation":"REMOVE","number":89,"content":"    var author \u003d project.authorRegistry.getByID(authorID)"},{"operation":"REMOVE","number":90,"content":"    if (author \u003d\u003d null) {"},{"operation":"REMOVE","number":91,"content":"        author \u003d Author(id \u003d authorID, commits \u003d ArrayList())"},{"operation":"REMOVE","number":92,"content":"        project.authorRegistry.add(author)"},{"operation":"REMOVE","number":93,"content":"    }"},{"operation":"ADD","number":103,"content":"            var author \u003d project.authorRegistry.getByID(authorID)"},{"operation":"ADD","number":104,"content":"            if (author \u003d\u003d null) {"},{"operation":"ADD","number":105,"content":"                author \u003d Author(id \u003d authorID, commits \u003d ArrayList())"},{"operation":"ADD","number":106,"content":"                project.authorRegistry.add(author)"},{"operation":"ADD","number":107,"content":"            }"}]},{"lineChanges":[{"operation":"REMOVE","number":95,"content":"    return author"},{"operation":"REMOVE","number":96,"content":"}"},{"operation":"ADD","number":109,"content":"            return author"},{"operation":"ADD","number":110,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":98,"content":"private fun getParentFromIds(parentIds: List\u003cString\u003e, project: Project): List\u003cCommit\u003e {"},{"operation":"REMOVE","number":99,"content":"    return parentIds.mapNotNull { project.commitRegistry.getByID(it) }"},{"operation":"REMOVE","number":100,"content":"}"},{"operation":"ADD","number":112,"content":"        private fun getParentFromIds(parentIds: List\u003cString\u003e, project: Project): List\u003cCommit\u003e {"},{"operation":"ADD","number":113,"content":"            return parentIds.mapNotNull { project.commitRegistry.getByID(it) }"},{"operation":"ADD","number":114,"content":"        }"},{"operation":"ADD","number":115,"content":"    }"},{"operation":"ADD","number":116,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"a4f1fc4433e972cd4567ea9dd3f5b2e05cdde5a4","isBinary":false,"isBlame":false}]},{"id":"e076146e1f0abfb884ed08032156968dda226d91","parentIds":["3127c3e6f61e9ace1ffba49d493b9c63e7b52352"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 9, 2019, 5:12:58 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 9, 2019, 5:12:58 PM","message":"broke project down to separate modules, deleted main","changes":[{"oldFileName":"dev/null","newFileName":"gitinspector-api/pom.xml","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"operation":"ADD","number":2,"content":"\u003cproject xmlns\u003d\"http://maven.apache.org/POM/4.0.0\""},{"operation":"ADD","number":3,"content":"         xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\""},{"operation":"ADD","number":4,"content":"         xsi:schemaLocation\u003d\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e"},{"operation":"ADD","number":5,"content":"    \u003cparent\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":7,"content":"        \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":8,"content":"        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":9,"content":"    \u003c/parent\u003e"},{"operation":"ADD","number":10,"content":"    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"\u003c/project\u003e"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/AnnotatedLineDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/AnnotatedLineDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/ChangeDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.ChangeType"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/CommitDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/CommitDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/HunkDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/HunkDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/LineChangeDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/LineChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.LineOperation"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/dto/ProjectDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ProjectDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.dto"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/ChangeType.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/enums/ChangeType.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.enums"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/LineOperation.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/enums/LineOperation.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.enums"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"gitinspector-client/pom.xml","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"operation":"ADD","number":2,"content":"\u003cproject xmlns\u003d\"http://maven.apache.org/POM/4.0.0\""},{"operation":"ADD","number":3,"content":"         xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\""},{"operation":"ADD","number":4,"content":"         xsi:schemaLocation\u003d\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e"},{"operation":"ADD","number":5,"content":"    \u003cparent\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":7,"content":"        \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":8,"content":"        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":9,"content":"    \u003c/parent\u003e"},{"operation":"ADD","number":10,"content":"    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003egitinspector-client\u003c/artifactId\u003e"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"    \u003cdependencies\u003e"},{"operation":"ADD","number":15,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":16,"content":"            \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":17,"content":"            \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":18,"content":"            \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":19,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":20,"content":"    \u003c/dependencies\u003e"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"\u003c/project\u003e"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":53,"content":""},{"operation":"REMOVE","number":54,"content":"    val process \u003d ProcessBuilder(\"bash\", \"-c\", \"git --version\").start()"},{"operation":"REMOVE","number":55,"content":"    if (process.waitFor() \u003d\u003d 0)"},{"operation":"REMOVE","number":56,"content":"        String(process.inputStream.readAllBytes()).also { println(it) }"},{"operation":"REMOVE","number":57,"content":"    else"},{"operation":"REMOVE","number":58,"content":"        throw IllegalStateException(\"This program requires a git client\")"},{"operation":"REMOVE","number":59,"content":""}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/CommitParserFactory.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/CommitParserFactory.kt","type":"RENAME","hunks":[],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/GitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/GitParser.kt","type":"RENAME","hunks":[],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.ProjectDTO"}]},{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":8,"content":"import org.dxworks.gitsecond.model.ChangeType"}]},{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"ADD","number":8,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"ADD","number":9,"content":"import org.dxworks.gitinspector.enums.ChangeType"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.dto.CommitDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitinspector.parsers.LogParser"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"import org.dxworks.gitinspector.dto.CommitDTO;"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/abstracts/HunkParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/HunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.LineChangeDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.HunkDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.ChangeDTO"}]},{"lineChanges":[{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/MergeHunkParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeHunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.LineChangeDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.HunkDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.HunkDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleHunkParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleHunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.dto.LineChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.model.LineOperation"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"gitinspector-core/pom.xml","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"operation":"ADD","number":2,"content":"\u003cproject xmlns\u003d\"http://maven.apache.org/POM/4.0.0\""},{"operation":"ADD","number":3,"content":"         xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\""},{"operation":"ADD","number":4,"content":"         xsi:schemaLocation\u003d\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e"},{"operation":"ADD","number":5,"content":"    \u003cparent\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":7,"content":"        \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":8,"content":"        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":9,"content":"    \u003c/parent\u003e"},{"operation":"ADD","number":10,"content":"    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e"},{"operation":"ADD","number":11,"content":""},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003egitinspector-core\u003c/artifactId\u003e"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"    \u003cdependencies\u003e"},{"operation":"ADD","number":15,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":16,"content":"            \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":17,"content":"            \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":18,"content":"            \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":19,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":20,"content":"    \u003c/dependencies\u003e"},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":"\u003c/project\u003e"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Constants.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/Constants.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/AnnotatedLine.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/AnnotatedLine.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Author.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/AuthorID.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/AuthorID.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Change.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]},{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Commit.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Commit.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/File.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]},{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.model.AnnotatedLine"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/LineChange.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/LineChange.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Project.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Project.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.model"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.registries.AuthorRegistry"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.registries.CommitRegistry"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.registries.FileRegistry"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.registries.AuthorRegistry"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.registries.CommitRegistry"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.registries.FileRegistry"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/AbstractRegistry.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/AbstractRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.Commit"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.model.Commit"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/AuthorRegistry.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/AuthorRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.Author"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.model.Author"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.model.AuthorID"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/CommitRegistry.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/CommitRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.Commit"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.model.Commit"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/registries/FileRegistry.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/FileRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.File"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.model.File"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DataToModelTransformer.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/DataToModelTransformer.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.transformers"},{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.transformers"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.dto.CommitDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.dto.ProjectDTO"},{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitsecond.model.*"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.dto.CommitDTO"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"},{"operation":"ADD","number":7,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"ADD","number":8,"content":"import org.dxworks.gitinspector.model.AnnotatedLine"},{"operation":"ADD","number":9,"content":"import org.dxworks.gitinspector.model.LineChange"},{"operation":"ADD","number":10,"content":"import org.dxworks.gitinspector.model.Project"},{"operation":"ADD","number":11,"content":"import org.dxworks.gitinspector.model.*"}]},{"lineChanges":[{"operation":"REMOVE","number":90,"content":"                        file \u003d File(fullyQualifiedName \u003d change.newFileName)"},{"operation":"REMOVE","number":91,"content":"                        project.fileRegistry.add(file)"},{"operation":"REMOVE","number":92,"content":"                        project.wrongRegistry.add(file, change.newFileName)"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    \u003cartifactId\u003egit-second\u003c/artifactId\u003e"},{"operation":"ADD","number":8,"content":"    \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":9,"content":"    \u003cpackaging\u003epom\u003c/packaging\u003e"}]},{"lineChanges":[{"operation":"ADD","number":11,"content":"    \u003cmodules\u003e"},{"operation":"ADD","number":12,"content":"        \u003cmodule\u003egitinspector-api\u003c/module\u003e"},{"operation":"ADD","number":13,"content":"        \u003cmodule\u003egitinspector-client\u003c/module\u003e"},{"operation":"ADD","number":14,"content":"        \u003cmodule\u003egitinspector-core\u003c/module\u003e"},{"operation":"ADD","number":15,"content":"    \u003c/modules\u003e"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"resources/gitSecondLog.sh","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"gitSecondFolder\u003d$(pwd)"},{"operation":"REMOVE","number":2,"content":"cd \"$1\" || exit"},{"operation":"REMOVE","number":3,"content":"if [[\"$2\" \u003d \"-l\"]]"},{"operation":"REMOVE","number":4,"content":"git log -p -M5% -c -U0 --format\u003d\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %cD%nmessage:%n%s%n%b\""}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/Main.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.parsers.LogParser"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitsecond.transformers.OptimusSecond"},{"operation":"REMOVE","number":6,"content":"import java.nio.file.Paths"},{"operation":"REMOVE","number":7,"content":""},{"operation":"REMOVE","number":8,"content":"fun main() {"},{"operation":"REMOVE","number":9,"content":"    val gitClient \u003d GitClient(Paths.get(\"/home/darius/.dx-platform/projects/kafka/repository/kafka\"))"},{"operation":"REMOVE","number":10,"content":"    val projectDTO \u003d LogParser(gitClient).parse(gitClient.getLogs().toMutableList())"},{"operation":"REMOVE","number":11,"content":"    val project \u003d OptimusSecond.createProject(projectDTO, \"TestProject\")"},{"operation":"REMOVE","number":12,"content":"    println(projectDTO)"},{"operation":"REMOVE","number":13,"content":"    println(project)"},{"operation":"REMOVE","number":14,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/AnnotatedLineData.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"data class AnnotatedLineData(var commitId: String, var lineNumber: Int, var content: String)"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/BlameData.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"data class BlameData(var changeData: ChangeData, var blamedLines: List\u003cBlamedLine\u003e) {"},{"operation":"REMOVE","number":4,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/BlamedLine.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.AuthorID"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"data class BlamedLine(var line: String, var lineNumber: Int, var sourceAuthorID: AuthorID, var committerAuthorID: AuthorID, var commitId: String) {"},{"operation":"REMOVE","number":6,"content":""},{"operation":"REMOVE","number":7,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/ChangeData.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.eclipse.jgit.diff.DiffEntry"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":""},{"operation":"REMOVE","number":6,"content":"data class ChangeData(var commitID: String, var oldFileName: String, var newFileName: String, var type: DiffEntry.ChangeType, var diff: String \u003d \"\", var annotatedLines: MutableList\u003cAnnotatedLineData\u003e) {"},{"operation":"REMOVE","number":7,"content":""},{"operation":"REMOVE","number":8,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/ChangesData.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"data class ChangesData(var otherCommitId: String?, var changes: List\u003cChangeData\u003e) {"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/data/CommitData.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.data"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import java.util.*"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"data class CommitData(var id: String, var message: String, var authorName: String, var authorEmail: String, var date: Date, var parentIds: List\u003cString\u003e, var changeSets: List\u003cChangesData\u003e) {"},{"operation":"REMOVE","number":6,"content":""},{"operation":"REMOVE","number":7,"content":"    val isMergeCommit: Boolean"},{"operation":"REMOVE","number":8,"content":"        get() \u003d parentIds.size \u003e\u003d 2"},{"operation":"REMOVE","number":9,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/model/Line.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.model"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"data class Line(var oldLineNumber: Int, var newLineNumber: Int, var oldContent: String, var newContent: String, var author: Author, var change: Change)"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false},{"oldFileName":"src/main/java/org/dxworks/gitsecond/transformers/DiffParser.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitsecond.transformers"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitsecond.model.LineChange"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitsecond.model.LineOperation"},{"operation":"REMOVE","number":5,"content":"import java.util.*"},{"operation":"REMOVE","number":6,"content":"import kotlin.collections.ArrayList"},{"operation":"REMOVE","number":7,"content":""},{"operation":"REMOVE","number":8,"content":"class DiffParser(content: String) {"},{"operation":"REMOVE","number":9,"content":"    private val lines: List\u003cString\u003e \u003d Collections.unmodifiableList(content.split(\"\\n\"))"},{"operation":"REMOVE","number":10,"content":""},{"operation":"REMOVE","number":11,"content":"    val lineChanges: MutableList\u003cLineChange\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":12,"content":""},{"operation":"REMOVE","number":13,"content":"    init {"},{"operation":"REMOVE","number":14,"content":"        lines.filter { it.startsWith(\"@@\") }.forEach {"},{"operation":"REMOVE","number":15,"content":"            val (removePair, addPair) \u003d getRemoveAndAddHunkInfo(it)"},{"operation":"REMOVE","number":16,"content":"            val (removeStart, removeSize) \u003d removePair"},{"operation":"REMOVE","number":17,"content":"            val (addStart, addSize) \u003d addPair"},{"operation":"REMOVE","number":18,"content":""},{"operation":"REMOVE","number":19,"content":"            val firstLineIndex \u003d lines.indexOf(it) + 1"},{"operation":"REMOVE","number":20,"content":""},{"operation":"REMOVE","number":21,"content":"            var diffLineIndex \u003d firstLineIndex"},{"operation":"REMOVE","number":22,"content":"            for (i in removeStart until (removeStart + removeSize))"},{"operation":"REMOVE","number":23,"content":"                lineChanges.add(LineChange(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"REMOVE","number":24,"content":"            for (i in addStart until (addStart + addSize))"},{"operation":"REMOVE","number":25,"content":"                lineChanges.add(LineChange(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"REMOVE","number":26,"content":"        }"},{"operation":"REMOVE","number":27,"content":""},{"operation":"REMOVE","number":28,"content":"    }"},{"operation":"REMOVE","number":29,"content":""},{"operation":"REMOVE","number":30,"content":"    private fun getRemoveAndAddHunkInfo(it: String): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"},{"operation":"REMOVE","number":31,"content":"        val line \u003d it.replace(\"@\", \"\").trim()"},{"operation":"REMOVE","number":32,"content":"        val info \u003d line.split(\" \")"},{"operation":"REMOVE","number":33,"content":""},{"operation":"REMOVE","number":34,"content":"        val removeInfo \u003d info[0].substring(1)"},{"operation":"REMOVE","number":35,"content":"        val removeNumbers \u003d removeInfo.split(\",\")"},{"operation":"REMOVE","number":36,"content":"        val removeStart \u003d Integer.parseInt(removeNumbers[0])"},{"operation":"REMOVE","number":37,"content":"        val removeSize \u003d if (removeNumbers.size \u003c 2) 1 else Integer.parseInt(removeNumbers[1])"},{"operation":"REMOVE","number":38,"content":"        val removePair \u003d Pair(removeStart, removeSize)"},{"operation":"REMOVE","number":39,"content":""},{"operation":"REMOVE","number":40,"content":"        val addInfo \u003d info[1].substring(1)"},{"operation":"REMOVE","number":41,"content":"        val addNumbers \u003d addInfo.split(\",\")"},{"operation":"REMOVE","number":42,"content":"        val addStart \u003d Integer.parseInt(addNumbers[0])"},{"operation":"REMOVE","number":43,"content":"        val addSize \u003d if (addNumbers.size \u003c 2) 1 else Integer.parseInt(addNumbers[1])"},{"operation":"REMOVE","number":44,"content":"        val addPair \u003d Pair(addStart, addSize)"},{"operation":"REMOVE","number":45,"content":"        return Pair(removePair, addPair)"},{"operation":"REMOVE","number":46,"content":"    }"},{"operation":"REMOVE","number":47,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3127c3e6f61e9ace1ffba49d493b9c63e7b52352","isBinary":false,"isBlame":false}]},{"id":"9dd0f6d7b968b70ecca1d2bc6b2cc7eebcf35052","parentIds":["e076146e1f0abfb884ed08032156968dda226d91"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 10, 2019, 4:14:49 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 10, 2019, 4:14:49 PM","message":"refactored, added functionality and trying to fix blames for all files","changes":[{"oldFileName":"gitinspector-client/pom.xml","newFileName":"gitinspector-client/pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":20,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":21,"content":"            \u003cgroupId\u003eorg.dxworks\u003c/groupId\u003e"},{"operation":"ADD","number":22,"content":"            \u003cartifactId\u003egitinspector-core\u003c/artifactId\u003e"},{"operation":"ADD","number":23,"content":"            \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e"},{"operation":"ADD","number":24,"content":"        \u003c/dependency\u003e"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.utils.DTO_FOLDER_PATH"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitinspector.utils.Helper"}]},{"lineChanges":[{"operation":"ADD","number":20,"content":"    private val gitAffectedFilesCommand \u003d \"$git log -m -1 --name-only --pretty\u003d\\\"format:\\\"\""}]},{"lineChanges":[{"operation":"REMOVE","number":26,"content":"        LOG.info(\"Running log command: $gitLogCommand\")"},{"operation":"REMOVE","number":27,"content":"        processBuilder.command(\"bash\", \"-c\", gitLogCommand)"},{"operation":"REMOVE","number":28,"content":"        val process \u003d processBuilder.start()"},{"operation":"REMOVE","number":29,"content":"        val reader \u003d BufferedReader(process.inputStream.reader())"},{"operation":"REMOVE","number":30,"content":"        val lines: MutableList\u003cString\u003e \u003d ArrayList()"},{"operation":"REMOVE","number":31,"content":"        reader.forEachLine { lines.add(it) }"},{"operation":"REMOVE","number":32,"content":"        return if (process.waitFor() \u003d\u003d 0) {"},{"operation":"REMOVE","number":33,"content":"            LOG.info(\"Log command finished\")"},{"operation":"REMOVE","number":34,"content":"            lines"},{"operation":"REMOVE","number":35,"content":"        } else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":29,"content":"        val command \u003d gitLogCommand"},{"operation":"ADD","number":30,"content":"        LOG.info(\"Running log command: $command\")"},{"operation":"ADD","number":31,"content":"        return runCommand(command)"}]},{"lineChanges":[{"operation":"REMOVE","number":39,"content":"        LOG.info(\"Running blame command: $gitBlameCommand\")"},{"operation":"REMOVE","number":40,"content":"        processBuilder.command(\"bash\", \"-c\", \"$gitBlameCommand $file $revision\")"},{"operation":"ADD","number":35,"content":"        val command \u003d \"$gitBlameCommand $file $revision\""},{"operation":"ADD","number":36,"content":"        LOG.info(\"Running blame command: $command\")"},{"operation":"ADD","number":37,"content":"        return runCommand(command)"},{"operation":"ADD","number":38,"content":"    }"},{"operation":"ADD","number":39,"content":""},{"operation":"ADD","number":40,"content":"    fun affectedFiles(revision: String): List\u003cString\u003e {"},{"operation":"ADD","number":41,"content":"        val command \u003d \"$gitBlameCommand $revision\""},{"operation":"ADD","number":42,"content":"        LOG.info(\"Running  command: $command\")"},{"operation":"ADD","number":43,"content":"        return runCommand(command)"},{"operation":"ADD","number":44,"content":"    }"},{"operation":"ADD","number":45,"content":""},{"operation":"ADD","number":46,"content":"    private fun runCommand(command: String): List\u003cString\u003e {"},{"operation":"ADD","number":47,"content":"        processBuilder.command(\"bash\", \"-c\", \"$command\")"}]},{"lineChanges":[{"operation":"REMOVE","number":48,"content":"        } else throw RuntimeException(\"Git command failed\")"},{"operation":"ADD","number":55,"content":"        } else {"},{"operation":"ADD","number":56,"content":"            LOG.error(\"Command completed with errors\")"},{"operation":"ADD","number":57,"content":"            emptyList()"},{"operation":"ADD","number":58,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":53,"content":"    val gitClient \u003d GitClient(Paths.get(System.getProperty(\"user.home\"), \"Documents/dx/test\"))"},{"operation":"REMOVE","number":54,"content":"    val commits \u003d LogParser(gitClient).parse(gitClient.getLogs().toMutableList())"},{"operation":"REMOVE","number":55,"content":"    println(commits)"},{"operation":"ADD","number":63,"content":"    val gitClient \u003d GitClient(Paths.get(\"/home/darius/.dx-platform/projects/kafka/repository/kafka\"))"},{"operation":"ADD","number":64,"content":"    val projectDTO \u003d LogParser(gitClient).parse(gitClient.getLogs().toMutableList())"},{"operation":"ADD","number":65,"content":"    Helper.toJsonFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), projectDTO)"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"REMOVE","number":6,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"ADD","number":9,"content":"import org.dxworks.gitinspector.utils.devNull"},{"operation":"ADD","number":10,"content":"import org.slf4j.LoggerFactory"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"    private val devNull \u003d \"dev/null\""},{"operation":"REMOVE","number":18,"content":""}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"class MergeCommitParser(private val gitInfoGatherer: GitClient) : CommitParser() {"},{"operation":"ADD","number":7,"content":"class MergeCommitParser(private val gitClient: GitClient) : CommitParser() {"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"        val blames \u003d changes.map { gitInfoGatherer.blame(commitId, extractNewFileName(it)) }"},{"operation":"ADD","number":11,"content":"        val changedFiles \u003d gitClient.affectedFiles(commitId)"},{"operation":"ADD","number":12,"content":"        val blames \u003d changedFiles.filter { it.isNotBlank() }.map { gitClient.blame(commitId, it) }.filter { it.isNotEmpty() }"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":""},{"operation":"REMOVE","number":15,"content":"    private fun extractNewFileName(lines: MutableList\u003cString\u003e): String {"},{"operation":"REMOVE","number":16,"content":"        val newFileNameLinePrefix \u003d \"+++ b/\""},{"operation":"REMOVE","number":17,"content":"        val newNameLineIndex \u003d lines.indexOfFirst { it.startsWith(newFileNameLinePrefix) }"},{"operation":"REMOVE","number":18,"content":"        return lines[newNameLineIndex].removePrefix(newFileNameLinePrefix)"},{"operation":"REMOVE","number":19,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/pom.xml","newFileName":"gitinspector-core/pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":20,"content":"        \u003c!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --\u003e"},{"operation":"ADD","number":21,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":22,"content":"            \u003cgroupId\u003ecom.google.code.gson\u003c/groupId\u003e"},{"operation":"ADD","number":23,"content":"            \u003cartifactId\u003egson\u003c/artifactId\u003e"},{"operation":"ADD","number":24,"content":"            \u003cversion\u003e2.8.5\u003c/version\u003e"},{"operation":"ADD","number":25,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":26,"content":""}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/Constants.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import java.io.File"},{"operation":"REMOVE","number":4,"content":""},{"operation":"REMOVE","number":5,"content":"private const val FOLDER_NAME \u003d \".gitsecond\""},{"operation":"REMOVE","number":6,"content":"val APP_FOLDER_PATH \u003d System.getProperty(\"user.home\") + File.separator + FOLDER_NAME"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/Main.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.transformers.ProjectTransformer"},{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.utils.DTO_FOLDER_PATH"},{"operation":"ADD","number":6,"content":"import org.dxworks.gitinspector.utils.Helper"},{"operation":"ADD","number":7,"content":""},{"operation":"ADD","number":8,"content":"fun main() {"},{"operation":"ADD","number":9,"content":"    val project \u003d ProjectTransformer.createProject(Helper.jsonFromFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), ProjectDTO::class.java), \"kafka\")"},{"operation":"ADD","number":10,"content":"    println(project)"},{"operation":"ADD","number":11,"content":"//    Helper.deleteFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"))"},{"operation":"ADD","number":12,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"data class Author(var id: AuthorID, var commits: MutableList\u003cCommit\u003e)"},{"operation":"ADD","number":3,"content":"data class Author(var id: AuthorID, var commits: MutableList\u003cCommit\u003e) {"},{"operation":"ADD","number":4,"content":"    var parent: Author? \u003d null"},{"operation":"ADD","number":5,"content":"    var children: MutableList\u003cAuthor\u003e \u003d ArrayList()"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"    val allCommits: List\u003cCommit\u003e"},{"operation":"ADD","number":8,"content":"        get() \u003d commits + children.flatMap { it.commits }"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"    val allChanges: List\u003cChange\u003e"},{"operation":"ADD","number":11,"content":"        get() \u003d allCommits.flatMap { it.changes }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    val allFiles: List\u003cFile\u003e"},{"operation":"ADD","number":14,"content":"        get() \u003d allChanges.map { it.file }"},{"operation":"ADD","number":15,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD || file.changes.isEmpty()) null else getParentChange(commit.parents)"},{"operation":"ADD","number":7,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD || file.changes.isEmpty()) null else file.getLastChange(commit)"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    private fun getParentChange(commits: List\u003cCommit\u003e): Change? {"},{"operation":"REMOVE","number":12,"content":"        return if (commits.isEmpty()) null"},{"operation":"REMOVE","number":13,"content":"        else commits.flatMap { it.changes }.find { it.file \u003d\u003d file }"},{"operation":"REMOVE","number":14,"content":"                ?: getParentChange(commits.flatMap { it.parents })"},{"operation":"REMOVE","number":15,"content":"    }"},{"operation":"REMOVE","number":16,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":29,"content":"            newAnnotatedLines.add(AnnotatedLine(commit, it.lineNumber, it.content))"},{"operation":"ADD","number":23,"content":"            val annotatedLine \u003d AnnotatedLine(commit, it.lineNumber, it.content)"},{"operation":"ADD","number":24,"content":"            newAnnotatedLines.add(it.lineNumber - 1, annotatedLine)"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.model.AnnotatedLine"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"ADD","number":4,"content":"import org.dxworks.gitinspector.utils.devNull"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"data class File(var fullyQualifiedName: String, var isAlive: Boolean \u003d true) {"},{"operation":"REMOVE","number":8,"content":"    val changes: MutableMap\u003cString, Change\u003e \u003d HashMap()"},{"operation":"REMOVE","number":9,"content":"    val aliases: MutableMap\u003cString, String\u003e \u003d HashMap()"},{"operation":"ADD","number":8,"content":"data class File(var fullyQualifiedName: String, val changes: MutableList\u003cChange\u003e \u003d ArrayList()) {"},{"operation":"ADD","number":9,"content":"    val name: String"},{"operation":"ADD","number":10,"content":"        get() \u003d fullyQualifiedName.split(\"/\").last()"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    fun annotatedLinesForRevision(commit: Commit): List\u003cAnnotatedLine\u003e {"},{"operation":"REMOVE","number":12,"content":"        val change \u003d changes[commit.id]"},{"operation":"REMOVE","number":13,"content":"        return change?.annotatedLines ?: getLastChangeAnnotatedLines(commit.parents)"},{"operation":"ADD","number":12,"content":"    val path: Path"},{"operation":"ADD","number":13,"content":"        get() \u003d Paths.get(fullyQualifiedName)"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    fun alias(commit: Commit): String {"},{"operation":"ADD","number":16,"content":"        return getLastChange(commit)?.newFileName ?: devNull"},{"operation":"ADD","number":17,"content":"    }"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"    fun isAlive(commit: Commit): Boolean {"},{"operation":"ADD","number":20,"content":"        val type \u003d getLastChange(commit)?.type"},{"operation":"ADD","number":21,"content":"        return type !\u003d null \u0026\u0026 type !\u003d ChangeType.DELETE"},{"operation":"ADD","number":22,"content":"    }"},{"operation":"ADD","number":23,"content":""},{"operation":"ADD","number":24,"content":"    fun annotatedLines(commit: Commit): List\u003cAnnotatedLine\u003e {"},{"operation":"ADD","number":25,"content":"        return getLastChange(commit)?.annotatedLines ?: emptyList()"},{"operation":"ADD","number":26,"content":"    }"},{"operation":"ADD","number":27,"content":""},{"operation":"ADD","number":28,"content":"    fun getLastChange(commit: Commit): Change? {"},{"operation":"ADD","number":29,"content":"        return if (changes.isEmpty() || changes.first().commit.date \u003e commit.date) null"},{"operation":"ADD","number":30,"content":"        else changes.firstOrNull { it.commit \u003d\u003d commit }"},{"operation":"ADD","number":31,"content":"                ?: commit.parents.mapNotNull { getLastChange(it) }.firstOrNull()"}]},{"lineChanges":[{"operation":"REMOVE","number":20,"content":"            commits.mapNotNull { changes[it.id] }"},{"operation":"ADD","number":38,"content":"            commits.mapNotNull { commit -\u003e commit.changes.find { it.commit \u003d\u003d commit } }"}]},{"lineChanges":[{"operation":"REMOVE","number":23,"content":""},{"operation":"REMOVE","number":24,"content":"    fun addChange(change: Change) {"},{"operation":"REMOVE","number":25,"content":"        changes[change.commit.id] \u003d change"},{"operation":"REMOVE","number":26,"content":"        aliases[change.commit.id] \u003d change.newFileName"},{"operation":"REMOVE","number":27,"content":"    }"},{"operation":"REMOVE","number":28,"content":""},{"operation":"REMOVE","number":29,"content":""},{"operation":"REMOVE","number":30,"content":"    var name \u003d fullyQualifiedName.split(\"/\").last()"},{"operation":"REMOVE","number":31,"content":""},{"operation":"REMOVE","number":32,"content":"    val path: Path"},{"operation":"REMOVE","number":33,"content":"        get() \u003d Paths.get(fullyQualifiedName)"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/DataToModelTransformer.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/ProjectTransformer.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":15,"content":"class OptimusSecond() {"},{"operation":"ADD","number":15,"content":"class ProjectTransformer() {"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"        private val LOG \u003d LoggerFactory.getLogger(OptimusSecond::class.java)"},{"operation":"ADD","number":17,"content":"        private val LOG \u003d LoggerFactory.getLogger(ProjectTransformer::class.java)"}]},{"lineChanges":[{"operation":"REMOVE","number":53,"content":"                change.file.addChange(change)"},{"operation":"ADD","number":53,"content":"                change.file.changes.add(change)"}]},{"lineChanges":[{"operation":"REMOVE","number":84,"content":"                    if (file \u003d\u003d null) {"},{"operation":"ADD","number":84,"content":"                    if (file \u003d\u003d null)"}]},{"lineChanges":[{"operation":"REMOVE","number":86,"content":"                    } else {"},{"operation":"REMOVE","number":87,"content":"                        file.isAlive \u003d false"},{"operation":"REMOVE","number":88,"content":"                    }"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/utils/Constants.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.utils"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.nio.file.Path"},{"operation":"ADD","number":4,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"private const val APP_FOLDER_NAME \u003d \".gitinspector\""},{"operation":"ADD","number":7,"content":"private const val DTO_FOLDER_NAME \u003d \"jsonProjects\""},{"operation":"ADD","number":8,"content":"val APP_FOLDER_PATH: Path \u003d Paths.get(System.getProperty(\"user.home\"), APP_FOLDER_NAME)"},{"operation":"ADD","number":9,"content":"val DTO_FOLDER_PATH: Path \u003d APP_FOLDER_PATH.resolve(DTO_FOLDER_NAME)"},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"val devNull \u003d \"dev/null\""}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/utils/Helper.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.gitinspector.utils"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import com.google.gson.Gson"},{"operation":"ADD","number":4,"content":"import lombok.extern.slf4j.Slf4j"},{"operation":"ADD","number":5,"content":"import org.slf4j.LoggerFactory"},{"operation":"ADD","number":6,"content":"import java.nio.file.Files"},{"operation":"ADD","number":7,"content":"import java.nio.file.Path"},{"operation":"ADD","number":8,"content":""},{"operation":"ADD","number":9,"content":"@Slf4j"},{"operation":"ADD","number":10,"content":"class Helper {"},{"operation":"ADD","number":11,"content":"    companion object {"},{"operation":"ADD","number":12,"content":"        private val LOG \u003d LoggerFactory.getLogger(Helper::class.java)"},{"operation":"ADD","number":13,"content":""},{"operation":"ADD","number":14,"content":"        fun toJsonFile(path: Path, entity: Any) {"},{"operation":"ADD","number":15,"content":"            Files.createDirectories(path.parent)"},{"operation":"ADD","number":16,"content":"            path.toFile().writeText(Gson().toJson(entity))"},{"operation":"ADD","number":17,"content":"        }"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"        fun \u003cT\u003e jsonFromFile(path: Path, classOfT: Class\u003cT\u003e): T {"},{"operation":"ADD","number":20,"content":"            return Gson().fromJson(path.toFile().readText(), classOfT)"},{"operation":"ADD","number":21,"content":"        }"},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"        fun deleteFile(path: Path): Boolean {"},{"operation":"ADD","number":24,"content":"            val deleted \u003d path.toFile().delete()"},{"operation":"ADD","number":25,"content":"            return if (deleted) {"},{"operation":"ADD","number":26,"content":"                LOG.info(\"Deleted file: $path\")"},{"operation":"ADD","number":27,"content":"                true"},{"operation":"ADD","number":28,"content":"            } else {"},{"operation":"ADD","number":29,"content":"                LOG.error(\"Could not delete file: $path\")"},{"operation":"ADD","number":30,"content":"                false"},{"operation":"ADD","number":31,"content":"            }"},{"operation":"ADD","number":32,"content":"        }"},{"operation":"ADD","number":33,"content":"    }"},{"operation":"ADD","number":34,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"e076146e1f0abfb884ed08032156968dda226d91","isBinary":false,"isBlame":false}]},{"id":"68c30d6a508e58dafb9c80277c8e2768511fcec2","parentIds":["9dd0f6d7b968b70ecca1d2bc6b2cc7eebcf35052"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 10, 2019, 4:17:37 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 10, 2019, 4:17:37 PM","message":"added back affected files command","changes":[{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":41,"content":"        val command \u003d \"$gitBlameCommand $revision\""},{"operation":"ADD","number":41,"content":"        val command \u003d \"$gitAffectedFilesCommand $revision\""}]}],"annotatedLines":[],"parentCommitId":"9dd0f6d7b968b70ecca1d2bc6b2cc7eebcf35052","isBinary":false,"isBlame":false}]},{"id":"83a6feac61c2e94fb51b750016f7cf539785420f","parentIds":["68c30d6a508e58dafb9c80277c8e2768511fcec2"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 12, 2019, 5:00:53 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 12, 2019, 5:00:53 PM","message":"git client main finished successfully","changes":[{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ChangeDTO.kt","newFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ChangeDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"                val annotatedLines: List\u003cAnnotatedLineDTO\u003e)"},{"operation":"ADD","number":9,"content":"                var annotatedLines: List\u003cAnnotatedLineDTO\u003e \u003d ArrayList(),"},{"operation":"ADD","number":10,"content":"                val otherCommitId: String,"},{"operation":"ADD","number":11,"content":"                val isBinary: Boolean)"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":19,"content":"    private val gitLogCommand \u003d \"$git log -M25% -c -U0 --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":19,"content":"    private val renameDetectionThreshold \u003d \"-M25%\""},{"operation":"ADD","number":20,"content":"    private val contextThreshold \u003d \"-U0\""},{"operation":"ADD","number":21,"content":""},{"operation":"ADD","number":22,"content":""},{"operation":"ADD","number":23,"content":"    private val gitLogCommand \u003d \"$git log $renameDetectionThreshold -c $contextThreshold --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""}]},{"lineChanges":[{"operation":"ADD","number":25,"content":"    private val gitDiffCommand \u003d \"$git diff $renameDetectionThreshold $contextThreshold\""}]},{"lineChanges":[{"operation":"REMOVE","number":28,"content":"    fun getLogs(): List\u003cString\u003e {"},{"operation":"REMOVE","number":29,"content":"        val command \u003d gitLogCommand"},{"operation":"REMOVE","number":30,"content":"        LOG.info(\"Running log command: $command\")"},{"operation":"REMOVE","number":31,"content":"        return runCommand(command)"},{"operation":"REMOVE","number":32,"content":"    }"},{"operation":"ADD","number":33,"content":"    fun getLogs(): List\u003cString\u003e \u003d runCommand(gitLogCommand)"},{"operation":"ADD","number":34,"content":""},{"operation":"ADD","number":35,"content":"    fun diff(parent: String, revision: String, file: String): List\u003cString\u003e \u003d runCommand(\"$gitDiffCommand $parent $revision -- $file\")"}]},{"lineChanges":[{"operation":"REMOVE","number":35,"content":"        val command \u003d \"$gitBlameCommand $file $revision\""},{"operation":"REMOVE","number":36,"content":"        LOG.info(\"Running blame command: $command\")"},{"operation":"REMOVE","number":37,"content":"        return runCommand(command)"},{"operation":"ADD","number":38,"content":"        return runCommand(\"$gitBlameCommand $file $revision\")"}]},{"lineChanges":[{"operation":"REMOVE","number":40,"content":"    fun affectedFiles(revision: String): List\u003cString\u003e {"},{"operation":"REMOVE","number":41,"content":"        val command \u003d \"$gitAffectedFilesCommand $revision\""},{"operation":"REMOVE","number":42,"content":"        LOG.info(\"Running  command: $command\")"},{"operation":"REMOVE","number":43,"content":"        return runCommand(command)"},{"operation":"REMOVE","number":44,"content":"    }"},{"operation":"ADD","number":41,"content":"    fun affectedFiles(revision: String): List\u003cString\u003e \u003d runCommand(\"$gitAffectedFilesCommand $revision\")"}]},{"lineChanges":[{"operation":"REMOVE","number":47,"content":"        processBuilder.command(\"bash\", \"-c\", \"$command\")"},{"operation":"ADD","number":44,"content":"        LOG.info(\"Running command: $command\")"},{"operation":"ADD","number":45,"content":"        processBuilder.command(\"bash\", \"-c\", command)"}]},{"lineChanges":[{"operation":"REMOVE","number":53,"content":"            LOG.info(\"Blame command finished\")"},{"operation":"ADD","number":51,"content":"            LOG.info(\"Command completed\")"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"import org.dxworks.gitinspector.parsers.impl.SimpleHunkParser"}]},{"lineChanges":[{"operation":"REMOVE","number":13,"content":"abstract class ChangeParser : GitParser\u003cChangeDTO\u003e {"},{"operation":"ADD","number":13,"content":"abstract class ChangeParser(private val otherCommitId: String) : GitParser\u003cChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"        return ChangeDTO("},{"operation":"ADD","number":22,"content":"        val changeDTO \u003d ChangeDTO("}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"                annotatedLines \u003d extractAnnotatedLines(lines))"},{"operation":"ADD","number":27,"content":"                otherCommitId \u003d otherCommitId,"},{"operation":"ADD","number":28,"content":"                isBinary \u003d lines.any { it.startsWith(\"Binary files\") })"},{"operation":"ADD","number":29,"content":"        addAnnotatedLines(changeDTO)"},{"operation":"ADD","number":30,"content":"        return changeDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":"    abstract fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e"},{"operation":"ADD","number":33,"content":"    abstract fun addAnnotatedLines(changeDTO: ChangeDTO)"}]},{"lineChanges":[{"operation":"REMOVE","number":32,"content":"    abstract fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e"},{"operation":"ADD","number":35,"content":"    private fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"ADD","number":36,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"ADD","number":37,"content":"            getHunks(lines).map { SimpleHunkParser().parse(it) }"},{"operation":"ADD","number":38,"content":"        } else emptyList()"},{"operation":"ADD","number":39,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":20,"content":"        val parentIds \u003d extractParentIds(lines)"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"                parentIds \u003d extractParentIds(lines),"},{"operation":"ADD","number":23,"content":"                parentIds \u003d parentIds,"}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"                changes \u003d extractChanges(lines, commitId))"},{"operation":"ADD","number":28,"content":"                changes \u003d extractChanges(lines, commitId, parentIds))"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":"    abstract fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e"},{"operation":"ADD","number":31,"content":"    abstract fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":32,"content":"    protected fun getChanges(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":33,"content":"    protected fun getChanges(lines: List\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.GitClient"}]},{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"}]},{"lineChanges":[{"operation":"ADD","number":8,"content":"import org.dxworks.gitinspector.utils.devNull"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"class BlameParser(private val blame: List\u003cString\u003e) : ChangeParser() {"},{"operation":"REMOVE","number":8,"content":"    override fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"REMOVE","number":9,"content":"        return getHunks(lines).map { MergeHunkParser().parse(it) }"},{"operation":"ADD","number":10,"content":"class BlameParser(private val gitClient: GitClient, private val commitId: String, otherCommitId: String) : ChangeParser(otherCommitId) {"},{"operation":"ADD","number":11,"content":"    override fun addAnnotatedLines(changeDTO: ChangeDTO) {"},{"operation":"ADD","number":12,"content":"        if (changeDTO.newFileName !\u003d devNull \u0026\u0026 !changeDTO.isBinary) {"},{"operation":"ADD","number":13,"content":"            changeDTO.annotatedLines \u003d gitClient.blame(commitId, changeDTO.newFileName)"},{"operation":"ADD","number":14,"content":"                    .filter { it.isNotBlank() }.map { parseAnnotatedLine(it) }"},{"operation":"ADD","number":15,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    override fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"REMOVE","number":13,"content":"        return blame.filter { it.isNotBlank() }.map {"},{"operation":"REMOVE","number":14,"content":"            val commitIdAndOther \u003d it.split(\" (\")"},{"operation":"REMOVE","number":15,"content":"            val commitId \u003d commitIdAndOther[0].split(\" \")[0]"},{"operation":"REMOVE","number":16,"content":"            val authorAndContent \u003d commitIdAndOther[1].split(\") \")"},{"operation":"REMOVE","number":17,"content":"            val content \u003d authorAndContent[1]"},{"operation":"REMOVE","number":18,"content":"            val authorTimeLineNo \u003d authorAndContent[0]"},{"operation":"REMOVE","number":19,"content":"            val lineNumber \u003d authorTimeLineNo.substring(authorTimeLineNo.lastIndexOf(\" \") + 1).toInt()"},{"operation":"REMOVE","number":20,"content":"            AnnotatedLineDTO(commitId, lineNumber, content)"},{"operation":"REMOVE","number":21,"content":"        }"},{"operation":"ADD","number":18,"content":"    private fun parseAnnotatedLine(it: String): AnnotatedLineDTO {"},{"operation":"ADD","number":19,"content":"        val commitDelimiterIndex \u003d it.indexOf(\" \")"},{"operation":"ADD","number":20,"content":"        val commitId \u003d it.substring(0, commitDelimiterIndex)"},{"operation":"ADD","number":21,"content":"        val other \u003d it.substring(commitDelimiterIndex + 2)"},{"operation":"ADD","number":22,"content":"        val contentDelimiterIndex \u003d other.indexOf(\")\")"},{"operation":"ADD","number":23,"content":"        val authorTimeLineNo \u003d other.substring(0, contentDelimiterIndex)"},{"operation":"ADD","number":24,"content":"        val content \u003d other.substring(contentDelimiterIndex + 2)"},{"operation":"ADD","number":25,"content":"        val lineNumber \u003d authorTimeLineNo.substring(authorTimeLineNo.lastIndexOf(\" \") + 1).toInt()"},{"operation":"ADD","number":26,"content":"        return AnnotatedLineDTO(commitId, lineNumber, content)"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e {"},{"operation":"REMOVE","number":10,"content":"        val changes \u003d getChanges(lines)"},{"operation":"REMOVE","number":11,"content":"        val changedFiles \u003d gitClient.affectedFiles(commitId)"},{"operation":"REMOVE","number":12,"content":"        val blames \u003d changedFiles.filter { it.isNotBlank() }.map { gitClient.blame(commitId, it) }.filter { it.isNotEmpty() }"},{"operation":"REMOVE","number":13,"content":"        return blames.mapIndexed { index, blame -\u003e BlameParser(blame).parse(changes[index]) }"},{"operation":"ADD","number":9,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":10,"content":"        val parentAndFile: List\u003cPair\u003cString, String\u003e\u003e \u003d getAffectedFilesByParent(commitId, parentIds)"},{"operation":"ADD","number":11,"content":"        return parentAndFile.map { Pair(it.first, gitClient.diff(it.first, commitId, it.second)) }"},{"operation":"ADD","number":12,"content":"                .filter { it.second.isNotEmpty() }"},{"operation":"ADD","number":13,"content":"                .map { BlameParser(gitClient, commitId, it.first).parse(it.second.toMutableList()) }"},{"operation":"ADD","number":14,"content":"    }"},{"operation":"ADD","number":15,"content":""},{"operation":"ADD","number":16,"content":"    private fun getAffectedFilesByParent(commitId: String, parentIds: List\u003cString\u003e): List\u003cPair\u003cString, String\u003e\u003e {"},{"operation":"ADD","number":17,"content":"        val affectedFiles \u003d gitClient.affectedFiles(commitId)"},{"operation":"ADD","number":18,"content":"        val parentAndFile: MutableList\u003cPair\u003cString, String\u003e\u003e \u003d ArrayList()"},{"operation":"ADD","number":19,"content":"        var index \u003d 0"},{"operation":"ADD","number":20,"content":"        for (fileName in affectedFiles) {"},{"operation":"ADD","number":21,"content":"            if (fileName.isNotBlank())"},{"operation":"ADD","number":22,"content":"                parentAndFile.add(Pair(parentIds[index], fileName))"},{"operation":"ADD","number":23,"content":"            else"},{"operation":"ADD","number":24,"content":"                index++"},{"operation":"ADD","number":25,"content":"        }"},{"operation":"ADD","number":26,"content":"        return parentAndFile"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeHunkParser.kt","newFileName":"dev/null","type":"DELETE","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"REMOVE","number":2,"content":""},{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.HunkParser"},{"operation":"REMOVE","number":5,"content":""},{"operation":"REMOVE","number":6,"content":"class MergeHunkParser : HunkParser() {"},{"operation":"REMOVE","number":7,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"REMOVE","number":8,"content":"        return emptyList()"},{"operation":"REMOVE","number":9,"content":"    }"},{"operation":"REMOVE","number":10,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"},{"operation":"ADD","number":3,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"class SimpleChangeParser : ChangeParser() {"},{"operation":"REMOVE","number":8,"content":"    override fun extractAnnotatedLines(lines: MutableList\u003cString\u003e): List\u003cAnnotatedLineDTO\u003e {"},{"operation":"REMOVE","number":9,"content":"        return emptyList()"},{"operation":"REMOVE","number":10,"content":"    }"},{"operation":"ADD","number":7,"content":"class SimpleChangeParser(otherCommitId: String) : ChangeParser(otherCommitId) {"},{"operation":"ADD","number":8,"content":"    override fun addAnnotatedLines(changeDTO: ChangeDTO){}"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    override fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"REMOVE","number":13,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":14,"content":"            getHunks(lines).map { SimpleHunkParser().parse(it) }"},{"operation":"REMOVE","number":15,"content":"        } else emptyList()"},{"operation":"REMOVE","number":16,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","newFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":7,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"            getChanges(lines).map { SimpleChangeParser().parse(it) }"},{"operation":"ADD","number":9,"content":"            getChanges(lines).map { SimpleChangeParser(commitId).parse(it) }"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"data class Author(var id: AuthorID, var commits: MutableList\u003cCommit\u003e) {"},{"operation":"ADD","number":3,"content":"data class Author(var id: AuthorID, var commits: MutableList\u003cCommit\u003e \u003d ArrayList()) {"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class Change(var commit: Commit, var type: ChangeType, var file: File, var oldFilename: String, var newFileName: String, var lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit, val oldFilename: String, val newFileName: String, var lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"data class File(var fullyQualifiedName: String, val changes: MutableList\u003cChange\u003e \u003d ArrayList()) {"},{"operation":"ADD","number":8,"content":"data class File(var fullyQualifiedName: String, val isBinary: Boolean, val changes: MutableList\u003cChange\u003e \u003d ArrayList()) {"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/ProjectTransformer.kt","newFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/ProjectTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"import org.dxworks.gitinspector.model.AnnotatedLine"},{"operation":"REMOVE","number":9,"content":"import org.dxworks.gitinspector.model.LineChange"},{"operation":"REMOVE","number":10,"content":"import org.dxworks.gitinspector.model.Project"}]},{"lineChanges":[{"operation":"REMOVE","number":46,"content":"                val change \u003d Change(commit \u003d commit,"},{"operation":"ADD","number":43,"content":"                val change \u003d Change("},{"operation":"ADD","number":44,"content":"                        commit \u003d commit,"}]},{"lineChanges":[{"operation":"ADD","number":47,"content":"                        otherCommit \u003d commit.parents.find { it.id \u003d\u003d changeDTO.otherCommitId }!!,"}]},{"lineChanges":[{"operation":"REMOVE","number":61,"content":"            val changeType \u003d change.type"},{"operation":"REMOVE","number":62,"content":""},{"operation":"REMOVE","number":63,"content":"            var file: File?"},{"operation":"REMOVE","number":64,"content":""},{"operation":"REMOVE","number":65,"content":"            when (changeType) {"},{"operation":"ADD","number":60,"content":"            return when (change.type) {"}]},{"lineChanges":[{"operation":"REMOVE","number":67,"content":"                    file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"ADD","number":62,"content":"                    var file \u003d project.fileRegistry.getByID(change.newFileName)"}]},{"lineChanges":[{"operation":"REMOVE","number":69,"content":"                        file \u003d File(fullyQualifiedName \u003d change.newFileName)"},{"operation":"ADD","number":64,"content":"                        file \u003d File(change.newFileName, change.isBinary)"}]},{"lineChanges":[{"operation":"ADD","number":67,"content":"                    file"}]},{"lineChanges":[{"operation":"REMOVE","number":74,"content":"                    file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"ADD","number":70,"content":"                    val file \u003d project.fileRegistry.getByID(change.oldFileName)"}]},{"lineChanges":[{"operation":"ADD","number":77,"content":"                    file!!"}]},{"lineChanges":[{"operation":"REMOVE","number":83,"content":"                    file \u003d project.fileRegistry.getByID(change.oldFileName)"},{"operation":"ADD","number":80,"content":"                    val file \u003d project.fileRegistry.getByID(change.oldFileName)"}]},{"lineChanges":[{"operation":"ADD","number":83,"content":"                    file!!"}]},{"lineChanges":[{"operation":"REMOVE","number":88,"content":"                    file \u003d project.fileRegistry.getByID(change.newFileName)"},{"operation":"ADD","number":86,"content":"                    val file \u003d project.fileRegistry.getByID(change.newFileName)"}]},{"lineChanges":[{"operation":"ADD","number":90,"content":"                    file!!"}]},{"lineChanges":[{"operation":"REMOVE","number":94,"content":""},{"operation":"REMOVE","number":95,"content":"            return file!!"}]},{"lineChanges":[{"operation":"REMOVE","number":99,"content":"            val authorID \u003d AuthorID(name \u003d commitDTO.authorName, email \u003d commitDTO.authorEmail)"},{"operation":"ADD","number":96,"content":"            val authorID \u003d AuthorID(commitDTO.authorEmail, commitDTO.authorName)"}]},{"lineChanges":[{"operation":"REMOVE","number":103,"content":"                author \u003d Author(id \u003d authorID, commits \u003d ArrayList())"},{"operation":"ADD","number":100,"content":"                author \u003d Author(authorID)"}]}],"annotatedLines":[],"parentCommitId":"68c30d6a508e58dafb9c80277c8e2768511fcec2","isBinary":false,"isBlame":false}]},{"id":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","parentIds":["83a6feac61c2e94fb51b750016f7cf539785420f"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 16, 2019, 3:32:25 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 16, 2019, 3:32:25 PM","message":"renamed packages","changes":[{"oldFileName":"gitinspector-api/pom.xml","newFileName":"inspectorgit-api/pom.xml","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003einspectorgit\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003einspectorgit-api\u003c/artifactId\u003e"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/AnnotatedLineDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/AnnotatedLineDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ChangeDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.enums.ChangeType"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/CommitDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/CommitDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/HunkDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/HunkDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/LineChangeDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/LineChangeDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.enums.LineOperation"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/dto/ProjectDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ProjectDTO.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.dto"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.dto"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/enums/ChangeType.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/enums/ChangeType.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.enums"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.enums"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-api/src/main/java/org/dxworks/gitinspector/enums/LineOperation.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/enums/LineOperation.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.enums"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.enums"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/pom.xml","newFileName":"inspectorgit-client/pom.xml","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003einspectorgit\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    \u003cartifactId\u003egitinspector-client\u003c/artifactId\u003e"},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003einspectorgit-client\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"            \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":17,"content":"            \u003cartifactId\u003einspectorgit-api\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"            \u003cartifactId\u003egitinspector-core\u003c/artifactId\u003e"},{"operation":"ADD","number":22,"content":"            \u003cartifactId\u003einspectorgit-core\u003c/artifactId\u003e"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/GitClient.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.parsers.LogParser"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.utils.DTO_FOLDER_PATH"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.utils.Helper"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.parsers.LogParser"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.utils.DTO_FOLDER_PATH"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.utils.Helper"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/CommitParserFactory.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/CommitParserFactory.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.impl.MergeCommitParser"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.parsers.impl.SimpleCommitParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.GitClient"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.parsers.abstracts.CommitParser"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.impl.MergeCommitParser"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.parsers.impl.SimpleCommitParser"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/GitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/GitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/LogParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/LogParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.GitClient"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.ProjectDTO"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/ChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.abstracts"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"REMOVE","number":8,"content":"import org.dxworks.gitinspector.parsers.impl.SimpleHunkParser"},{"operation":"REMOVE","number":9,"content":"import org.dxworks.gitinspector.utils.devNull"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.HunkDTO"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.enums.ChangeType"},{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.parsers.GitParser"},{"operation":"ADD","number":8,"content":"import org.dxworks.inspectorgit.parsers.impl.SimpleHunkParser"},{"operation":"ADD","number":9,"content":"import org.dxworks.inspectorgit.utils.devNull"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/CommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.abstracts"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.GitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitinspector.dto.CommitDTO;"},{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.dto.CommitDTO;"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/abstracts/HunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/HunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.abstracts"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.abstracts"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.GitParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.HunkDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.LineChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.GitParser"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/BlameParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.AnnotatedLineDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitinspector.parsers.abstracts.ChangeParser"},{"operation":"REMOVE","number":8,"content":"import org.dxworks.gitinspector.utils.devNull"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.GitClient"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.AnnotatedLineDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.dto.HunkDTO"},{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.parsers.abstracts.ChangeParser"},{"operation":"ADD","number":8,"content":"import org.dxworks.inspectorgit.utils.devNull"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/MergeCommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeCommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.GitClient"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.GitClient"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.abstracts.CommitParser"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.HunkDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.ChangeParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.HunkDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.abstracts.ChangeParser"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleCommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleCommitParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.parsers.abstracts.CommitParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.parsers.abstracts.CommitParser"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"            getChanges(lines).map { SimpleChangeParser(commitId).parse(it) }"},{"operation":"ADD","number":9,"content":"            getChanges(lines).map { SimpleChangeParser(parentIds.first()).parse(it) }"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-client/src/main/java/org/dxworks/gitinspector/parsers/impl/SimpleHunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleHunkParser.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.parsers.impl"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.LineChangeDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.enums.LineOperation"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.parsers.abstracts.HunkParser"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.LineChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.enums.LineOperation"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.abstracts.HunkParser"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/pom.xml","newFileName":"inspectorgit-core/pom.xml","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"        \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":6,"content":"        \u003cartifactId\u003einspectorgit\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"    \u003cartifactId\u003egitinspector-core\u003c/artifactId\u003e"},{"operation":"ADD","number":12,"content":"    \u003cartifactId\u003einspectorgit-core\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":"            \u003cartifactId\u003egitinspector-api\u003c/artifactId\u003e"},{"operation":"ADD","number":17,"content":"            \u003cartifactId\u003einspectorgit-api\u003c/artifactId\u003e"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/Main.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/Main.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.transformers.ProjectTransformer"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.utils.DTO_FOLDER_PATH"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.utils.Helper"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.ProjectDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.transformers.ProjectTransformer"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.utils.DTO_FOLDER_PATH"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.utils.Helper"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/AnnotatedLine.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/AnnotatedLine.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Author.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Author.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/AuthorID.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/AuthorID.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Change.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.enums.LineOperation"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.enums.ChangeType"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.enums.LineOperation"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit?, val oldFilename: String, val newFileName: String, val lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":7,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD) null else file.getLastChange(commit)"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit, val oldFilename: String, val newFileName: String, var lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"REMOVE","number":7,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD || file.changes.isEmpty()) null else file.getLastChange(commit)"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Commit.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Commit.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/File.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/File.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.utils.devNull"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.enums.ChangeType"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.utils.devNull"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":"        else changes.firstOrNull { it.commit \u003d\u003d commit }"},{"operation":"REMOVE","number":31,"content":"                ?: commit.parents.mapNotNull { getLastChange(it) }.firstOrNull()"},{"operation":"REMOVE","number":32,"content":"    }"},{"operation":"REMOVE","number":33,"content":""},{"operation":"REMOVE","number":34,"content":"    private fun getLastChangeAnnotatedLines(commits: List\u003cCommit\u003e): List\u003cAnnotatedLine\u003e {"},{"operation":"REMOVE","number":35,"content":"        return if (commits.isEmpty())"},{"operation":"REMOVE","number":36,"content":"            return emptyList()"},{"operation":"REMOVE","number":37,"content":"        else"},{"operation":"REMOVE","number":38,"content":"            commits.mapNotNull { commit -\u003e commit.changes.find { it.commit \u003d\u003d commit } }"},{"operation":"REMOVE","number":39,"content":"                    .firstOrNull()?.annotatedLines ?: getLastChangeAnnotatedLines(commits.flatMap { it.parents })"},{"operation":"ADD","number":30,"content":"        else changes.find { it.commit \u003d\u003d commit } ?: getLastChange(commit.parents.first())"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/LineChange.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/LineChange.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.enums.LineOperation"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.enums.LineOperation"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/model/Project.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Project.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.model"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.model"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.registries.AuthorRegistry"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.registries.CommitRegistry"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.registries.FileRegistry"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.registries.AuthorRegistry"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.registries.CommitRegistry"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.registries.FileRegistry"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/AbstractRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/AbstractRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.model.Commit"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.model.Commit"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/AuthorRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/AuthorRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.model.Author"},{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.model.AuthorID"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.model.Author"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.model.AuthorID"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/CommitRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/CommitRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.model.Commit"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.model.Commit"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/registries/FileRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/FileRegistry.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.registries"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.registries"}]},{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.gitinspector.model.File"},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.model.File"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/transformers/ProjectTransformer.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.transformers"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.transformers"}]},{"lineChanges":[{"operation":"REMOVE","number":4,"content":"import org.dxworks.gitinspector.dto.ChangeDTO"},{"operation":"REMOVE","number":5,"content":"import org.dxworks.gitinspector.dto.CommitDTO"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.gitinspector.dto.ProjectDTO"},{"operation":"REMOVE","number":7,"content":"import org.dxworks.gitinspector.enums.ChangeType"},{"operation":"REMOVE","number":8,"content":"import org.dxworks.gitinspector.model.*"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.CommitDTO"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.dto.ProjectDTO"},{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.enums.ChangeType"},{"operation":"ADD","number":8,"content":"import org.dxworks.inspectorgit.model.*"}]},{"lineChanges":[{"operation":"REMOVE","number":47,"content":"                        otherCommit \u003d commit.parents.find { it.id \u003d\u003d changeDTO.otherCommitId }!!,"},{"operation":"ADD","number":47,"content":"                        otherCommit \u003d if (changeDTO.otherCommitId.isEmpty()) null else commit.parents.find { it.id \u003d\u003d changeDTO.otherCommitId }!!,"}]},{"lineChanges":[{"operation":"REMOVE","number":50,"content":"                        lineChanges \u003d changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList(),"},{"operation":"REMOVE","number":51,"content":"                        annotatedLines \u003d changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList())"},{"operation":"ADD","number":50,"content":"                        lineChanges \u003d getLineChanges(changeDTO),"},{"operation":"ADD","number":51,"content":"                        annotatedLines \u003d getAnnotatedLines(changeDTO, project))"}]},{"lineChanges":[{"operation":"ADD","number":58,"content":"        private fun getLineChanges(changeDTO: ChangeDTO) \u003d"},{"operation":"ADD","number":59,"content":"                changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList()"},{"operation":"ADD","number":60,"content":""},{"operation":"ADD","number":61,"content":"        private fun getAnnotatedLines(changeDTO: ChangeDTO, project: Project): MutableList\u003cAnnotatedLine\u003e {"},{"operation":"ADD","number":62,"content":"            LOG.info(\"Calculating annotated lines\")"},{"operation":"ADD","number":63,"content":"            return changeDTO.annotatedLines.map { AnnotatedLine(project.commitRegistry.getByID(it.commitId)!!, it.number, it.content) }.toMutableList()"},{"operation":"ADD","number":64,"content":"        }"},{"operation":"ADD","number":65,"content":""}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/utils/Constants.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Constants.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.utils"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.utils"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"private const val APP_FOLDER_NAME \u003d \".gitinspector\""},{"operation":"ADD","number":6,"content":"private const val APP_FOLDER_NAME \u003d \".inspectorgit\""}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"gitinspector-core/src/main/java/org/dxworks/gitinspector/utils/Helper.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Helper.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":1,"content":"package org.dxworks.gitinspector.utils"},{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.utils"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false},{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    \u003cartifactId\u003egitinspector\u003c/artifactId\u003e"},{"operation":"ADD","number":8,"content":"    \u003cartifactId\u003einspectorgit\u003c/artifactId\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"        \u003cmodule\u003egitinspector-api\u003c/module\u003e"},{"operation":"REMOVE","number":13,"content":"        \u003cmodule\u003egitinspector-client\u003c/module\u003e"},{"operation":"REMOVE","number":14,"content":"        \u003cmodule\u003egitinspector-core\u003c/module\u003e"},{"operation":"ADD","number":12,"content":"        \u003cmodule\u003einspectorgit-api\u003c/module\u003e"},{"operation":"ADD","number":13,"content":"        \u003cmodule\u003einspectorgit-client\u003c/module\u003e"},{"operation":"ADD","number":14,"content":"        \u003cmodule\u003einspectorgit-core\u003c/module\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":119,"content":"        \u003cdependency\u003e"},{"operation":"REMOVE","number":120,"content":"            \u003cgroupId\u003ech.qos.logback\u003c/groupId\u003e"},{"operation":"REMOVE","number":121,"content":"            \u003cartifactId\u003elogback-classic\u003c/artifactId\u003e"},{"operation":"REMOVE","number":122,"content":"            \u003cversion\u003e1.3.0-alpha4\u003c/version\u003e"},{"operation":"REMOVE","number":123,"content":"        \u003c/dependency\u003e"},{"operation":"ADD","number":119,"content":"\u003c!--        \u003cdependency\u003e--\u003e"},{"operation":"ADD","number":120,"content":"\u003c!--            \u003cgroupId\u003ech.qos.logback\u003c/groupId\u003e--\u003e"},{"operation":"ADD","number":121,"content":"\u003c!--            \u003cartifactId\u003elogback-classic\u003c/artifactId\u003e--\u003e"},{"operation":"ADD","number":122,"content":"\u003c!--            \u003cversion\u003e1.3.0-alpha4\u003c/version\u003e--\u003e"},{"operation":"ADD","number":123,"content":"\u003c!--        \u003c/dependency\u003e--\u003e"}]}],"annotatedLines":[],"parentCommitId":"83a6feac61c2e94fb51b750016f7cf539785420f","isBinary":false,"isBlame":false}]},{"id":"f55604defded3909761389eb06cf02d98bb1391d","parentIds":["4ca9c3f302a6b7c0032c196b0abe9394ed8826ea"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 17, 2019, 11:00:44 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 17, 2019, 11:00:44 PM","message":"a lot of fixes, the model can be created","changes":[{"oldFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/CommitDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/CommitDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"                val date: Date,"},{"operation":"ADD","number":9,"content":"                val authorDate: Date,"},{"operation":"ADD","number":10,"content":"                val committerName: String,"},{"operation":"ADD","number":11,"content":"                val committerEmail: String,"},{"operation":"ADD","number":12,"content":"                val committerDate: Date,"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"                val changes: List\u003cChangeDTO\u003e) {"},{"operation":"REMOVE","number":12,"content":"    val isMergeCommit: Boolean \u003d parentIds.size \u003e 1"},{"operation":"REMOVE","number":13,"content":"}"},{"operation":"ADD","number":14,"content":"\\ No newline at end of file"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":23,"content":"    private val gitLogCommand \u003d \"$git log $renameDetectionThreshold -c $contextThreshold --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%ndate: %ad%nmessage:%n%s%n%b\\\"\""},{"operation":"REMOVE","number":24,"content":"    private val gitAffectedFilesCommand \u003d \"$git log -m -1 --name-only --pretty\u003d\\\"format:\\\"\""},{"operation":"ADD","number":23,"content":"    private val gitLogCommand \u003d \"$git log $renameDetectionThreshold -c $contextThreshold --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%nauthor date: %ad%ncommitter name: %cn%ncommitter email: %ce%ncommitter date: %cd%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":24,"content":"    private val gitAffectedFilesCommand \u003d \"$git log $renameDetectionThreshold -m -1 --name-only --pretty\u003d\\\"format:\\\"\""}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.CommitDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":""},{"operation":"REMOVE","number":7,"content":"import org.dxworks.inspectorgit.dto.CommitDTO;"}]},{"lineChanges":[{"operation":"ADD","number":16,"content":"    private val author \u003d \"author\""},{"operation":"ADD","number":17,"content":""},{"operation":"ADD","number":18,"content":"    private val committer \u003d \"committer\""},{"operation":"ADD","number":19,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":24,"content":"                authorName \u003d extractAuthorName(lines),"},{"operation":"REMOVE","number":25,"content":"                authorEmail \u003d extractAuthorEmail(lines),"},{"operation":"REMOVE","number":26,"content":"                date \u003d extractDate(lines),"},{"operation":"ADD","number":27,"content":"                authorName \u003d extractName(lines, author),"},{"operation":"ADD","number":28,"content":"                authorEmail \u003d extractEmail(lines, author),"},{"operation":"ADD","number":29,"content":"                authorDate \u003d extractDate(lines, author),"},{"operation":"ADD","number":30,"content":"                committerName \u003d extractName(lines, committer),"},{"operation":"ADD","number":31,"content":"                committerEmail \u003d extractEmail(lines, committer),"},{"operation":"ADD","number":32,"content":"                committerDate \u003d extractDate(lines, committer),"}]},{"lineChanges":[{"operation":"REMOVE","number":56,"content":"    private fun extractAuthorName(lines: MutableList\u003cString\u003e): String {"},{"operation":"REMOVE","number":57,"content":"        return lines.removeAt(0).removePrefix(\"author name: \")"},{"operation":"ADD","number":62,"content":"    private fun extractName(lines: MutableList\u003cString\u003e, devType: String): String {"},{"operation":"ADD","number":63,"content":"        return lines.removeAt(0).removePrefix(\"$devType name: \")"}]},{"lineChanges":[{"operation":"REMOVE","number":60,"content":"    private fun extractAuthorEmail(lines: MutableList\u003cString\u003e): String {"},{"operation":"REMOVE","number":61,"content":"        return lines.removeAt(0).removePrefix(\"author email: \")"},{"operation":"ADD","number":66,"content":"    private fun extractEmail(lines: MutableList\u003cString\u003e, devType: String): String {"},{"operation":"ADD","number":67,"content":"        return lines.removeAt(0).removePrefix(\"$devType email: \")"}]},{"lineChanges":[{"operation":"REMOVE","number":64,"content":"    private fun extractDate(lines: MutableList\u003cString\u003e): Date {"},{"operation":"REMOVE","number":65,"content":"        return Date(lines.removeAt(0).removePrefix(\"date: \"))"},{"operation":"ADD","number":70,"content":"    private fun extractDate(lines: MutableList\u003cString\u003e, devType: String): Date {"},{"operation":"ADD","number":71,"content":"        return Date(lines.removeAt(0).removePrefix(\"$devType date: \"))"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/AnnotatedLine.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/AnnotatedLine.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"        return \"${commit.id} (${commit.author.id} ${commit.date} $number) $content\""},{"operation":"ADD","number":5,"content":"        return \"${commit.id} (${commit.author.id} ${commit.committerDate} $number) $content\""}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.utils.devNull"}]},{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit?, val oldFilename: String, val newFileName: String, val lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"REMOVE","number":7,"content":"    var parent: Change? \u003d if (type \u003d\u003d ChangeType.ADD) null else file.getLastChange(commit)"},{"operation":"ADD","number":7,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit?, val oldFileName: String, val newFileName: String, val lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":8,"content":"    var parent: Change? \u003d file.getLastChange(commit)"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Commit.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Commit.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"data class Commit(var id: String, var message: String, var date: Date, var author: Author, var parents: List\u003cCommit\u003e, var changes: List\u003cChange\u003e) {"},{"operation":"ADD","number":5,"content":"data class Commit(var id: String, var message: String, val authorDate: Date, val committerDate: Date, val author: Author, val committer: Author, var parents: List\u003cCommit\u003e, var changes: List\u003cChange\u003e) {"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/File.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/File.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":28,"content":"    fun getLastChange(commit: Commit): Change? {"},{"operation":"REMOVE","number":29,"content":"        return if (changes.isEmpty() || changes.first().commit.date \u003e commit.date) null"},{"operation":"REMOVE","number":30,"content":"        else changes.find { it.commit \u003d\u003d commit } ?: getLastChange(commit.parents.first())"},{"operation":"ADD","number":28,"content":"    tailrec fun getLastChange(commit: Commit?): Change? {"},{"operation":"ADD","number":29,"content":"        return if (commit \u003d\u003d null || changes.isEmpty()) null"},{"operation":"ADD","number":30,"content":"        else changes.find { it.commit \u003d\u003d commit }"},{"operation":"ADD","number":31,"content":"                ?: getLastChange(commit.parents.firstOrNull())"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":12,"content":"class ProjectTransformer() {"},{"operation":"ADD","number":12,"content":"class ProjectTransformer {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"                val author \u003d getCommitAuthor(it, project)"},{"operation":"ADD","number":22,"content":"                val author \u003d getAuthor(it, project)"},{"operation":"ADD","number":23,"content":"                LOG.info(\"Parsed author\")"},{"operation":"ADD","number":24,"content":"                val committer \u003d getCommitter(it, project)"},{"operation":"ADD","number":25,"content":"                LOG.info(\"Parsed committer\")"},{"operation":"ADD","number":26,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":25,"content":"                        date \u003d it.date,"},{"operation":"ADD","number":29,"content":"                        authorDate \u003d it.authorDate,"},{"operation":"ADD","number":30,"content":"                        committerDate \u003d it.committerDate,"}]},{"lineChanges":[{"operation":"ADD","number":32,"content":"                        committer \u003d committer,"}]},{"lineChanges":[{"operation":"ADD","number":36,"content":"                LOG.info(\"Adding commit to registry and authors\")"}]},{"lineChanges":[{"operation":"ADD","number":39,"content":"                if (committer !\u003d author)"},{"operation":"ADD","number":40,"content":"                    committer.commits.add(commit)"},{"operation":"ADD","number":41,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":41,"content":"            commit.changes \u003d changes.map { changeDTO -\u003e"},{"operation":"ADD","number":51,"content":"            LOG.info(\"Filtering changes\")"},{"operation":"ADD","number":52,"content":"            val filteredChanges \u003d filterChanges(commit, changes, project)"},{"operation":"ADD","number":53,"content":"            LOG.info(\"Done filtering changes\")"},{"operation":"ADD","number":54,"content":"            commit.changes \u003d filteredChanges.map { changeDTO -\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":48,"content":"                        oldFilename \u003d changeDTO.oldFileName,"},{"operation":"ADD","number":61,"content":"                        oldFileName \u003d changeDTO.oldFileName,"}]},{"lineChanges":[{"operation":"ADD","number":71,"content":"        private fun filterChanges(commit: Commit, changes: List\u003cChangeDTO\u003e, project: Project): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":72,"content":"            return if (commit.isMergeCommit) {"},{"operation":"ADD","number":73,"content":"                LOG.info(\"Getting potentially renamed files\")"},{"operation":"ADD","number":74,"content":"                val potentiallyRenamedFiles \u003d changes.filter { it.type \u003d\u003d ChangeType.ADD }"},{"operation":"ADD","number":75,"content":"                        .mapNotNull { project.fileRegistry.getByID(it.newFileName) }.distinctBy { it.fullyQualifiedName }"},{"operation":"ADD","number":76,"content":"                LOG.info(\"Found: ${potentiallyRenamedFiles.size}\")"},{"operation":"ADD","number":77,"content":"                LOG.info(\"Getting rename changes\")"},{"operation":"ADD","number":78,"content":"                val renameChanges \u003d potentiallyRenamedFiles.mapNotNull { it.changes.find { change -\u003e change.isRenameChange } }"},{"operation":"ADD","number":79,"content":"                val newFileNames \u003d renameChanges.map { it.newFileName }"},{"operation":"ADD","number":80,"content":"                val oldFileNames \u003d renameChanges.map { it.oldFileName }"},{"operation":"ADD","number":81,"content":"                LOG.info(\"Found: ${renameChanges.size}\")"},{"operation":"ADD","number":82,"content":"                LOG.info(\"filtering legit changes\")"},{"operation":"ADD","number":83,"content":"                val legitChanges \u003d changes.filter { !((it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) || (it.type \u003d\u003d ChangeType.DELETE \u0026\u0026 oldFileNames.contains(it.oldFileName))) }"},{"operation":"ADD","number":84,"content":"                val fakeAddChanges \u003d changes.filter { (it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) }"},{"operation":"ADD","number":85,"content":"                LOG.info(\"Found: ${legitChanges.size}\")"},{"operation":"ADD","number":86,"content":"                LOG.info(\"Substituting ${fakeAddChanges.size} add-delete pairs with rename changes\")"},{"operation":"ADD","number":87,"content":"                legitChanges + fakeAddChanges.map {"},{"operation":"ADD","number":88,"content":"                    val renameChange \u003d renameChanges.find { rc -\u003e rc.newFileName \u003d\u003d it.newFileName }!!"},{"operation":"ADD","number":89,"content":"                    ChangeDTO(oldFileName \u003d renameChange.oldFileName,"},{"operation":"ADD","number":90,"content":"                            newFileName \u003d renameChange.newFileName,"},{"operation":"ADD","number":91,"content":"                            type \u003d ChangeType.RENAME,"},{"operation":"ADD","number":92,"content":"                            otherCommitId \u003d it.otherCommitId,"},{"operation":"ADD","number":93,"content":"                            isBinary \u003d it.isBinary,"},{"operation":"ADD","number":94,"content":"                            hunks \u003d emptyList(),"},{"operation":"ADD","number":95,"content":"                            annotatedLines \u003d it.annotatedLines"},{"operation":"ADD","number":96,"content":"                    )"},{"operation":"ADD","number":97,"content":"                }"},{"operation":"ADD","number":98,"content":"            } else changes"},{"operation":"ADD","number":99,"content":"        }"},{"operation":"ADD","number":100,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":103,"content":"        private fun getCommitAuthor(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"REMOVE","number":104,"content":"            val authorID \u003d AuthorID(commitDTO.authorEmail, commitDTO.authorName)"},{"operation":"ADD","number":146,"content":"        private fun getAuthor(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"ADD","number":147,"content":"            return getAuthor(project, AuthorID(commitDTO.authorEmail, commitDTO.authorName))"},{"operation":"ADD","number":148,"content":"        }"},{"operation":"ADD","number":149,"content":""},{"operation":"ADD","number":150,"content":"        private fun getCommitter(commitDTO: CommitDTO, project: Project): Author {"},{"operation":"ADD","number":151,"content":"            return getAuthor(project, AuthorID(commitDTO.committerEmail, commitDTO.committerName))"},{"operation":"ADD","number":152,"content":"        }"}]},{"lineChanges":[{"operation":"ADD","number":154,"content":"        private fun getAuthor(project: Project, authorID: AuthorID): Author {"}]},{"lineChanges":[{"operation":"REMOVE","number":119,"content":"}"},{"operation":"ADD","number":168,"content":"\\ No newline at end of file"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Helper.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Helper.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.dto.ProjectDTO"}]},{"lineChanges":[{"operation":"ADD","number":9,"content":"import java.nio.file.Paths"}]},{"lineChanges":[{"operation":"ADD","number":36,"content":"}"},{"operation":"ADD","number":37,"content":""},{"operation":"ADD","number":38,"content":"fun main() {"},{"operation":"ADD","number":39,"content":"    Helper.toJsonFile(Paths.get(\"/home/darius/Documents/dx/kafka/1caaf6db400df7e37b7f0416bb83ab451018a5c8.json\"), Helper.jsonFromFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), ProjectDTO::class.java).commits.filter{it.id \u003d\u003d \"3f432cd01c4728396f277e33897f6f898c530c99\"})"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false},{"oldFileName":"pom.xml","newFileName":"pom.xml","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":119,"content":"\u003c!--        \u003cdependency\u003e--\u003e"},{"operation":"REMOVE","number":120,"content":"\u003c!--            \u003cgroupId\u003ech.qos.logback\u003c/groupId\u003e--\u003e"},{"operation":"REMOVE","number":121,"content":"\u003c!--            \u003cartifactId\u003elogback-classic\u003c/artifactId\u003e--\u003e"},{"operation":"REMOVE","number":122,"content":"\u003c!--            \u003cversion\u003e1.3.0-alpha4\u003c/version\u003e--\u003e"},{"operation":"REMOVE","number":123,"content":"\u003c!--        \u003c/dependency\u003e--\u003e"},{"operation":"ADD","number":119,"content":"        \u003cdependency\u003e"},{"operation":"ADD","number":120,"content":"            \u003cgroupId\u003ech.qos.logback\u003c/groupId\u003e"},{"operation":"ADD","number":121,"content":"            \u003cartifactId\u003elogback-classic\u003c/artifactId\u003e"},{"operation":"ADD","number":122,"content":"            \u003cversion\u003e1.3.0-alpha4\u003c/version\u003e"},{"operation":"ADD","number":123,"content":"        \u003c/dependency\u003e"}]}],"annotatedLines":[],"parentCommitId":"4ca9c3f302a6b7c0032c196b0abe9394ed8826ea","isBinary":false,"isBlame":false}]},{"id":"c06076211b91808d846213c00d074d36d5d8b271","parentIds":["f55604defded3909761389eb06cf02d98bb1391d"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 18, 2019, 1:19:24 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 18, 2019, 1:19:24 PM","message":"minor refactoring","changes":[{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":22,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":41,"content":"    protected fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":41,"content":"    private fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":74,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.inspectorgit.utils.devNull"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":34,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":38,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Commit.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Commit.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Project.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Project.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/AbstractRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/AbstractRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":3,"content":"import org.dxworks.inspectorgit.model.Commit"}]},{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    val map: MutableMap\u003cID, TYPE\u003e \u003d HashMap()"},{"operation":"ADD","number":6,"content":"    private val map: MutableMap\u003cID, TYPE\u003e \u003d HashMap()"}]},{"lineChanges":[{"operation":"REMOVE","number":15,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":52,"content":"            val filteredChanges \u003d filterChanges(commit, changes, project)"},{"operation":"ADD","number":52,"content":"            val admittedChanges \u003d if (commit.isMergeCommit) filterChanges(changes, project) else changes"}]},{"lineChanges":[{"operation":"REMOVE","number":54,"content":"            commit.changes \u003d filteredChanges.map { changeDTO -\u003e"},{"operation":"ADD","number":54,"content":"            commit.changes \u003d admittedChanges.map { changeDTO -\u003e"}]},{"lineChanges":[{"operation":"REMOVE","number":71,"content":"        private fun filterChanges(commit: Commit, changes: List\u003cChangeDTO\u003e, project: Project): List\u003cChangeDTO\u003e {"},{"operation":"REMOVE","number":72,"content":"            return if (commit.isMergeCommit) {"},{"operation":"REMOVE","number":73,"content":"                LOG.info(\"Getting potentially renamed files\")"},{"operation":"REMOVE","number":74,"content":"                val potentiallyRenamedFiles \u003d changes.filter { it.type \u003d\u003d ChangeType.ADD }"},{"operation":"REMOVE","number":75,"content":"                        .mapNotNull { project.fileRegistry.getByID(it.newFileName) }.distinctBy { it.fullyQualifiedName }"},{"operation":"REMOVE","number":76,"content":"                LOG.info(\"Found: ${potentiallyRenamedFiles.size}\")"},{"operation":"REMOVE","number":77,"content":"                LOG.info(\"Getting rename changes\")"},{"operation":"REMOVE","number":78,"content":"                val renameChanges \u003d potentiallyRenamedFiles.mapNotNull { it.changes.find { change -\u003e change.isRenameChange } }"},{"operation":"REMOVE","number":79,"content":"                val newFileNames \u003d renameChanges.map { it.newFileName }"},{"operation":"REMOVE","number":80,"content":"                val oldFileNames \u003d renameChanges.map { it.oldFileName }"},{"operation":"REMOVE","number":81,"content":"                LOG.info(\"Found: ${renameChanges.size}\")"},{"operation":"REMOVE","number":82,"content":"                LOG.info(\"filtering legit changes\")"},{"operation":"REMOVE","number":83,"content":"                val legitChanges \u003d changes.filter { !((it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) || (it.type \u003d\u003d ChangeType.DELETE \u0026\u0026 oldFileNames.contains(it.oldFileName))) }"},{"operation":"REMOVE","number":84,"content":"                val fakeAddChanges \u003d changes.filter { (it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) }"},{"operation":"REMOVE","number":85,"content":"                LOG.info(\"Found: ${legitChanges.size}\")"},{"operation":"REMOVE","number":86,"content":"                LOG.info(\"Substituting ${fakeAddChanges.size} add-delete pairs with rename changes\")"},{"operation":"REMOVE","number":87,"content":"                legitChanges + fakeAddChanges.map {"},{"operation":"REMOVE","number":88,"content":"                    val renameChange \u003d renameChanges.find { rc -\u003e rc.newFileName \u003d\u003d it.newFileName }!!"},{"operation":"REMOVE","number":89,"content":"                    ChangeDTO(oldFileName \u003d renameChange.oldFileName,"},{"operation":"REMOVE","number":90,"content":"                            newFileName \u003d renameChange.newFileName,"},{"operation":"REMOVE","number":91,"content":"                            type \u003d ChangeType.RENAME,"},{"operation":"REMOVE","number":92,"content":"                            otherCommitId \u003d it.otherCommitId,"},{"operation":"REMOVE","number":93,"content":"                            isBinary \u003d it.isBinary,"},{"operation":"REMOVE","number":94,"content":"                            hunks \u003d emptyList(),"},{"operation":"REMOVE","number":95,"content":"                            annotatedLines \u003d it.annotatedLines"},{"operation":"REMOVE","number":96,"content":"                    )"},{"operation":"REMOVE","number":97,"content":"                }"},{"operation":"REMOVE","number":98,"content":"            } else changes"},{"operation":"ADD","number":71,"content":"        private fun filterChanges(changes: List\u003cChangeDTO\u003e, project: Project): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":72,"content":"            LOG.info(\"Getting potentially renamed files\")"},{"operation":"ADD","number":73,"content":"            val potentiallyRenamedFiles \u003d changes.filter { it.type \u003d\u003d ChangeType.ADD }"},{"operation":"ADD","number":74,"content":"                    .mapNotNull { project.fileRegistry.getByID(it.newFileName) }.distinctBy { it.fullyQualifiedName }"},{"operation":"ADD","number":75,"content":"            LOG.info(\"Found: ${potentiallyRenamedFiles.size}\")"},{"operation":"ADD","number":76,"content":"            LOG.info(\"Getting rename changes\")"},{"operation":"ADD","number":77,"content":"            val renameChanges \u003d potentiallyRenamedFiles.mapNotNull { it.changes.find { change -\u003e change.isRenameChange } }"},{"operation":"ADD","number":78,"content":"            val newFileNames \u003d renameChanges.map { it.newFileName }"},{"operation":"ADD","number":79,"content":"            val oldFileNames \u003d renameChanges.map { it.oldFileName }"},{"operation":"ADD","number":80,"content":"            LOG.info(\"Found: ${renameChanges.size}\")"},{"operation":"ADD","number":81,"content":"            LOG.info(\"filtering legit changes\")"},{"operation":"ADD","number":82,"content":"            val legitChanges \u003d changes.filter { !((it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) || (it.type \u003d\u003d ChangeType.DELETE \u0026\u0026 oldFileNames.contains(it.oldFileName))) }"},{"operation":"ADD","number":83,"content":"            val fakeAddChanges \u003d changes.filter { (it.type \u003d\u003d ChangeType.ADD \u0026\u0026 newFileNames.contains(it.newFileName)) }"},{"operation":"ADD","number":84,"content":"            LOG.info(\"Found: ${legitChanges.size}\")"},{"operation":"ADD","number":85,"content":"            LOG.info(\"Substituting ${fakeAddChanges.size} add-delete pairs with rename changes\")"},{"operation":"ADD","number":86,"content":"            return legitChanges + fakeAddChanges.map {"},{"operation":"ADD","number":87,"content":"                val renameChange \u003d renameChanges.find { rc -\u003e rc.newFileName \u003d\u003d it.newFileName }!!"},{"operation":"ADD","number":88,"content":"                ChangeDTO(oldFileName \u003d renameChange.oldFileName,"},{"operation":"ADD","number":89,"content":"                        newFileName \u003d renameChange.newFileName,"},{"operation":"ADD","number":90,"content":"                        type \u003d ChangeType.RENAME,"},{"operation":"ADD","number":91,"content":"                        otherCommitId \u003d it.otherCommitId,"},{"operation":"ADD","number":92,"content":"                        isBinary \u003d it.isBinary,"},{"operation":"ADD","number":93,"content":"                        hunks \u003d emptyList(),"},{"operation":"ADD","number":94,"content":"                        annotatedLines \u003d it.annotatedLines"},{"operation":"ADD","number":95,"content":"                )"},{"operation":"ADD","number":96,"content":"            }"}]},{"lineChanges":[{"operation":"REMOVE","number":101,"content":"        private fun getLineChanges(changeDTO: ChangeDTO) \u003d"},{"operation":"REMOVE","number":102,"content":"                changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList()"},{"operation":"ADD","number":99,"content":"        private fun getLineChanges(changeDTO: ChangeDTO): MutableList\u003cLineChange\u003e {"},{"operation":"ADD","number":100,"content":"            return changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList()"},{"operation":"ADD","number":101,"content":"        }"}]},{"lineChanges":[{"operation":"REMOVE","number":160,"content":""}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Constants.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Constants.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":11,"content":"val devNull \u003d \"dev/null\""},{"operation":"ADD","number":11,"content":"\\ No newline at end of file"}]}],"annotatedLines":[],"parentCommitId":"f55604defded3909761389eb06cf02d98bb1391d","isBinary":false,"isBlame":false}]},{"id":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","parentIds":["c06076211b91808d846213c00d074d36d5d8b271"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 18, 2019, 2:27:47 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 18, 2019, 2:27:47 PM","message":"more minor refactoring","changes":[{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/CommitRegistry.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/registries/CommitRegistry.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"        return if (id.startsWith(\"^\")) findByPrefix(id) else super.getByID(id)"},{"operation":"ADD","number":8,"content":"        return if (id.startsWith(\"^\")) findByPrefix(id.removePrefix(\"^\")) else super.getByID(id)"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    private fun findByPrefix(id: String) \u003d all.find { it.id.startsWith(id.removePrefix(\"^\")) }"},{"operation":"ADD","number":11,"content":"    private fun findByPrefix(prefix: String) \u003d all.find { it.id.startsWith(prefix) }"}]}],"annotatedLines":[],"parentCommitId":"c06076211b91808d846213c00d074d36d5d8b271","isBinary":false,"isBlame":false}]},{"id":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","parentIds":["3682ffa5ed0b9c23083cabd0c73e07f88f9e803c"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 24, 2019, 11:50:00 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 24, 2019, 11:50:00 PM","message":"Added new annotated lines as changes in commit","changes":[{"oldFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ChangeDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ChangeDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"                val hunks: List\u003cHunkDTO\u003e,"},{"operation":"ADD","number":8,"content":"                var hunks: List\u003cHunkDTO\u003e \u003d ArrayList(),"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"                val isBinary: Boolean)"},{"operation":"ADD","number":11,"content":"                val isBinary: Boolean,"},{"operation":"ADD","number":12,"content":"                var isBlame: Boolean)"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/LineChangeDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/LineChangeDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"data class LineChangeDTO(val operation: LineOperation, val lineNumber: Int, val content: String)"},{"operation":"ADD","number":5,"content":"data class LineChangeDTO(val operation: LineOperation, val number: Int, val content: String)"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.utils.OsUtils"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"    private val gitLogCommand \u003d \"$git log $renameDetectionThreshold -c $contextThreshold --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%nauthor date: %ad%ncommitter name: %cn%ncommitter email: %ce%ncommitter date: %cd%nmessage:%n%s%n%b\\\"\""},{"operation":"ADD","number":23,"content":"    private val gitLogCommand \u003d \"$git log $renameDetectionThreshold -c $contextThreshold --encoding\u003dUTF-8 --format\u003d\\\"commit: %H%nparents: %P%nauthor name: %an%nauthor email: %ae%nauthor date: %ad%ncommitter name: %cn%ncommitter email: %ce%ncommitter date: %cd %nmessage:%n%s%n%b\\\"\""}]},{"lineChanges":[{"operation":"REMOVE","number":44,"content":"        processBuilder.command(\"bash\", \"-c\", command)"},{"operation":"ADD","number":45,"content":"        processBuilder.command(OsUtils.commandInterpreterPrefix, OsUtils.interpreterArg, command)"}]},{"lineChanges":[{"operation":"REMOVE","number":60,"content":"    val gitClient \u003d GitClient(Paths.get(\"/home/darius/.dx-platform/projects/kafka/repository/kafka\"))"},{"operation":"ADD","number":61,"content":"    val gitClient \u003d GitClient(Paths.get(System.getProperty(\"user.home\"), \"Documents\", \"DX\", \"kafkaRepo\", \"kafka\"))"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"import org.dxworks.inspectorgit.parsers.impl.SimpleHunkParser"}]},{"lineChanges":[{"operation":"ADD","number":17,"content":"    open val isBlameParser \u003d false"},{"operation":"ADD","number":18,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":26,"content":"                hunks \u003d extractHunks(lines),"}]},{"lineChanges":[{"operation":"REMOVE","number":28,"content":"                isBinary \u003d lines.any { it.startsWith(\"Binary files\") })"},{"operation":"ADD","number":28,"content":"                isBinary \u003d lines.any { it.startsWith(\"Binary files\") },"},{"operation":"ADD","number":29,"content":"                isBlame \u003d isBlameParser)"}]},{"lineChanges":[{"operation":"ADD","number":31,"content":"        addHunks(lines, changeDTO)"}]},{"lineChanges":[{"operation":"REMOVE","number":33,"content":"    abstract fun addAnnotatedLines(changeDTO: ChangeDTO)"},{"operation":"ADD","number":35,"content":"    protected abstract fun addAnnotatedLines(changeDTO: ChangeDTO)"}]},{"lineChanges":[{"operation":"REMOVE","number":35,"content":"    private fun extractHunks(lines: MutableList\u003cString\u003e): List\u003cHunkDTO\u003e {"},{"operation":"REMOVE","number":36,"content":"        return if (lines.isNotEmpty()) {"},{"operation":"REMOVE","number":37,"content":"            getHunks(lines).map { SimpleHunkParser().parse(it) }"},{"operation":"REMOVE","number":38,"content":"        } else emptyList()"},{"operation":"REMOVE","number":39,"content":"    }"},{"operation":"ADD","number":37,"content":"    protected abstract fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO)"}]},{"lineChanges":[{"operation":"REMOVE","number":41,"content":"    private fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":39,"content":"    protected fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":7,"content":"import org.dxworks.inspectorgit.dto.LineChangeDTO"},{"operation":"ADD","number":8,"content":"import org.dxworks.inspectorgit.enums.LineOperation"}]},{"lineChanges":[{"operation":"ADD","number":11,"content":"import java.util.*"}]},{"lineChanges":[{"operation":"ADD","number":14,"content":"    override val isBlameParser: Boolean"},{"operation":"ADD","number":15,"content":"        get() \u003d true"},{"operation":"ADD","number":16,"content":""},{"operation":"ADD","number":17,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":18,"content":"        val newAnnotatedLines \u003d changeDTO.annotatedLines.filter { it.commitId \u003d\u003d commitId }"},{"operation":"ADD","number":19,"content":"        if (newAnnotatedLines.isNotEmpty()) {"},{"operation":"ADD","number":20,"content":"            changeDTO.hunks \u003d Collections.singletonList(HunkDTO(newAnnotatedLines"},{"operation":"ADD","number":21,"content":"                    .map { LineChangeDTO(LineOperation.ADD, it.number, it.content) }))"},{"operation":"ADD","number":22,"content":"            changeDTO.isBlame \u003d false"},{"operation":"ADD","number":23,"content":"        }"},{"operation":"ADD","number":24,"content":"    }"},{"operation":"ADD","number":25,"content":""}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    override fun addAnnotatedLines(changeDTO: ChangeDTO){}"},{"operation":"ADD","number":8,"content":"    override fun addAnnotatedLines(changeDTO: ChangeDTO) {}"},{"operation":"ADD","number":9,"content":""},{"operation":"ADD","number":10,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":11,"content":"        changeDTO.hunks \u003d if (lines.isNotEmpty()) {"},{"operation":"ADD","number":12,"content":"            getHunks(lines).map { SimpleHunkParser().parse(it) }"},{"operation":"ADD","number":13,"content":"        } else emptyList()"},{"operation":"ADD","number":14,"content":"    }"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleHunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleHunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":17,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.REMOVE, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"},{"operation":"ADD","number":17,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.REMOVE, number \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"-\")))"}]},{"lineChanges":[{"operation":"REMOVE","number":19,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.ADD, lineNumber \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"},{"operation":"ADD","number":19,"content":"            lineChanges.add(LineChangeDTO(operation \u003d LineOperation.ADD, number \u003d i, content \u003d lines[diffLineIndex++].removePrefix(\"+\")))"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":94,"content":"                        annotatedLines \u003d it.annotatedLines"},{"operation":"ADD","number":94,"content":"                        annotatedLines \u003d it.annotatedLines,"},{"operation":"ADD","number":95,"content":"                        isBlame \u003d it.isBlame"}]},{"lineChanges":[{"operation":"REMOVE","number":100,"content":"            return changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.lineNumber, it.content) }.toMutableList()"},{"operation":"ADD","number":101,"content":"            return changeDTO.hunks.flatMap { it.lineChanges }.map { LineChange(it.operation, it.number, it.content) }.toMutableList()"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/OsUtils.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.utils"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"class OsUtils {"},{"operation":"ADD","number":4,"content":"    companion object {"},{"operation":"ADD","number":5,"content":"        private val osName by lazy { System.getProperty(\"os.name\") }"},{"operation":"ADD","number":6,"content":"        val isWindows by lazy { osName.toLowerCase().contains(\"win\") }"},{"operation":"ADD","number":7,"content":"        val isUnix by lazy { !isWindows }"},{"operation":"ADD","number":8,"content":"        val commandInterpreterPrefix by lazy { if (isUnix) \"bash\" else \"cmd.exe\" }"},{"operation":"ADD","number":9,"content":"        val interpreterArg by lazy { if (isUnix) \"-c\" else \"/C\" }"},{"operation":"ADD","number":10,"content":"    }"},{"operation":"ADD","number":11,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"3682ffa5ed0b9c23083cabd0c73e07f88f9e803c","isBinary":false,"isBlame":false}]},{"id":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","parentIds":["fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Sep 30, 2019, 10:54:50 AM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Sep 30, 2019, 10:54:50 AM","message":"added logic for parsing combined diffs, mode to be added","changes":[{"oldFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ChangeDTO.kt","newFileName":"inspectorgit-api/src/main/java/org/dxworks/inspectorgit/dto/ChangeDTO.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":10,"content":"                val otherCommitId: String,"},{"operation":"ADD","number":10,"content":"                val parentCommitId: String,"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/GitClient.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.inspectorgit.utils.DTO_FOLDER_PATH"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.inspectorgit.utils.Helper"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.utils.FileSystemUtils"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.utils.JsonUtils"}]},{"lineChanges":[{"operation":"ADD","number":27,"content":"    private val gitBranchCommand \u003d \"$git branch\""}]},{"lineChanges":[{"operation":"ADD","number":30,"content":"    val repoName \u003d path.fileName.toString()"},{"operation":"ADD","number":31,"content":""}]},{"lineChanges":[{"operation":"ADD","number":36,"content":"    val branch: String \u003d runCommand(gitBranchCommand).find { it.startsWith(\"* \") }!!.removePrefix(\"* \")"},{"operation":"ADD","number":37,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":63,"content":"    Helper.toJsonFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), projectDTO)"},{"operation":"ADD","number":68,"content":"    JsonUtils.toJsonFile(FileSystemUtils.getDtoFileFor(gitClient.repoName, gitClient.branch), projectDTO)"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.inspectorgit.dto.HunkDTO"}]},{"lineChanges":[{"operation":"REMOVE","number":12,"content":"abstract class ChangeParser(private val otherCommitId: String) : GitParser\u003cChangeDTO\u003e {"},{"operation":"ADD","number":11,"content":"abstract class ChangeParser(private val parentCommitId: String) : GitParser\u003cChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":27,"content":"                otherCommitId \u003d otherCommitId,"},{"operation":"ADD","number":26,"content":"                parentCommitId \u003d parentCommitId,"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":8,"content":"import java.text.SimpleDateFormat"},{"operation":"ADD","number":9,"content":"import java.time.LocalDate"},{"operation":"ADD","number":10,"content":"import java.time.format.DateTimeFormatter"}]},{"lineChanges":[{"operation":"REMOVE","number":17,"content":""}]},{"lineChanges":[{"operation":"ADD","number":21,"content":"    private val dateFormat \u003d \"EEE MMM d HH:mm:ss yyyy Z\""}]},{"lineChanges":[{"operation":"ADD","number":73,"content":""}]},{"lineChanges":[{"operation":"REMOVE","number":71,"content":"        return Date(lines.removeAt(0).removePrefix(\"$devType date: \"))"},{"operation":"ADD","number":75,"content":"        val timeStamp \u003d lines.removeAt(0).removePrefix(\"$devType date: \").trim()"},{"operation":"ADD","number":76,"content":"        return SimpleDateFormat(dateFormat).parse(timeStamp)"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/HunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/HunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":6,"content":"import java.lang.Exception"}]},{"lineChanges":[{"operation":"REMOVE","number":19,"content":"        val lineCount \u003d if (lineNumberAndCount.size \u003c 2) 1 else Integer.parseInt(lineNumberAndCount[1])"},{"operation":"ADD","number":20,"content":"        val lineCount \u003d if (lineNumberAndCount.size \u003c 2) 1 else {"},{"operation":"ADD","number":21,"content":"            try {"},{"operation":"ADD","number":22,"content":"                Integer.parseInt(lineNumberAndCount[1])"},{"operation":"ADD","number":23,"content":"            } catch (e: Exception) {"},{"operation":"ADD","number":24,"content":"                0"},{"operation":"ADD","number":25,"content":"            }"},{"operation":"ADD","number":26,"content":""},{"operation":"ADD","number":27,"content":"        }"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":13,"content":"class BlameParser(private val gitClient: GitClient, private val commitId: String, otherCommitId: String) : ChangeParser(otherCommitId) {"},{"operation":"ADD","number":13,"content":"class BlameParser(private val gitClient: GitClient, private val commitId: String, parentCommitId: String) : ChangeParser(parentCommitId) {"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeChangeParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.ChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.parsers.abstracts.ChangeParser"},{"operation":"ADD","number":5,"content":""},{"operation":"ADD","number":6,"content":"class MergeChangeParser(private val parentIndex: Int, private val numberOfParents: Int, parentCommitId: String) : ChangeParser(parentCommitId) {"},{"operation":"ADD","number":7,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":8,"content":"        changeDTO.hunks \u003d if (lines.isNotEmpty()) {"},{"operation":"ADD","number":9,"content":"            getHunks(lines).map { MergeHunkParser(parentIndex, numberOfParents).parse(it) }"},{"operation":"ADD","number":10,"content":"        } else emptyList()"},{"operation":"ADD","number":11,"content":"    }"},{"operation":"ADD","number":12,"content":""},{"operation":"ADD","number":13,"content":"    override fun addAnnotatedLines(changeDTO: ChangeDTO) {"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"    }"},{"operation":"ADD","number":16,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeCommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"ADD","number":11,"content":"        val blameChanges \u003d getBlameChanges(parentAndFile, commitId)"},{"operation":"ADD","number":12,"content":"        val mergeChanges \u003d if (lines.isNotEmpty()) getMergeChanges(lines, parentIds) else emptyList()"},{"operation":"ADD","number":13,"content":"        return blameChanges + mergeChanges"},{"operation":"ADD","number":14,"content":"    }"},{"operation":"ADD","number":15,"content":""},{"operation":"ADD","number":16,"content":"    private fun getBlameChanges(parentAndFile: List\u003cPair\u003cString, String\u003e\u003e, commitId: String): List\u003cChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"ADD","number":22,"content":"    private fun getMergeChanges(lines: MutableList\u003cString\u003e, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":23,"content":"        val changes \u003d getChanges(lines)"},{"operation":"ADD","number":24,"content":"        return parentIds.mapIndexed { index, parentCommitId -\u003e changes.map { MergeChangeParser(index, parentIds.size, parentCommitId).parse(it) } }.flatten()"},{"operation":"ADD","number":25,"content":"    }"},{"operation":"ADD","number":26,"content":""}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeHunkParser.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.parsers.impl"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import org.dxworks.inspectorgit.dto.LineChangeDTO"},{"operation":"ADD","number":4,"content":"import org.dxworks.inspectorgit.enums.LineOperation"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.parsers.abstracts.HunkParser"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"class MergeHunkParser(private val parentIndex: Int, private val numberOfParents: Int) : HunkParser() {"},{"operation":"ADD","number":8,"content":"    private val minus \u003d \u0027-\u0027"},{"operation":"ADD","number":9,"content":"    private val plus \u003d \"+\""},{"operation":"ADD","number":10,"content":""},{"operation":"ADD","number":11,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":12,"content":"        val (fromFileRange, toFileRange) \u003d getFileRanges(lines)"},{"operation":"ADD","number":13,"content":"        return getFromLineChanges(fromFileRange, getFromLines(lines)) + getToLineChanges(toFileRange, getToLines(lines))"},{"operation":"ADD","number":14,"content":"    }"},{"operation":"ADD","number":15,"content":""},{"operation":"ADD","number":16,"content":"    private fun getToLineChanges(toFileRange: Pair\u003cInt, Int\u003e, lines: List\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":17,"content":"        val toFileRangeStart \u003d toFileRange.first"},{"operation":"ADD","number":18,"content":"        return lines.mapIndexed { i, line -\u003e LineChangeDTO(LineOperation.ADD, toFileRangeStart + i, line.substring(numberOfParents)) }"},{"operation":"ADD","number":19,"content":"    }"},{"operation":"ADD","number":20,"content":""},{"operation":"ADD","number":21,"content":"    private fun getFromLineChanges(fromFileRange: Pair\u003cInt, Int\u003e, lines: List\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":22,"content":"        val fromFileRangeStart \u003d fromFileRange.first"},{"operation":"ADD","number":23,"content":"        return lines.mapIndexed { i, line -\u003e LineChangeDTO(LineOperation.REMOVE, fromFileRangeStart + i, line.substring(numberOfParents)) }"},{"operation":"ADD","number":24,"content":"    }"},{"operation":"ADD","number":25,"content":""},{"operation":"ADD","number":26,"content":"    private fun getFromLines(lines: List\u003cString\u003e): List\u003cString\u003e {"},{"operation":"ADD","number":27,"content":"        val pluses \u003d plus.repeat(numberOfParents)"},{"operation":"ADD","number":28,"content":"        return lines.filter {"},{"operation":"ADD","number":29,"content":"            it.startsWith(pluses) ||"},{"operation":"ADD","number":30,"content":"                    it[parentIndex] \u003d\u003d minus ||"},{"operation":"ADD","number":31,"content":"                    it.startsWith(pluses.replaceRange(parentIndex, parentIndex + 1, \" \"))"},{"operation":"ADD","number":32,"content":""},{"operation":"ADD","number":33,"content":"        }"},{"operation":"ADD","number":34,"content":"    }"},{"operation":"ADD","number":35,"content":""},{"operation":"ADD","number":36,"content":"    private fun getToLines(lines: List\u003cString\u003e): List\u003cString\u003e {"},{"operation":"ADD","number":37,"content":"        return lines.filter { it.substring(0, numberOfParents).contains(plus) }"},{"operation":"ADD","number":38,"content":"    }"},{"operation":"ADD","number":39,"content":""},{"operation":"ADD","number":40,"content":"    private fun getFileRanges(lines: MutableList\u003cString\u003e): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"},{"operation":"ADD","number":41,"content":"        val fileRangeNumbers \u003d lines[0].split(\"@ \")[1].split(\" @\")[0]"},{"operation":"ADD","number":42,"content":"        val fileRangeSplitNumbers \u003d fileRangeNumbers.split(\" \")"},{"operation":"ADD","number":43,"content":"        val fromFileRange \u003d getNumbersPair(fileRangeSplitNumbers[parentIndex])"},{"operation":"ADD","number":44,"content":"        val toFileRange \u003d getNumbersPair(fileRangeSplitNumbers.last())"},{"operation":"ADD","number":45,"content":"        return Pair(fromFileRange, toFileRange)"},{"operation":"ADD","number":46,"content":"    }"},{"operation":"ADD","number":47,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"class SimpleChangeParser(otherCommitId: String) : ChangeParser(otherCommitId) {"},{"operation":"ADD","number":7,"content":"class SimpleChangeParser(parentCommitId: String) : ChangeParser(parentCommitId) {"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/Main.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/Main.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":5,"content":"import org.dxworks.inspectorgit.utils.DTO_FOLDER_PATH"},{"operation":"REMOVE","number":6,"content":"import org.dxworks.inspectorgit.utils.Helper"},{"operation":"ADD","number":5,"content":"import org.dxworks.inspectorgit.utils.FileSystemUtils"},{"operation":"ADD","number":6,"content":"import org.dxworks.inspectorgit.utils.JsonUtils"}]},{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    val project \u003d ProjectTransformer.createProject(Helper.jsonFromFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), ProjectDTO::class.java), \"kafka\")"},{"operation":"ADD","number":9,"content":"    val project \u003d ProjectTransformer.createProject(JsonUtils.jsonFromFile(FileSystemUtils.getDtoFileFor(\"kafka\", \"trunk\"), ProjectDTO::class.java), \"kafka\")"}]},{"lineChanges":[{"operation":"REMOVE","number":11,"content":"//    Helper.deleteFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"))"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/model/Change.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val otherCommit: Commit?, val oldFileName: String, val newFileName: String, val lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"},{"operation":"ADD","number":6,"content":"data class Change(val commit: Commit, val type: ChangeType, val file: File, val parentCommit: Commit?, val oldFileName: String, val newFileName: String, val lineChanges: List\u003cLineChange\u003e, var annotatedLines: List\u003cAnnotatedLine\u003e) {"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/transformers/ProjectTransformer.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":60,"content":"                        otherCommit \u003d if (changeDTO.otherCommitId.isEmpty()) null else commit.parents.find { it.id \u003d\u003d changeDTO.otherCommitId }!!,"},{"operation":"ADD","number":60,"content":"                        parentCommit \u003d if (changeDTO.parentCommitId.isEmpty()) null else commit.parents.find { it.id \u003d\u003d changeDTO.parentCommitId }!!,"}]},{"lineChanges":[{"operation":"REMOVE","number":91,"content":"                        otherCommitId \u003d it.otherCommitId,"},{"operation":"ADD","number":91,"content":"                        parentCommitId \u003d it.parentCommitId,"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Constants.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Constants.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"private const val APP_FOLDER_NAME \u003d \".inspectorgit\""},{"operation":"REMOVE","number":7,"content":"private const val DTO_FOLDER_NAME \u003d \"jsonProjects\""},{"operation":"REMOVE","number":8,"content":"val APP_FOLDER_PATH: Path \u003d Paths.get(System.getProperty(\"user.home\"), APP_FOLDER_NAME)"},{"operation":"REMOVE","number":9,"content":"val DTO_FOLDER_PATH: Path \u003d APP_FOLDER_PATH.resolve(DTO_FOLDER_NAME)"},{"operation":"ADD","number":6,"content":""}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"dev/null","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/FileSystemUtils.kt","type":"ADD","hunks":[{"lineChanges":[{"operation":"ADD","number":1,"content":"package org.dxworks.inspectorgit.utils"},{"operation":"ADD","number":2,"content":""},{"operation":"ADD","number":3,"content":"import java.io.File"},{"operation":"ADD","number":4,"content":"import java.nio.file.Path"},{"operation":"ADD","number":5,"content":"import java.nio.file.Paths"},{"operation":"ADD","number":6,"content":""},{"operation":"ADD","number":7,"content":"class FileSystemUtils {"},{"operation":"ADD","number":8,"content":"    companion object {"},{"operation":"ADD","number":9,"content":"        private const val APP_FOLDER_NAME \u003d \".inspectorgit\""},{"operation":"ADD","number":10,"content":"        private const val PROJECTS_FOLDER_NAME \u003d \"projects\""},{"operation":"ADD","number":11,"content":"        private const val PROJECT_DTO_FOLDER_NAME \u003d \"DTO\""},{"operation":"ADD","number":12,"content":"        private val APP_FOLDER_PATH: Path \u003d Paths.get(System.getProperty(\"user.home\"), APP_FOLDER_NAME)"},{"operation":"ADD","number":13,"content":"        private val PROJECTS_FOLDER_PATH: Path \u003d APP_FOLDER_PATH.resolve(PROJECTS_FOLDER_NAME)"},{"operation":"ADD","number":14,"content":""},{"operation":"ADD","number":15,"content":"        fun getDtoFolderPathFor(repoName: String): Path {"},{"operation":"ADD","number":16,"content":"            return PROJECTS_FOLDER_PATH.resolve(repoName).resolve(PROJECT_DTO_FOLDER_NAME)"},{"operation":"ADD","number":17,"content":"        }"},{"operation":"ADD","number":18,"content":""},{"operation":"ADD","number":19,"content":"        fun getDtoFileFor(repoName: String, branch: String): Path {"},{"operation":"ADD","number":20,"content":"            return getDtoFolderPathFor(repoName).resolve(\"$branch.json\")"},{"operation":"ADD","number":21,"content":"        }"},{"operation":"ADD","number":22,"content":"    }"},{"operation":"ADD","number":23,"content":"}"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/Helper.kt","newFileName":"inspectorgit-core/src/main/java/org/dxworks/inspectorgit/utils/JsonUtils.kt","type":"RENAME","hunks":[{"lineChanges":[{"operation":"REMOVE","number":12,"content":"class Helper {"},{"operation":"ADD","number":12,"content":"class JsonUtils {"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":"        private val LOG \u003d LoggerFactory.getLogger(Helper::class.java)"},{"operation":"ADD","number":14,"content":"        private val LOG \u003d LoggerFactory.getLogger(JsonUtils::class.java)"}]},{"lineChanges":[{"operation":"REMOVE","number":36,"content":"}"},{"operation":"REMOVE","number":37,"content":""},{"operation":"REMOVE","number":38,"content":"fun main() {"},{"operation":"REMOVE","number":39,"content":"    Helper.toJsonFile(Paths.get(\"/home/darius/Documents/dx/kafka/1caaf6db400df7e37b7f0416bb83ab451018a5c8.json\"), Helper.jsonFromFile(DTO_FOLDER_PATH.resolve(\"kafka.json\"), ProjectDTO::class.java).commits.filter{it.id \u003d\u003d \"3f432cd01c4728396f277e33897f6f898c530c99\"})"}]}],"annotatedLines":[],"parentCommitId":"fe92acd84f2b91c1f91cf8b9f1bb38df4de63aac","isBinary":false,"isBlame":false}]},{"id":"fe71f8595eeb0ec97aab449a3e389bbed30d8346","parentIds":["59a1dd246d2ac0c6c228f2cbc23eaff17f529485"],"authorName":"Darius Nagy","authorEmail":"nagydarius97@gmail.com","authorDate":"Oct 2, 2019, 2:00:06 PM","committerName":"Darius Nagy","committerEmail":"nagydarius97@gmail.com","committerDate":"Oct 2, 2019, 2:00:06 PM","message":"refactored parse to take list","changes":[{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/GitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/GitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":4,"content":"    fun parse(lines: MutableList\u003cString\u003e): T"},{"operation":"ADD","number":4,"content":"    fun parse(lines: List\u003cString\u003e): T"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/LogParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/LogParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":16,"content":"    override fun parse(lines: MutableList\u003cString\u003e): ProjectDTO {"},{"operation":"ADD","number":16,"content":"    override fun parse(lines: List\u003cString\u003e): ProjectDTO {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/ChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":18,"content":"    override fun parse(lines: MutableList\u003cString\u003e): ChangeDTO {"},{"operation":"ADD","number":18,"content":"    override fun parse(lines: List\u003cString\u003e): ChangeDTO {"}]},{"lineChanges":[{"operation":"REMOVE","number":36,"content":"    protected abstract fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO)"},{"operation":"ADD","number":36,"content":"    protected abstract fun addHunks(lines: List\u003cString\u003e, changeDTO: ChangeDTO)"}]},{"lineChanges":[{"operation":"REMOVE","number":38,"content":"    protected fun getHunks(lines: MutableList\u003cString\u003e): List\u003cMutableList\u003cString\u003e\u003e {"},{"operation":"ADD","number":38,"content":"    protected fun getHunks(lines: List\u003cString\u003e): List\u003cList\u003cString\u003e\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":58,"content":"    private fun extractChangeType(lines: MutableList\u003cString\u003e): ChangeType {"},{"operation":"ADD","number":58,"content":"    private fun extractChangeType(lines: List\u003cString\u003e): ChangeType {"}]},{"lineChanges":[{"operation":"REMOVE","number":71,"content":"    private fun extractFileNames(lines: MutableList\u003cString\u003e, type: ChangeType): Pair\u003cString, String\u003e {"},{"operation":"REMOVE","number":72,"content":"        val diffLine \u003d lines.removeAt(0)"},{"operation":"ADD","number":71,"content":"    private fun extractFileNames(lines: List\u003cString\u003e, type: ChangeType): Pair\u003cString, String\u003e {"},{"operation":"ADD","number":72,"content":"        val diffLine \u003d lines[0]"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/CommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"import java.time.LocalDate"},{"operation":"REMOVE","number":10,"content":"import java.time.format.DateTimeFormatter"}]},{"lineChanges":[{"operation":"REMOVE","number":23,"content":"    override fun parse(lines: MutableList\u003cString\u003e): CommitDTO {"},{"operation":"REMOVE","number":24,"content":"        val commitId \u003d extractCommitId(lines)"},{"operation":"ADD","number":21,"content":"    override fun parse(lines: List\u003cString\u003e): CommitDTO {"},{"operation":"ADD","number":22,"content":"        val mutableLines \u003d lines.toMutableList()"},{"operation":"ADD","number":23,"content":"        val commitId \u003d extractCommitId(mutableLines)"}]},{"lineChanges":[{"operation":"REMOVE","number":26,"content":"        val parentIds \u003d extractParentIds(lines)"},{"operation":"ADD","number":25,"content":"        val parentIds \u003d extractParentIds(mutableLines)"}]},{"lineChanges":[{"operation":"REMOVE","number":30,"content":"                authorName \u003d extractName(lines, author),"},{"operation":"REMOVE","number":31,"content":"                authorEmail \u003d extractEmail(lines, author),"},{"operation":"REMOVE","number":32,"content":"                authorDate \u003d extractDate(lines, author),"},{"operation":"REMOVE","number":33,"content":"                committerName \u003d extractName(lines, committer),"},{"operation":"REMOVE","number":34,"content":"                committerEmail \u003d extractEmail(lines, committer),"},{"operation":"REMOVE","number":35,"content":"                committerDate \u003d extractDate(lines, committer),"},{"operation":"REMOVE","number":36,"content":"                message \u003d extractMessage(lines),"},{"operation":"REMOVE","number":37,"content":"                changes \u003d extractChanges(lines, commitId, parentIds))"},{"operation":"ADD","number":29,"content":"                authorName \u003d extractName(mutableLines, author),"},{"operation":"ADD","number":30,"content":"                authorEmail \u003d extractEmail(mutableLines, author),"},{"operation":"ADD","number":31,"content":"                authorDate \u003d extractDate(mutableLines, author),"},{"operation":"ADD","number":32,"content":"                committerName \u003d extractName(mutableLines, committer),"},{"operation":"ADD","number":33,"content":"                committerEmail \u003d extractEmail(mutableLines, committer),"},{"operation":"ADD","number":34,"content":"                committerDate \u003d extractDate(mutableLines, committer),"},{"operation":"ADD","number":35,"content":"                message \u003d extractMessage(mutableLines),"},{"operation":"ADD","number":36,"content":"                changes \u003d extractChanges(mutableLines, commitId, parentIds))"}]},{"lineChanges":[{"operation":"REMOVE","number":40,"content":"    abstract fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e"},{"operation":"ADD","number":39,"content":"    abstract fun extractChanges(lines: List\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/HunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/abstracts/HunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":6,"content":"import java.lang.Exception"}]},{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    override fun parse(lines: MutableList\u003cString\u003e): HunkDTO {"},{"operation":"ADD","number":9,"content":"    override fun parse(lines: List\u003cString\u003e): HunkDTO {"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":"    protected abstract fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e"},{"operation":"ADD","number":13,"content":"    protected abstract fun extractLineChanges(lines: List\u003cString\u003e): List\u003cLineChangeDTO\u003e"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/BlameParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":17,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":17,"content":"    override fun addHunks(lines: List\u003cString\u003e, changeDTO: ChangeDTO) {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":7,"content":"    override fun addHunks(lines: List\u003cString\u003e, changeDTO: ChangeDTO) {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeCommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":9,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":9,"content":"    override fun extractChanges(lines: List\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":22,"content":"    private fun getMergeChanges(lines: MutableList\u003cString\u003e, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":22,"content":"    private fun getMergeChanges(lines: List\u003cString\u003e, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeHunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/MergeHunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":11,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":11,"content":"    override fun extractLineChanges(lines: List\u003cString\u003e): List\u003cLineChangeDTO\u003e {"}]},{"lineChanges":[{"operation":"REMOVE","number":40,"content":"    private fun getFileRanges(lines: MutableList\u003cString\u003e): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"},{"operation":"ADD","number":40,"content":"    private fun getFileRanges(lines: List\u003cString\u003e): Pair\u003cPair\u003cInt, Int\u003e, Pair\u003cInt, Int\u003e\u003e {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleChangeParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":10,"content":"    override fun addHunks(lines: MutableList\u003cString\u003e, changeDTO: ChangeDTO) {"},{"operation":"ADD","number":10,"content":"    override fun addHunks(lines: List\u003cString\u003e, changeDTO: ChangeDTO) {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleCommitParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleCommitParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":7,"content":"    override fun extractChanges(lines: MutableList\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"},{"operation":"ADD","number":7,"content":"    override fun extractChanges(lines: List\u003cString\u003e, commitId: String, parentIds: List\u003cString\u003e): List\u003cChangeDTO\u003e {"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false},{"oldFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleHunkParser.kt","newFileName":"inspectorgit-client/src/main/java/org/dxworks/inspectorgit/parsers/impl/SimpleHunkParser.kt","type":"MODIFY","hunks":[{"lineChanges":[{"operation":"REMOVE","number":8,"content":"    override fun extractLineChanges(lines: MutableList\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"REMOVE","number":9,"content":"        val (removePair, addPair) \u003d getRemoveAndAddHunkInfo(lines.removeAt(0))"},{"operation":"ADD","number":8,"content":"    override fun extractLineChanges(lines: List\u003cString\u003e): List\u003cLineChangeDTO\u003e {"},{"operation":"ADD","number":9,"content":"        val (removePair, addPair) \u003d getRemoveAndAddHunkInfo(lines[0])"}]},{"lineChanges":[{"operation":"REMOVE","number":14,"content":"        var diffLineIndex \u003d 0"},{"operation":"ADD","number":14,"content":"        var diffLineIndex \u003d 1"}]}],"annotatedLines":[],"parentCommitId":"59a1dd246d2ac0c6c228f2cbc23eaff17f529485","isBinary":false,"isBlame":false}]}]}